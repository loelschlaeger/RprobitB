[{"path":"https://loelschlaeger.de/RprobitB/articles/v01_model_definition.html","id":"the-probit-model","dir":"Articles","previous_headings":"","what":"The probit model","title":"Model definition","text":"probit model regression-type model dependent variable takes finite number values error term normally distributed (Agresti 2015). purpose estimate probability dependent variable takes certain, discrete value. common application discrete choice scenarios. dependent variable one finitely many mutually exclusive alternatives, explanatory variables typically characteristics deciders alternatives. concrete, assume possess data NN decision makers choose J≥2J \\geq 2 alternatives TT choice occasions1. Specific decision maker, alternative choice occasion, furthermore observe PP choice attributes use explain choices. continuous choice attributes linked directly discrete choices must take detour latent variable. discrete choice setting, variable can interpreted decider’s utility certain alternative. Decider nn’s utility UntjU_{ntj} alternative jj choice occasion tt modeled Untj=Xntj′β+ϵntj\\begin{equation}   U_{ntj} = X_{ntj}'\\beta + \\epsilon_{ntj} \\end{equation} n=1,…,Nn=1,\\dots,N, t=1,…,Tt=1,\\dots,T j=1,…,Jj=1,\\dots,J, XntjX_{ntj} (column) vector PP characteristics jj faced nn tt, β∈ℝP\\beta \\{\\mathbb R}^{P} vector coefficients, (ϵnt:)=(ϵnt1,…,ϵntJ)′∼MVNJ(0,Σ)(\\epsilon_{nt:}) = (\\epsilon_{nt1},\\dots,\\epsilon_{ntJ})' \\sim \\text{MVN}_{J} (0,\\Sigma) model’s error term vector nn tt, probit model assumed multivariate normally distributed zero mean covariance matrix Σ\\Sigma. Now let ynt=jy_{nt}=j denote event decision maker nn chooses alternative jj choice occasion tt. Assuming utility maximizing behavior decision makers2, decisions linked utilities via ynt=argmaxj=1,…,JUntj.\\begin{equation} y_{nt} = {\\arg \\max}_{j = 1,\\dots,J} U_{ntj}. \\end{equation} ordered probit case, concept decider’s separate utilities alternative longer natural (Train 2009). Instead, model single utility value Unt=Xnt′βn+ϵnt\\begin{align*}   U_{nt} = X_{nt}'\\beta_n + \\epsilon_{nt} \\end{align*} per decider nn choice occasion tt, interpret “level association” nn choice question. utility value falls discrete categories, turn linked ordered alternatives j=1,…,Jj=1,\\dots,J. Formally, ynt=∑j=1,…,Jj⋅(γj−1<Unt≤γj),\\begin{align*}    y_{nt} = \\sum_{j = 1,\\dots,J} j \\cdot (\\gamma_{j-1} < U_{nt} \\leq \\gamma_{j}), \\end{align*} end points γ0=−∞\\gamma_0 = -\\infty γJ=+∞\\gamma_J = +\\infty, thresholds (γj)j=1,…,J−1(\\gamma_j)_{j=1,\\dots,J-1}. ensure monotonicity thresholds, rather estimate logarithmic threshold increments djd_j γj=∑=1,…,jexpdi\\gamma_j = \\sum_{=1,\\dots,j} \\exp{d_i}, j=1,…,J−1j=1,\\dots,J-1.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v01_model_definition.html","id":"choice-behavior-heterogeneity","dir":"Articles","previous_headings":"","what":"Choice behavior heterogeneity","title":"Model definition","text":"Note coefficient vector β\\beta constant across decision makers. assumption restrictive many applications.3 Heterogeneity choice behaviour can modelled imposing distribution β\\beta decider can preferences. Formally, define β=(α,βn)\\beta = (\\alpha, \\beta_n), α\\alpha PfP_f coefficients constant across deciders βn\\beta_n PrP_r decider-specific coefficients. Consequently, P=Pf+PrP = P_f + P_r. Now Pr>0P_r>0, βn\\beta_n distributed according PrP_r-variate distribution, -called mixing distribution. Choosing appropriate mixing distribution notoriously difficult task model specification. many applications, different types standard parametric distributions (including normal, log-normal, uniform tent distribution) tried conjunction likelihood value-based model selection, cf., Train (2009), Chapter 6. Instead, RprobitB implements approach (Oelschläger Bauer 2020) approximate underlying mixing distribution mixture (multivariate) Gaussian densities. precisely, underlying mixing distribution gPrg_{P_r} random coefficients (βn)n(\\beta_n)_{n} approximated mixture PrP_r-variate normal densities ϕPr\\phi_{P_r} mean vectors b=(bc)cb=(b_c)_{c} covariance matrices Ω=(Ωc)c\\Omega=(\\Omega_c)_{c} using CC components, .e. βn∣b,Ω∼∑c=1CscϕPr(⋅∣bc,Ωc).\\begin{equation} \\beta_n\\mid b,\\Omega \\sim \\sum_{c=1}^{C} s_c \\phi_{P_r} (\\cdot \\mid b_c,\\Omega_c). \\end{equation} , (sc)c(s_c)_{c} weights satisfying 0<sc≤10 < s_c\\leq 1 c=1,…,Cc=1,\\dots,C ∑csc=1\\sum_c s_c=1. One interpretation latent class model obtained introducing variables z=(zn)nz=(z_n)_n, allocating decision maker nn class cc probability scs_c, .e. Prob(zn=c)=sc∧βn∣z,b,Ω∼ϕPr(⋅∣bzn,Ωzn).\\begin{equation} \\text{Prob}(z_n=c)=s_c \\land \\beta_n \\mid z,b,\\Omega \\sim \\phi_{P_r}(\\cdot \\mid b_{z_n},\\Omega_{z_n}). \\end{equation} call resulting model latent class mixed multinomial probit model. Note model collapses (normally) mixed multinomial probit model Pr>0P_r>0 C=1C=1, multinomial probit model Pr=0P_r=0 binary probit model additionally J=2J=2.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v01_model_definition.html","id":"model-normalization","dir":"Articles","previous_headings":"","what":"Model normalization","title":"Model definition","text":"well known, utility model needs normalized respect level scale order identified (Train 2009). Therefore, consider transformed model Ũntj=X̃ntj′β+ϵ̃ntj,\\begin{equation} \\tilde{U}_{ntj} = \\tilde{X}_{ntj}' \\beta + \\tilde{\\epsilon}_{ntj}, \\end{equation} n=1,…,Nn=1,\\dots,N, t=1,…,Tt=1,\\dots,T j=1,…,J−1j=1,\\dots,J-1, (choosing JJ reference alternative) Ũntj=Untj−UntJ\\tilde{U}_{ntj} = U_{ntj} - U_{ntJ}, X̃ntj=Xntj−XntJ\\tilde{X}_{ntj} = X_{ntj} - X_{ntJ}, ϵ̃ntj=ϵntj−ϵntJ\\tilde{\\epsilon}_{ntj} = \\epsilon_{ntj} - \\epsilon_{ntJ}, (ϵ̃nt:)=(ϵ̃nt1,...,ϵ̃nt(J−1))′∼MVNJ−1(0,Σ̃)(\\tilde{\\epsilon}_{nt:}) = (\\tilde{\\epsilon}_{nt1},...,\\tilde{\\epsilon}_{nt(J-1)})'  \\sim \\text{MVN}_{J-1} (0,\\tilde{\\Sigma}) Σ̃\\tilde{\\Sigma} denotes covariance matrix top-left element restricted one.4","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v01_model_definition.html","id":"parameter-labels","dir":"Articles","previous_headings":"","what":"Parameter labels","title":"Model definition","text":"RprobitB, probit model parameters saved RprobitB_parameter object. labels consistent definition vignette. example:","code":"RprobitB_parameter(   P_f = 1,   P_r = 2,   J = 3,   N = 10,   C = 2, # the number of latent classes   alpha = c(1), # the fixed coefficient vector of length 'P_f'   s = c(0.6, 0.4), # the vector of class weights of length 'C'   # the matrix of class means as columns of dimension 'P_r' x 'C'   b = matrix(c(-1, 1, 1, 2), nrow = 2, ncol = 2),   # the matrix of class covariance matrices as columns of dimension 'P_r^2' x 'C'   Omega = matrix(c(diag(2), 0.1 * diag(2)), nrow = 4, ncol = 2),   # the differenced error term covariance matrix of dimension '(J-1)' x '(J-1)'   # the undifferenced error term covariance matrix is labelled 'Sigma_full'   Sigma = diag(2),   z = rep(1:2, 5) # the vector of the allocation variables of length 'N' ) #> alpha : 1 #>  #> C : 2 #>  #> s : double vector of length 2  #> 0.6 0.4 #>  #> b : 2 x 2 matrix of doubles  #>      [,1] [,2] #> [1,]   -1    1 #> [2,]    1    2 #>  #>  #> Omega : 4 x 2 matrix of doubles  #>      [,1] [,2] #> [1,]    1  0.1 #> [2,]    0    0 #> [3,]    0    0 #> [4,]    1  0.1 #>  #>  #> Sigma : 2 x 2 matrix of doubles  #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    1 #>  #>  #> Sigma_full : 3 x 3 matrix of doubles  #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    1    0 #> [3,]    0    0    0 #>  #>  #> beta : 2 x 10 matrix of doubles  #>       [,1] [,2]  [,3] ... [,10] #> [1,] -0.03 0.97 -0.25 ...  1.52 #> [2,] -0.01 1.82  0.07 ...  1.75 #>  #>  #> z : double vector of length 10  #> 1 2 1 ... 2 #>  #> d : NA"},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"requirements","dir":"Articles","previous_headings":"","what":"Requirements","title":"Choice data","text":"RprobitB helps modelling choice individual deciders one alternative finite set choice alternatives. choice set satisfy three properties (Train 2009): Choices need mutually exclusive (one can choose one one alternative different), exhaustive (alternatives leave options open), finitely many. Every decider may take one repeated choices (called choice occasions). data set thus contains information identifier decider (optionally choice situation), choices, alternative decider specific covariates. Additionally, RprobitB needs following formal requirements: data set must “wide” format, means row provides full information one choice occasion.2 must contain column unique identifiers decision maker. Additionally, can contain column identifier choice situation decider. information missing, identifier generated automatically appearance choices data set. can contain column observed choices. column required model fitting prediction. must contain columns values alternative specific covariate alternative decider specific covariate.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"example","dir":"Articles","previous_headings":"Requirements","what":"Example","title":"Choice data","text":"train_choice data set contains 2929 stated choices 235 Dutch individuals deciding two virtual train trip options based price, travel time, level comfort, number changes. fulfills requirements: row represents one choice occasion, columns id choiceid identify deciders choice occasions, respectively. column choice gives observed choices. Four alternative-specific covariates available, namely price, time, change, comfort. values given alternative.3","code":"str(train_choice) #> 'data.frame':    2929 obs. of  11 variables: #>  $ deciderID : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ occasionID: int  1 2 3 4 5 6 7 8 9 10 ... #>  $ choice    : chr  \"A\" \"A\" \"A\" \"B\" ... #>  $ price_A   : num  52.9 52.9 52.9 88.1 52.9 ... #>  $ time_A    : num  2.5 2.5 1.92 2.17 2.5 ... #>  $ change_A  : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ comfort_A : int  1 1 1 1 1 0 1 1 0 1 ... #>  $ price_B   : num  88.1 70.5 88.1 70.5 70.5 ... #>  $ time_B    : num  2.5 2.17 1.92 2.5 2.5 ... #>  $ change_B  : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ comfort_B : int  1 1 0 0 0 0 1 0 1 0 ..."},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"the-model-formula","dir":"Articles","previous_headings":"","what":"The model formula","title":"Choice data","text":"inform RprobitB covariates want include model via specifying formula. Say want model utility Un,t,jU_{n,t,j} decider nn choice occasion tt alternative jj via linear equation Un,t,j=,t,jβ1+Bn,tβ2,j+Cn,t,jβ3,j+ϵn,tj.U_{n,t,j} = A_{n,t,j} \\beta_1 + B_{n,t} \\beta_{2,j} + C_{n,t,j} \\beta_{3,j} + \\epsilon_{n,tj}. , AA CC alternative choice situation specific covariates, whereas BB choice situation specific. coefficient β1\\beta_1 generic (.e. alternative), whereas β2,j\\beta_{2,j} β3,j\\beta_{3,j} alternative specific. represent structure, formula object form (analogously mlogit) choice ~ | B | C, choice dependent variable (discrete choice aim explain), alternative choice situation specific covariates generic coefficient (call covariates type 1), B choice situation specific covariates alternative specific coefficients (call covariates type 2), C alternative choice situation specific covariates alternative specific coefficients (call covariates type 3). Specifying formula object RprobitB must consistent following rules: default, alternative specific constants (ASCs)4 added model. can removed adding + 0 second spot, e.g. choice ~ | B + 0 | C. exclude covariates backmost categories, use either 0, e.g. choice ~ | B | 0 just leave part write choice ~ | B. However, exclude covariates front categories, use 0, e.g. choice ~ 0 | B. include one covariate category, use +, e.g. choice ~ A1 + A2 | B. don’t want include covariates second category want estimate alternative specific constants, add 1 second spot, e.g. choice ~ | 1. expression choice ~ | 0 interpreted covariates second category alternative specific constants. impose random effects specific variables, need define character vector re corresponding variable names. random effects alternative specific constants, include \"ASC\" re.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"example-1","dir":"Articles","previous_headings":"The model formula","what":"Example","title":"Choice data","text":"specify model formula train_choice data set. Say want include covariates price, time, comfort, change, alternative specific (, contain potentially different value alternative, different prices B), either type 1 type 3. difference type 1 type 3 former case, estimate generic coefficient (.e. coefficient constant across alternatives), whereas latter case, estimate alternative specific coefficients. Deciding type 1 type 3 covariates belongs topic model selection, provide separate vignette. now, go type 1 covariates remove ASCs: Additionally, specify random effects price time (typically expect heterogeneity ):","code":"form <- choice ~ price + time + comfort + change | 0 re <- c(\"price\", \"time\")"},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"the-prepare_data-function","dir":"Articles","previous_headings":"","what":"The prepare_data() function","title":"Choice data","text":"model estimation RprobitB, empirical choice data set choice_data must pass prepare_data() function: function performs compatibility checks data transformations returns object class RprobitB_data can fed estimation routine fit_model(). following arguments optional: re: character vector variable names form random effects. re = NULL per default, .e. random effects. alternatives: may want consider alternatives choice_data. case, can specify character vector alternatives selected names alternatives. specified, choice set defined observed choices. id: character (single string), name column choice_data contains unique identifier decision maker. default \"id\". idc: character, name column choice_data contains unique identifier choice situation given decision maker. Per default, identifier generated appearance choices data set. standardize: character vector variable names form get standardized. Covariates type 1 3 addressed <covariate>_<alternative>. standardize = \"\", covariates get standardized. Per default, covariate standardized. impute: Specifies handle missing entries (NA, NaN, -Inf, Inf) choice_data. following options available: \"complete_cases\", removes rows containing missing entries (default), \"zero\", replaces missing entries zero, \"mean\", imputes missing entries covariate mean.","code":"data <- prepare_data(form = form, choice_data = choice_data)"},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"example-2","dir":"Articles","previous_headings":"The prepare_data() function","what":"Example","title":"Choice data","text":"Let’s prepare train_choice data set estimation previous specification form re: summary plot methods provide quick data overview:","code":"data <- prepare_data(   form = form, choice_data = train_choice, re = re,    id = \"deciderID\", idc = \"occasionID\" ) summary(data) #>                  count #> deciders           235 #> choice occasions  5-19 #> total choices     2929 #> alternatives         2 #> - 'A'             1474 #> - 'B'             1455 plot(data)"},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"ordered-alternatives","dir":"Articles","previous_headings":"","what":"Ordered alternatives","title":"Choice data","text":"two choice alternatives train trip example unordered. asked “rate train trip 1 (horrible) 7 (great)”, respondents choose set ordered alternatives. ordered alternatives can analyzed setting ordered = TRUE prepare_data. case, alternatives becomes mandatory argument, alternatives must named worst best.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"ranked-choices","dir":"Articles","previous_headings":"","what":"Ranked choices","title":"Choice data","text":"Rather recording single preferred alternative, surveys ask full ranking alternatives, reveals far underlying preferences. Ranked choices can analyzed setting ranked = TRUE prepare_data(). choice column data set must provide full ranking choice occasion (preferred least preferred), alternatives separated commas. ranked probit model follows directly basic multivariate case. difference take flexible utility differences differenced utility vector always negative. Thereby, incorporate information full ranking.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"simulate-choices","dir":"Articles","previous_headings":"","what":"Simulate choices","title":"Choice data","text":"simulate_choices function simulates discrete choice data prespecified probit model. Say want simulate choices N deciders T choice occasions5 among J alternatives model formulation form, call function simulate_choices() following optional arguments: re: character vector variable names form random effects. alternatives: character vector length J names choice alternatives. specified, alternatives labeled first J upper-case letters Roman alphabet. covariates: named list covariate values. element must vector length equal number choice occasions named according covariate, follow naming convention alternative specific covariates, .e. <covariate>_<alternative>. Covariates values specified drawn standard normal distribution. standardize: character vector variable names form get standardized. can specify true parameters6 adding named list values alpha, fixed coefficient vector, C, number (greater equal 1) latent classes decision makers, s, vector class weights, b, matrix class means columns, Omega, matrix class covariance matrices columns, Sigma, differenced error term covariance matrix, Sigma_full, full error term covariance matrix, beta, matrix decision-maker specific coefficient vectors, z, class allocation vector, d, vector logarithmic threshold increments ordered probit case. True parameters specified set random.","code":"data <- simulate_choices(form = form, N = N, T = T, J = J)"},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"example-3","dir":"Articles","previous_headings":"Simulate choices","what":"Example","title":"Choice data","text":"illustration, simulate choices N = 100 deciders T = 10 choice occasions alternatives B: RprobitB provides function overview_effects() can used get overview effects parameters can specified: Hence, coefficient vector alpha must length 3, elements 1 3 correspond var1, var3_A, var3_B, respectively. matrix b must dimension 2 x C, (default) C = 1 row 1 2 correspond var2_A ASC_A, respectively. can visualize covariates grouped chosen alternatives:  see consistent specification: Higher values var1_A example correspond frequently choice B (upper-right panel), coefficient var1 (first value alpha) negative.","code":"N <- 100 T <- 10 alternatives <- c(\"A\", \"B\") base <- \"B\" form <- choice ~ var1 | var2 | var3 re <- c(\"ASC\", \"var2\") overview_effects(form = form, re = re, alternatives = alternatives, base = base) #>   effect as_value as_coef random #> 1   var1     TRUE   FALSE  FALSE #> 2 var3_A     TRUE    TRUE  FALSE #> 3 var3_B     TRUE    TRUE  FALSE #> 4 var2_A    FALSE    TRUE   TRUE #> 5  ASC_A    FALSE    TRUE   TRUE set.seed(1) data <- simulate_choices(   form = form,   N = N,   T = T,   J = 2,   re = re,   alternatives = alternatives,   true_parameter = list(     alpha = c(-1, 0, 1),     b = matrix(c(2, -0.5), ncol = 1)   ) ) summary(data) #>                  count #> deciders           100 #> choice occasions    10 #> total choices     1000 #> alternatives         2 #> - 'A'              452 #> - 'B'              548 plot(data, by_choice = TRUE)"},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"train-and-test-data-set","dir":"Articles","previous_headings":"","what":"Train and test data set","title":"Choice data","text":"function train_test() can used split output prepare_data() simulate_choices() train test subset. useful evaluating prediction performance fitted model. example, following code puts 70% deciders simulated data train subsample 30% deciders test subsample: Alternatively, following code puts 2 randomly chosen choice occasions per decider data test subsample, rest goes train subsample:","code":"train_test(data, test_proportion = 0.3, by = \"N\") #> $train #> Simulated data of 700 choices. #>  #> $test #> Simulated data of 300 choices. train_test(data, test_number = 2, by = \"T\", random = TRUE) #> $train #> Simulated data of 800 choices. #>  #> $test #> Simulated data of 200 choices."},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/articles/v03_model_fitting.html","id":"bayes-estimation-of-the-probit-model","dir":"Articles","previous_headings":"","what":"Bayes estimation of the probit model","title":"Model fitting","text":"Bayes estimation probit model builds upon work McCulloch Rossi (1994), Nobile (1998), Allenby Rossi (1998), Imai Dyk (2005). key ingredient concept data augmentation, see Albert Chib (1993): idea treat latent utilities UU model equation U=Xβ+ϵU = X\\beta + \\epsilon additional parameters. , conditional UU, probit model constitutes standard Bayesian linear regression set-. posterior distribution can approximated iteratively drawing updating model parameter conditional parameters (-called Gibbs sampling approach). priori, assume following (conjugate) parameter distributions: (s1,…,sC)∼DC(δ)(s_1,\\dots,s_C)\\sim D_C(\\delta), DC(δ)D_C(\\delta) denotes CC-dimensional Dirichlet distribution concentration parameter vector δ=(δ1,…,δC)\\delta = (\\delta_1,\\dots,\\delta_C), α∼MVNPf(μα0,Σα0)\\alpha\\sim \\text{MVN}_{P_f}(\\mu_{\\alpha_0},\\Sigma_{\\alpha_0}), MVNPf\\text{MVN}_{P_f} denotes PfP_f-dimensional normal distribution mean μα0\\mu_{\\alpha_0} covariance Σα0\\Sigma_{\\alpha_0}, bc∼MVNPr(μb0,Σb0)b_c \\sim \\text{MVN}_{P_r}(\\mu_{b_0}, \\Sigma_{b_0}), independent cc, Ωc∼WPr−1(nΩ0,VΩ0)\\Omega_c \\sim W^{-1}_{P_r}(n_{\\Omega_0}, V_{\\Omega_0}), independent cc, WPr−1(nΩ0,VΩ0)W^{-1}_{P_r}(n_{\\Omega_0}, V_{\\Omega_0}) denotes PrP_r-dimensional inverse Wishart distribution nΩ0n_{\\Omega_0} degrees freedom scale matrix VΩ0V_{\\Omega_0}, Σ∼WJ−1−1(nΣ0,VΣ0)\\Sigma \\sim W^{-1}_{J-1}(n_{\\Sigma_0}, V_{\\Sigma_0}). prior distributions imply following conditional posterior distributions: class weights drawn Dirichlet distribution (s1,…,sC)∣δ,z∼DC(δ1+m1,…,δC+mC),\\begin{equation} (s_1,\\dots,s_C)\\mid \\delta,z \\sim D_C(\\delta_1+m_1,\\dots,\\delta_C+m_C), \\end{equation} c=1,…,Cc=1,\\dots,C, mc=#{n:zn=c}m_c=\\#\\{n:z_n=c\\} denotes current absolute class size.2 Independently nn, update allocation variables (zn)n(z_n)_n conditional distribution Prob(zn=c∣s,β,b,Ω)=scϕPr(βn∣bc,Ωc)∑cscϕPr(βn∣bc,Ωc).\\begin{equation} \\text{Prob}(z_n=c\\mid s,\\beta,b,\\Omega )=\\frac{s_c\\phi_{P_r}(\\beta_n\\mid b_c,\\Omega_c)}{\\sum_c s_c\\phi_{P_r}(\\beta_n\\mid b_c,\\Omega_c)}. \\end{equation} class means (bc)c(b_c)_c updated independently cc via bc∣Σb0,Ω,μb0,z,β∼MVNPr(μbc,Σbc),\\begin{equation} b_c\\mid \\Sigma_{b_0},\\Omega,\\mu_{b_0},z,\\beta \\sim\\text{MVN}_{P_r}\\left( \\mu_{b_c}, \\Sigma_{b_c}  \\right), \\end{equation} μbc=(Σb0−1+mcΩc−1)−1(Σb0−1μb0+mcΩc−1b‾c)\\mu_{b_c}=(\\Sigma_{b_0}^{-1}+m_c\\Omega_c^{-1})^{-1}(\\Sigma_{b_0}^{-1}\\mu_{b_0} +m_c\\Omega_c^{-1}\\bar{b}_c), Σbc=(Σb0−1+mcΩc−1)−1\\Sigma_{b_c}=(\\Sigma_{b_0}^{-1}+m_c\\Omega_c^{-1})^{-1}, b‾c=mc−1∑n:zn=cβn\\bar{b}_c=m_c^{-1}\\sum_{n:z_n=c} \\beta_n. class covariance matrices (Ωc)c(\\Omega_c)_c updated independently cc via Ωc∣nΩ0,VΩ0,z,β,b∼WPr−1(μΩc,ΣΩc),\\begin{equation} \\Omega_c \\mid n_{\\Omega_0},V_{\\Omega_0},z,\\beta,b \\sim W^{-1}_{P_r}(\\mu_{\\Omega_c},\\Sigma_{\\Omega_c}), \\end{equation} μΩc=nΩ0+mc\\mu_{\\Omega_c}=n_{\\Omega_0} + m_c ΣΩc=VΩ0−1+∑n:zn=c(βn−bc)(βn−bc)′\\Sigma_{\\Omega_c}=V_{\\Omega_0}^{-1} + \\sum_{n:z_n=c} (\\beta_n-b_c)(\\beta_n-b_c)'. Independently nn tt conditionally components, utility vectors (Unt:)(U_{nt:}) follow J−1J-1-dimensional truncated multivariate normal distribution, truncation points determined choices ynty_{nt}. sample truncated multivariate normal distribution, apply sub-Gibbs sampler, following approach Geweke (1998): Untj∣Unt(−j),ynt,Σ,W,α,X,β∼𝒩(μUntj,ΣUntj)⋅{1(Untj>max(Unt(−j),0))ifynt=j1(Untj<max(Unt(−j),0))ifynt≠j,\\begin{equation} U_{ntj} \\mid U_{nt(-j)},y_{nt},\\Sigma,W,\\alpha,X,\\beta  \\sim \\mathcal{N}(\\mu_{U_{ntj}},\\Sigma_{U_{ntj}}) \\cdot \\begin{cases} 1(U_{ntj}>\\max(U_{nt(-j)},0) ) & \\text{}~ y_{nt}=j\\\\ 1(U_{ntj}<\\max(U_{nt(-j)},0) ) & \\text{}~ y_{nt}\\neq j \\end{cases}, \\end{equation} Unt(−j)U_{nt(-j)} denotes vector (Unt:)(U_{nt:}) without element UntjU_{ntj}, 𝒩\\mathcal{N} denotes univariate normal distribution, ΣUntj=1/(Σ−1)jj\\Sigma_{U_{ntj}} = 1/(\\Sigma^{-1})_{jj} μUntj=Wntj′α+Xntj′βn−ΣUntj(Σ−1)j(−j)(Unt(−j)−Wnt(−j)′α−Xnt(−j)′βn),\\begin{equation} \\mu_{U_{ntj}} = W_{ntj}'\\alpha + X_{ntj}'\\beta_n - \\Sigma_{U_{ntj}} (\\Sigma^{-1})_{j(-j)}   (U_{nt(-j)} - W_{nt(-j)}'\\alpha - X_{nt(-j)}' \\beta_n ), \\end{equation} (Σ−1)jj(\\Sigma^{-1})_{jj} denotes (j,j)(j,j)th element Σ−1\\Sigma^{-1}, (Σ−1)j(−j)(\\Sigma^{-1})_{j(-j)} jjth row without jjth entry, Wnt(−j)W_{nt(-j)} Xnt(−j)X_{nt(-j)} coefficient matrices WntW_{nt} XntX_{nt}, respectively, without jjth column. Updating fixed coefficient vector α\\alpha achieved applying formula Bayesian linear regression regressors WntW_{nt} regressands (Unt:)−Xnt′βn(U_{nt:})-X_{nt}'\\beta_n, .e. α∣Σα0,μα0,W,Σ,U,X,β∼MVNPf(μα,Σα),\\begin{equation} \\alpha \\mid \\Sigma_{\\alpha_0},\\mu_{\\alpha_0},W,\\Sigma,U,X,\\beta \\sim \\text{MVN}_{P_f}(\\mu_\\alpha,\\Sigma_\\alpha), \\end{equation} μα=Σα(Σα0−1μα0+∑n=1,t=1N,TWntΣ−1((Unt:)−Xnt′βn))\\mu_\\alpha = \\Sigma_\\alpha (\\Sigma_{\\alpha_0}^{-1}\\mu_{\\alpha_0} + \\sum_{n=1,t=1}^{N,T} W_{nt} \\Sigma^{-1} ((U_{nt:})-X_{nt}'\\beta_n) ) Σα=(Σα0−1+∑n=1,t=1N,TWntΣ−1Wnt′)−1\\Sigma_\\alpha = (\\Sigma_{\\alpha_0}^{-1} + \\sum_{n=1,t=1}^{N,T} W_{nt}\\Sigma^{-1} W_{nt}^{'} )^{-1}. Analogously α\\alpha, random coefficients (βn)n(\\beta_n)_n updated independently via βn∣Ω,b,X,Σ,U,W,α∼MVNPr(μβn,Σβn),\\begin{equation} \\beta_n \\mid \\Omega,b,X,\\Sigma,U,W,\\alpha \\sim \\text{MVN}_{P_r}(\\mu_{\\beta_n},\\Sigma_{\\beta_n}), \\end{equation} μβn=Σβn(Ωzn−1bzn+∑t=1TXntΣ−1(Unt:−Wnt′α))\\mu_{\\beta_n} = \\Sigma_{\\beta_n} (\\Omega_{z_n}^{-1}b_{z_n} + \\sum_{t=1}^{T} X_{nt} \\Sigma^{-1} (U_{nt:}-W_{nt}'\\alpha) ) Σβn=(Ωzn−1+∑t=1TXntΣ−1Xnt′)−1\\Sigma_{\\beta_n} = (\\Omega_{z_n}^{-1} + \\sum_{t=1}^{T} X_{nt}\\Sigma^{-1} X_{nt}^{'} )^{-1} . error term covariance matrix Σ\\Sigma updated means $$\\begin{equation} \\Sigma \\mid n_{\\Sigma_0}, V_{\\Sigma_0}, U, W, \\alpha, X, \\beta \\sim W^{-1}_{J-1}(n_{\\Sigma_0} + NT, V_{\\Sigma_0} + S), \\\\ \\end{equation}$$ S=∑n=1,t=1N,Tεntεnt′S = \\sum_{n=1,t=1}^{N,T} \\varepsilon_{nt} \\varepsilon_{nt}' εnt=(Unt:)−Wnt′α−Xnt′βn\\varepsilon_{nt} = (U_{nt:}) - W_{nt}'\\alpha - X_{nt}'\\beta_n.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v03_model_fitting.html","id":"parameter-normalization","dir":"Articles","previous_headings":"Bayes estimation of the probit model","what":"Parameter normalization","title":"Model fitting","text":"Samples obtained updating scheme described lack identification (except ss zz draws), compare vignette model definition. Therefore, subsequent sampling, following normalizations required iith updates iterations ii: α()⋅ω()\\alpha^{()} \\cdot \\omega^{()}, bc()⋅ω()b_c^{()} \\cdot \\omega^{()}, c=1,…,Cc=1,\\dots,C, Unt()⋅ω()U_{nt}^{()} \\cdot \\omega^{()}, n=1,…,Nn = 1,\\dots,N, t=1,…,Tt = 1,\\dots,T, βn()⋅ω()\\beta_n^{()} \\cdot \\omega^{()}, n=1,…,Nn = 1,\\dots,N, Ωc()⋅(ω())2\\Omega_c^{()} \\cdot (\\omega^{()})^2, c=1,…,Cc=1,\\dots,C, Σ()⋅(ω())2\\Sigma^{()} \\cdot (\\omega^{()})^2, either ω()=const/(Σ())jj\\omega^{()} = \\sqrt{\\text{const} / (\\Sigma^{()})_{jj}} (Σ())jj(\\Sigma^{()})_{jj} jjth diagonal element Σ()\\Sigma^{()}, 1≤j≤J−11\\leq j \\leq J-1, alternatively ω()=const/αp()\\omega^{()} = \\text{const} / \\alpha^{()}_p coordinate 1≤p≤Pf1\\leq p \\leq P_f iith draw coefficient vector α\\alpha. , const\\text{const} positive constant (typically 1). preferences flipped ω()<0\\omega^{()} < 0, case αp()<0\\alpha^{()}_p < 0.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v03_model_fitting.html","id":"burn-in-and-thinning","dir":"Articles","previous_headings":"Bayes estimation of the probit model","what":"Burn-in and thinning","title":"Model fitting","text":"theory behind Gibbs sampling constitutes sequence samples produced updating scheme Markov chain stationary distribution equal desired joint posterior distribution. takes certain number iterations stationary distribution approximated reasonably well. Therefore, common practice discard first BB RR samples (-called burn-period). Furthermore, correlation nearby samples expected. order obtain independent samples, consider every QQth sample computing Gibbs sample statistics like expectation standard deviation. independence samples can verified computing serial correlation convergence Gibbs sampler can checked considering trace plots, see .","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v03_model_fitting.html","id":"the-fit_model-function","dir":"Articles","previous_headings":"","what":"The fit_model() function","title":"Model fitting","text":"Gibbs sampling scheme described can executed applying function data must RprobitB_data object (see vignette choice data). function following optional arguments: scale: character determines utility scale. form \"<parameter> := <value>\", <parameter> either name fixed effect Sigma_<j>,<j> <j>th diagonal element Sigma, <value> value fixed parameter (.e. const\\text{const} introduced ). Per default scale = \"Sigma\\_1,1 := 1\", .e. first error-term variance fixed 1. R: number iterations Gibbs sampler. default R = 10000. B: length burn-period, .e. non-negative number samples discarded. default B = R/2. Q: thinning factor Gibbs samples, .e. every Qth sample kept. default Q = 1. print_progress: boolean, determining whether print Gibbs sampler progress. prior: named list parameters prior distributions (default values documented check_prior() function): mu_alpha_0: mean vector length P_f normal prior alpha. Sigma_alpha_0: covariance matrix dimension P_f x P_f normal prior alpha. delta: concentration parameter length 1 Dirichlet prior s. mu_b_0: mean vector length P_r normal prior b_c. Sigma_b_0: covariance matrix dimension P_r x P_r normal prior b_c. n_Omega_0: degrees freedom (natural number greater P_r) Inverse Wishart prior Omega_c. V_Omega_0: scale matrix dimension P_r x P_r Inverse Wishart prior Omega_c. n_Sigma_0: degrees freedom (natural number greater J - 1) Inverse Wishart prior Sigma. V_Sigma_0: scale matrix dimension J-1 x J-1 Inverse Wishart prior Sigma. latent_classes: list parameters specifying number updating scheme latent classes, see vignette modeling heterogeneity fitting.","code":"fit_model(data = data)"},{"path":"https://loelschlaeger.de/RprobitB/articles/v03_model_fitting.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Model fitting","text":"previous vignette choice data, introduced train_choice data set contains 2922 choices two fictional train route alternatives. following lines fit probit model explains chosen trip alternatives (choice) price, time, number changes, level comfort (lower value higher comfort). normalization, first linear coefficient, price, fixed -1, allows interpret coefficients monetary values: estimated coefficients (using mean Gibbs samples point estimate) can printed via results indicate deciders value one hour travel time 25€, additional change 5€, comfortable class 14€.3","code":"set.seed(1) form <- choice ~ price + time + change + comfort | 0 data <- prepare_data(form = form, choice_data = train_choice, id = \"deciderID\", idc = \"occasionID\") model_train <- fit_model(   data = data,   scale = \"price := -1\" ) coef(model_train) #>            Estimate   (sd) #> 1   price     -1.00 (0.00) #> 2    time    -25.81 (2.18) #> 3  change     -4.88 (0.88) #> 4 comfort    -14.49 (0.94)"},{"path":"https://loelschlaeger.de/RprobitB/articles/v03_model_fitting.html","id":"checking-the-gibbs-samples","dir":"Articles","previous_headings":"","what":"Checking the Gibbs samples","title":"Model fitting","text":"Gibbs samples saved list form RprobitB_fit object entry \"gibbs_samples\", .e. object contains 2 elements: gibbs_samples_raw list raw samples Gibbs sampler, gibbs_samples_nbt Gibbs samples used parameter estimates, .e. normalized thinned Gibbs samples burn-. Calling summary function estimated RprobitB_fit object yields additional information Gibbs samples gibbs_samples_nbt. can specify list FUN functions compute point estimate Gibbs samples4, example mean arithmetic mean, mode_approx (approximated) conditional posterior mode, stats::sd standard deviation, R_hat Gelman-Rubin statistic (Gelman Rubin 1992) 5, custom statistics like absolute difference median mean. Calling plot method additional argument type = \"trace\" plots trace Gibbs samples gibbs_samples_nbt:  Additionally, can visualize serial correlation Gibbs samples via argument type = \"acf\". boxes top-right corner state total sample size TSS (R - B = 10000 - 5000 = 5000), effective sample size ESS, factor TSS larger ESS.  , effective sample size value TSS/(1+∑k≥1ρk)\\text{TSS} / (1 + \\sum_{k\\geq 1} \\rho_k), ρk\\rho_k auto correlation chain offset kk positions. auto correlations estimated via stats::acf() function.","code":"str(model_train$gibbs_samples, max.level = 2, give.attr = FALSE) #> List of 2 #>  $ gibbs_samples_raw:List of 2 #>   ..$ alpha: num [1:1000, 1:4] -0.000713 -0.023068 -0.030523 -0.034482 -0.036309 ... #>   ..$ Sigma: num [1:1000, 1] 1.09 1.11 1.04 1.06 1.01 ... #>  $ gibbs_samples_nbt:List of 2 #>   ..$ alpha: num [1:500, 1:4] -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 ... #>   ..$ Sigma: num [1:500, 1] 687 696 605 686 677 ... summary(model_train,   FUN = c(     \"mean\" = mean,     \"mode\" = mode_approx,     \"sd\" = stats::sd,     \"R^\" = R_hat,     \"custom_stat\" = function(x) abs(mean(x) - median(x))   ) ) #> Probit model #> Formula: choice ~ price + time + change + comfort | 0  #> R: 1000, B: 500, Q: 1 #> Level: Utility differences with respect to alternative 'B'. #> Scale: Coefficient of effect 'price' (alpha_1) fixed to -1. #>  #> Gibbs sample statistics #>                mean         mode           sd           R^  custom_stat #>  alpha #>                                                                         #>      1        -1.00        -1.00         0.00         1.00         0.00 #>      2       -25.81       -25.59         2.18         1.00         0.06 #>      3        -4.88        -5.16         0.88         1.00         0.04 #>      4       -14.49       -14.54         0.94         1.00         0.02 #>  #>  Sigma #>                                                                         #>    1,1       657.41       632.46        67.16         1.01         4.07 par(mfrow = c(2, 1)) plot(model_train, type = \"trace\") par(mfrow = c(2, 3)) plot(model_train, type = \"acf\")"},{"path":"https://loelschlaeger.de/RprobitB/articles/v03_model_fitting.html","id":"model-transformation-after-estimation","dir":"Articles","previous_headings":"","what":"Model transformation after estimation","title":"Model fitting","text":"transform method can used transform RprobitB_fit object three ways: change length B burn-period, example change thinning factor Q Gibbs samples, example change model normalization scale, example","code":"model_train <- transform(model_train, B = 1) model_train <- transform(model_train, Q = 100) model_train <- transform(model_train, scale = \"Sigma_1 := 1\")"},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/articles/v04_modeling_heterogeneity.html","id":"estimating-a-joint-normal-mixing-distribution","dir":"Articles","previous_headings":"","what":"Estimating a joint normal mixing distribution","title":"Modeling heterogeneity","text":"mlogit package (Croissant 2020) contains data set Electricity, residential electricity customers asked decide four hypothetical electricity suppliers. suppliers differed 6 characteristics: fixed price pf per kWh, contract length cf, indicator loc whether supplier local company, indicator wk whether supplier well known company, indicator tod whether supplier offers time--day electricity price (higher day lower night), indicator seas whether supplier’s price seasonal dependent. constitutes choice situation choice behaviour heterogeneity expected: customers might prefer time--day electricity price (may home day), others can opposite preference. Ideally differences preferences modelled using characteristics deciders. many cases (data set) adequate information. Instead differences taste can captured means mixing distribution tod coefficient. corresponds assumption random coefficient underlying mixing distribution drawn decider. can use estimated mixing distribution determine example share deciders positive versus negative preference towards time--day electricity prices. Additionally, expect correlations random coefficients certain covariates, example positive correlation influence loc wk: deciders prefer local suppliers might also prefer well known companies due recommendations past experiences, although might expensive unknown suppliers. fitted multivariate normal distribution reveal correlations. following lines prepare Electricity data set estimation. use convenience function as_cov_names() relabels data columns alternative specific covariates required format “<covariate>_<alternative>”, compare vignette choice data. Via re argument, specify want model random effects price coefficient, fix -1 interpret estimates monetary values. Calling coef() method estimated model also returns estimated (marginal) variances mixing distribution besides average mean effects: sign estimates can example deduce, existence time--day electricity price tod contract negative effect. However, deciders heterogeneous , estimated variance coefficient large. holds contract length cl. particular, estimated share population prefers longer contract length equals: correlation covariates can accessed follows:2 , see confirmation initial assumption high correlation loc wk. pairwise mixing distributions can visualized via calling plot() method additional argument type = mixture:","code":"data(\"Electricity\", package = \"mlogit\") Electricity <- as_cov_names(   Electricity, c(\"pf\", \"cl\", \"loc\", \"wk\", \"tod\", \"seas\"), 1:4 ) data <- prepare_data(   form = choice ~ pf + cl + loc + wk + tod + seas | 0,   choice_data = Electricity,   re = c(\"cl\", \"loc\", \"wk\", \"tod\", \"seas\") ) model_elec <- fit_model(data, scale = \"pf := -1\", R = 1000) coef(model_elec) #>         Estimate   (sd) Variance   (sd) #> 1   pf     -1.00 (0.00)       NA   (NA) #> 2   cl     -0.26 (0.03)     0.30 (0.04) #> 3  loc      2.82 (0.21)     7.03 (0.93) #> 4   wk      2.05 (0.14)     3.83 (0.63) #> 5  tod     -9.83 (0.20)    11.67 (1.33) #> 6 seas     -9.92 (0.18)     6.20 (0.93) cl_mu <- coef(model_elec)[\"cl\", \"mean\"] cl_sd <- sqrt(coef(model_elec)[\"cl\", \"var\"]) pnorm(cl_mu / cl_sd) #> [1] 0.317279 cov_mix(model_elec, cor = TRUE) #>               cl         loc          wk         tod         seas #> cl    1.00000000 0.077721396  0.04462012 -0.03169023 -0.122791071 #> loc   0.07772140 1.000000000  0.79003728  0.09679206  0.003348363 #> wk    0.04462012 0.790037276  1.00000000  0.09449239 -0.034341537 #> tod  -0.03169023 0.096792064  0.09449239  1.00000000  0.518190666 #> seas -0.12279107 0.003348363 -0.03434154  0.51819067  1.000000000 plot(model_elec, type = \"mixture\")"},{"path":"https://loelschlaeger.de/RprobitB/articles/v04_modeling_heterogeneity.html","id":"estimating-latent-classes","dir":"Articles","previous_headings":"","what":"Estimating latent classes","title":"Modeling heterogeneity","text":"generally, RprobitB allows specify Gaussian mixture mixing distribution. particular, β∼∑c=1CMVN(bc,Ωc). \\beta \\sim \\sum_{c=1}^C \\text{MVN} (b_c,\\Omega_c). specification allows ) better approximation true underlying mixing distribution b) preference based classification deciders. estimate latent mixture, specify named list latent_classes following arguments submit estimation routine fit_model: C, fixed number (greater equal 1) latent classes, set 1 per default, 3 weight_update, boolean, set TRUE weight-based update latent classes, see , dp_update, boolean, set TRUE Dirichlet process-based update latent classes, see , Cmax, maximum number latent classes, set 10 per default.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v04_modeling_heterogeneity.html","id":"weight-based-update-of-the-latent-classes","dir":"Articles","previous_headings":"Estimating latent classes","what":"Weight-based update of the latent classes","title":"Modeling heterogeneity","text":"following weight-based updating scheme analogue Bauer, Büscher, Batram (2019) executed within burn-period: remove class cc, sc<εmins_c<\\varepsilon_{\\text{min}}, .e. class weight scs_c drops threshold εmin\\varepsilon_{\\text{min}}. case indicates class cc negligible impact mixing distribution. split class cc two classes c1c_1 c2c_2, sc>εmaxs_c>\\varepsilon_\\text{max}. case indicates class cc high influence mixing distribution whose approximation can potentially improved increasing resolution directions high variance. Therefore, class means bc1b_{c_1} bc2b_{c_2} new classes c1c_1 c2c_2 shifted opposite directions class mean bcb_c old class cc direction highest variance. join two classes c1c_1 c2c_2 one class cc, ∥bc1−bc2∥<δmin\\lVert b_{c_1} - b_{c_2} \\rVert<\\delta_{\\text{min}}, .e. euclidean distance class means bc1b_{c_1} bc2b_{c_2} drops threshold δmin\\delta_{\\text{min}}. case indicates location redundancy repealed. parameters cc assigned adding values ss c1c_1 c2c_2 averaging values bb Ω\\Omega. rules contain choices values εmin\\varepsilon_{\\text{min}}, εmax\\varepsilon_{\\text{max}} δmin\\delta_{\\text{min}}. adequate value δmin\\delta_{\\text{min}} depends scale parameters. Per default, RprobitB sets epsmin = 0.01, epsmax = 0.7, deltamin = 0.1. values can adapted latent_class argument.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v04_modeling_heterogeneity.html","id":"dirichlet-process-based-update-of-the-latent-classes","dir":"Articles","previous_headings":"Estimating latent classes","what":"Dirichlet process-based update of the latent classes","title":"Modeling heterogeneity","text":"alternative weight-based updating scheme determine correct number CC latent classes, RprobitB implements Dirichlet process.4 method allows add mixture components mixing distribution needed better approximation, see Neal (2000) documentation general case. literature offers many representations method, including Chinese Restaurant Process (Aldous 2006), stick-braking metaphor (Sethuraman 1994), Polya Urn model (Blackwell MacQueen 1973). case, face situation find distribution gg explains decider-specific coefficients (βn)n=1,…,N(\\beta_n)_{n = 1,\\dots,N}, gg supposed mixture unknown number CC Gaussian densities, .e. g=∑c=1,…,CscMVN(bc,Ωc)g = \\sum_{c = 1,\\dots,C} s_c \\text{MVN}(b_c, \\Omega_c). Let zn∈{1,…,C}z_n \\\\{1,\\dots,C\\} denote class membership βn\\beta_n. priori, mixture weights (sc)c(s_c)_c given Dirichlet prior concentration parameter δ/C\\delta/C, .e. (sc)c∣δ∼DC(δ/C,…,δ/C)(s_c)_c \\mid \\delta \\sim \\text{D}_C(\\delta/C,\\dots,\\delta/C). Rasmussen (1999) shows Pr((zn)n∣δ)=Γ(δ)Γ(N+δ)∏c=1CΓ(mc+δ/C)Γ(δ/C), \\Pr((z_n)_n\\mid \\delta) = \\frac{\\Gamma(\\delta)}{\\Gamma(N+\\delta)} \\prod_{c=1}^C \\frac{\\Gamma(m_c + \\delta/C)}{\\Gamma(\\delta/C)},  Γ(⋅)\\Gamma(\\cdot) denotes gamma function mc=#{n:zn=c}m_c = \\#\\{n:z_n = c\\} number elements currently allocated class cc. Crucially, last equation independent class weights (sc)c(s_c)_c, yet still depends finite number CC latent classes. However, Li, Schofield, Gönen (2019) shows Pr(zn=c∣z−n,δ)=mc,−n+δ/CN−1+δ, \\Pr(z_n = c \\mid z_{-n}, \\delta) = \\frac{m_{c,-n} + \\delta/C}{N-1+\\delta}, notation −n-n means excluding nnth element. can let CC approach infinity derive: Pr(zn=c∣z−n,δ)→mc,−nN−1+δ. \\Pr(z_n = c \\mid z_{-n}, \\delta) \\\\frac{m_{c,-n}}{N-1+\\delta}. Note allocation probabilities sum 1, instead ∑c=1Cmc,−nN−1+δ=N−1N−1+δ. \\sum_{c = 1}^C \\frac{m_{c,-n}}{N-1+\\delta} = \\frac{N-1}{N-1+\\delta}. difference 1 equals Pr(zn≠zm∀m≠n∣z−n,δ)=δN−1+δ \\Pr(z_n \\neq z_m ~ \\forall ~ m \\neq n \\mid z_{-n}, \\delta) = \\frac{\\delta}{N-1+\\delta} constitutes probability new cluster observation nn created. Neal (2000) points probability proportional prior parameter δ\\delta: greater value δ\\delta encourages creation new clusters, smaller value δ\\delta increases probability allocation already existing class. summary, Dirichlet process updates allocation β\\beta coefficient vector one time, dependent allocations. number clusters can theoretically rise infinity, however, delete unoccupied clusters, CC bounded NN. final step allocation update, update class means bcb_c covariance matrices Ωc\\Omega_c means posterior predictive distribution. mean covariance matrix new generated cluster drawn prior predictive distribution. corresponding formulas given Li, Schofield, Gönen (2019). Dirichlet process directly integrates existing Gibbs sampler. Given β\\beta values, updated class means bcb_c class covariance matrices Ωc\\Omega_c. Dirichlet process updating scheme implemented function update_classes_dp(). following, give small example bivariate case P_r = 2. sample true class means b_true class covariance matrices Omega_true C_true = 3 true latent classes. specify following prior parameters (definition see vignette model fitting): Initially, start C = 1 latent classes. class mean b set zero, covariance matrix Omega identity matrix: following call update_classes_dp() updates latent classes 100 iterations. Note specify arguments Cmax identify_classes. former denotes maximum number latent classes. specification requirement Dirichlet process per se, rather implementation. Knowing maximum possible class number, can allocate required memory space, leads speed improvement. later can verify won’t exceed number Cmax = 10 latent classes point Dirichlet process. Setting identify_classes = TRUE ensures classes ordered weights descending order ensure identifiability. following visualizes true beta values (left) class allocation final iteration (right):","code":"set.seed(1) P_r <- 2 C_true <- 3 N <- c(90, 70, 40) (b_true <- matrix(replicate(C_true, rnorm(P_r)), nrow = P_r, ncol = C_true)) #>            [,1]       [,2]       [,3] #> [1,] -0.6264538 -0.8356286  0.3295078 #> [2,]  0.1836433  1.5952808 -0.8204684 (Omega_true <- matrix(replicate(C_true, oeli::rwishart(P_r + 1, 0.1 * diag(P_r)), simplify = TRUE),   nrow = P_r * P_r, ncol = C_true )) #>           [,1]        [,2]       [,3] #> [1,] 0.3093652  0.14358543  0.2734617 #> [2,] 0.1012729 -0.07444148 -0.1474941 #> [3,] 0.1012729 -0.07444148 -0.1474941 #> [4,] 0.2648235  0.05751780  0.2184029 beta <- c() for (c in 1:C_true) for (n in 1:N[c]) {   beta_n <- oeli::rmvnorm(     mean = b_true[, c],      Sigma = matrix(Omega_true[, c, drop = F], ncol = P_r)   )   beta <- cbind(beta, beta_n) } delta <- 0.1 mu_b_0 <- numeric(P_r) Sigma_b_0 <- diag(P_r) n_Omega_0 <- P_r + 2 V_Omega_0 <- diag(P_r) z <- rep(1, ncol(beta)) C <- 1 b <- matrix(0, nrow = P_r, ncol = C) Omega <- matrix(rep(diag(P_r), C), nrow = P_r * P_r, ncol = C) set.seed(1) R <- 500 C_seq <- numeric(R) for (r in seq_len(R)) {   dp <- update_classes_dp(     beta = beta, z = z, b = b, Omega = Omega,      delta = delta, mu_b_0 = mu_b_0, Sigma_b_0 = Sigma_b_0,      n_Omega_0 = n_Omega_0, V_Omega_0 = V_Omega_0,      identify_classes = TRUE, Cmax = 10   )   z <- dp$z   b <- dp$b   Omega <- dp$Omega   C_seq[r] <- dp$C } table(C_seq) #> C_seq #>   1   2   3   4   5   6  #>  60  59 262 101  16   2 par(mfrow = c(1, 2)) plot(t(beta), xlab = bquote(beta[1]), ylab = bquote(beta[2]), pch = 19) plot_class_allocation(beta, z, b, Omega, r = R, perc = 0.95)"},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/articles/v05_choice_prediction.html","id":"reproducing-the-observed-choices","dir":"Articles","previous_headings":"","what":"Reproducing the observed choices","title":"Choice prediction","text":"RprobitB provides predict() method RprobitB_fit objects. Per default, method returns confusion matrix, gives overview -sample prediction performance: setting argument overview = FALSE, method instead returns predictions level individual choice occasions: Among three incorrect predictions shown , one decider id = 1 choice occasion idc = 8 outstanding. Alternative B chosen although model predicts probability 76% alternative . can use convenience function get_cov() extract characteristics particular choice situation: trip option 20€ cheaper 30 minutes faster, model outweighs better comfort class alternative B, recall estimated effects: misclassification can explained preferences differ average decider (choice behaviour heterogeneity), unobserved factors influenced choice. Indeed, variance error term estimated high: Apart prediction accuracy, model performance can evaluated nuanced terms sensitivity specificity. following snippet exemplary shows visualize measures means receiver operating characteristic (ROC) curve (Fawcett 2006), comparing prediction performance model uses price explanatory variable:  prediction performance model_train better, ROC curve lies .","code":"predict(model_train) #>     predicted #> true    A    B #>    A 1035  439 #>    B  448 1007 pred <- predict(model_train, overview = FALSE) head(pred, n = 10) #>    deciderID occasionID    A    B true predicted correct #> 1          1          1 0.91 0.09    A         A    TRUE #> 2          1          2 0.64 0.36    A         A    TRUE #> 3          1          3 0.79 0.21    A         A    TRUE #> 4          1          4 0.18 0.82    B         B    TRUE #> 5          1          5 0.55 0.45    B         A   FALSE #> 6          1          6 0.13 0.87    B         B    TRUE #> 7          1          7 0.54 0.46    B         A   FALSE #> 8          1          8 0.76 0.24    B         A   FALSE #> 9          1          9 0.55 0.45    A         A    TRUE #> 10         1         10 0.59 0.41    A         A    TRUE get_cov(model_train, id = 1, idc = 8) #>   deciderID occasionID choice  price_A   time_A change_A comfort_A  price_B #> 8         1          8      B 52.88904 1.916667        0         1 70.51872 #>   time_B change_B comfort_B #> 8    2.5        0         0 coef(model_train) #>            Estimate   (sd) #> 1   price     -1.00 (0.00) #> 2    time    -25.94 (2.20) #> 3  change     -4.96 (0.85) #> 4 comfort    -14.50 (0.91) point_estimates(model_train)$Sigma #>          [,1] #> [1,] 660.3985 #> attr(,\"names\") #> [1] \"1,1\" model_train_basic <- update(model_train, form = choice ~ price | 0) plot_roc(model_train, model_train_basic)"},{"path":"https://loelschlaeger.de/RprobitB/articles/v05_choice_prediction.html","id":"forecasting-choice-behavior","dir":"Articles","previous_headings":"","what":"Forecasting choice behavior","title":"Choice prediction","text":"predict() method additional data argument. Per default, data = NULL, results -sample case outlined . Alternatively, data can either RprobitB_data object (example test subsample derived train_test() function, see vignette choice data), data frame custom choice characteristics. demonstrate second case following. Assume train company wants anticipate effect price increase market share. model, increasing ticket price 100€ 110€ (ceteris paribus) draws 15% customers competitor increase prices. However, offering better comfort class compensates higher price even results gain 7% market share:","code":"predict(   model_train,   data = data.frame(     \"price_A\" = c(100, 110),     \"price_B\" = c(100, 100)   ),   overview = FALSE ) #>   deciderID occasionID    A    B prediction #> 1         1          1 0.50 0.50          A #> 2         2          1 0.35 0.65          B predict(   model_train,   data = data.frame(     \"price_A\" = c(100, 110),     \"comfort_A\" = c(1, 0),     \"price_B\" = c(100, 100),     \"comfort_B\" = c(1, 1)   ),   overview = FALSE ) #>   deciderID occasionID    A    B prediction #> 1         1          1 0.50 0.50          A #> 2         2          1 0.57 0.43          A"},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/articles/v06_model_selection.html","id":"the-model_selection-function","dir":"Articles","previous_headings":"","what":"The model_selection() function","title":"Model selection","text":"model_selection() function takes arbitrary number RprobitB_fit objects returns matrix model selection criteria: Specifying criteria model_selection() optional. Per default, criteria = c(\"npar\", \"LL\", \"AIC\", \"BIC\").3 available model selection criteria explained following.","code":"model_selection(model_train, model_train_sparse) #>      model_train model_train_sparse #> npar           4                  1 #> LL      -1727.77           -1865.86 #> AIC      3463.54            3733.72 #> BIC      3487.47            3739.70"},{"path":"https://loelschlaeger.de/RprobitB/articles/v06_model_selection.html","id":"npar","dir":"Articles","previous_headings":"The model_selection() function","what":"npar","title":"Model selection","text":"\"npar\" yields number model parameters, computed npar() method:","code":"npar(model_train, model_train_sparse) #> [1] 4 1"},{"path":"https://loelschlaeger.de/RprobitB/articles/v06_model_selection.html","id":"ll","dir":"Articles","previous_headings":"The model_selection() function","what":"LL","title":"Model selection","text":"\"LL\" included criteria, model_selection() returns model’s log-likelihood values. can also directly accessed via logLik() method:4","code":"logLik(model_train) #> 'log Lik.' -1727.771 (df=4) logLik(model_train_sparse) #> 'log Lik.' -1865.861 (df=1)"},{"path":"https://loelschlaeger.de/RprobitB/articles/v06_model_selection.html","id":"aic","dir":"Articles","previous_headings":"The model_selection() function","what":"AIC","title":"Model selection","text":"Including \"AIC\" yields Akaike’s Information Criterion (Akaike 1974), computed −2⋅LL+k⋅npar,-2 \\cdot \\text{LL} + k \\cdot \\text{npar}, LL\\text{LL} model’s log-likelihood value, kk penalty per parameter k=2k = 2 per default classical AIC, npar\\text{npar} number parameters fitted model. Alternatively, AIC() method also returns AIC values: AIC quantifies trade-- -fitting, smaller values preferred. , increase goodness fit justifies additional 3 parameters model_train.","code":"AIC(model_train, model_train_sparse, k = 2) #>                    df      AIC #> model_train         4 3463.543 #> model_train_sparse  1 3733.722"},{"path":"https://loelschlaeger.de/RprobitB/articles/v06_model_selection.html","id":"bic","dir":"Articles","previous_headings":"The model_selection() function","what":"BIC","title":"Model selection","text":"Similar AIC, \"BIC\" yields Bayesian Information Criterion (Schwarz 1978), defined −2⋅LL+log(nobs)⋅npar,-2 \\cdot \\text{LL} + \\log{(\\text{nobs})} \\cdot \\text{npar}, LL\\text{LL} model’s log-likelihood value, nobs\\text{nobs} number data points (can accessed via nobs() method), npar\\text{npar} number parameters fitted model. interpretation analogue AIC. RprobitB also provides method BIC value:","code":"BIC(model_train, model_train_sparse) #>                    df      BIC #> model_train         4 3487.472 #> model_train_sparse  1 3739.704"},{"path":"https://loelschlaeger.de/RprobitB/articles/v06_model_selection.html","id":"waic-with-sewaic-and-pwaic","dir":"Articles","previous_headings":"The model_selection() function","what":"WAIC (with se(WAIC) and pWAIC)","title":"Model selection","text":"WAIC short Widely Applicable (Watanabe-Akaike) Information Criterion (Watanabe Opper 2010). AIC BIC, smaller WAIC value better model. Including \"WAIC\" criteria yields WAIC value, standard error se(WAIC), effective number parameters pWAIC, see . WAIC defined −2⋅lppd+2⋅pWAIC,-2  \\cdot \\text{lppd} + 2\\cdot p_\\text{WAIC}, lppd\\text{lppd} stands log pointwise predictive density pWAICp_\\text{WAIC} penalty term proportional variance posterior distribution sometimes called effective number parameters, see McElreath (2020) reference. lppd\\text{lppd} approximated follows. Let psi=Pr(yi∣θs)p_{si} = \\Pr(y_i\\mid \\theta_s) probability observation yiy_i (single choices) given ss-th set θs\\theta_s parameter samples posterior. lppd=∑ilog(S−1∑spsi).\\text{lppd} = \\sum_i \\log \\left( S^{-1} \\sum_s p_{si} \\right). penalty term computed sum variances log-probability observation: pWAIC=∑i𝕍θlog(psi).p_\\text{WAIC} = \\sum_i \\mathbb{V}_{\\theta}  \\log (p_{si}) .  WAIC\\text{WAIC} standard error n⋅𝕍i[−2(lppd−𝕍θlog(psi))],\\sqrt{n \\cdot \\mathbb{V}_i \\left[-2 \\left(\\text{lppd} - \\mathbb{V}_{\\theta}  \\log (p_{si})  \\right)\\right]}, nn number choices. computing WAIC object, probabilities psip_{si} must computed via compute_p_si() function. computation can time consuming. decrease computation time, function offers parallelization via specifying number ncores parallel CPU cores. Afterwards, WAIC can accessed follows:","code":"model_train <- compute_p_si(model_train, ncores = 1) model_train_sparse <- compute_p_si(model_train_sparse, ncores = 1) WAIC(model_train) #> 3463.46 (0.21) WAIC(model_train_sparse) #> 3733.56 (0.06)"},{"path":"https://loelschlaeger.de/RprobitB/articles/v06_model_selection.html","id":"mmll","dir":"Articles","previous_headings":"The model_selection() function","what":"MMLL","title":"Model selection","text":"\"MMLL\" criteria stands marginal model log-likelihood. model’s marginal likelihood Pr(y∣M)\\Pr(y\\mid M) model MM data yy required computation Bayes factors, see . general, term closed form must approximated numerically. RprobitB uses posterior Gibbs samples approximate model’s marginal likelihood via posterior harmonic mean estimator (Newton Raftery 1994): Let SS denote number available posterior samples θ1,…,θS\\theta_1,\\dots,\\theta_S. , Pr(y∣M)=(𝔼posterior1/Pr(y∣θ,M))−1≈(1S∑s1/Pr(y∣θs,M))−1=Pr̃(y∣M).\\Pr(y\\mid M) = \\left(\\mathbb{E}_\\text{posterior} 1/\\Pr(y\\mid \\theta,M) \\right)^{-1} \\approx \\left( \\frac{1}{S} \\sum_s 1/\\Pr(y\\mid \\theta_s,M) \\right) ^{-1} = \\tilde{\\Pr}(y\\mid M). law large numbers, Pr̃(y∣M)→Pr(y∣M)\\tilde{\\Pr}(y\\mid M) \\\\Pr(y\\mid M) almost surely S→∞S \\\\infty. WAIC, computing MMLL relies probabilities psi=Pr(yi∣θs)p_{si} = \\Pr(y_i\\mid \\theta_s), must first computed via compute_p_si() function. Afterwards, mml() function can called RprobitB_fit object input. function returns RprobitB_fit object, marginal likelihood value saved entry \"mml\" marginal log-likelihood value attribute \"mmll\": two options improving approximation: WAIC, can use posterior samples. Alternatively, can combine posterior harmonic mean estimate prior arithmetic mean estimator (Hammersley Handscomb 1964): approach, SS samples θ1,…,θS\\theta_1,\\dots,\\theta_S drawn model’s prior distribution. , Pr(y∣M)=𝔼priorPr(y∣θ,M)≈1S∑sPr(y∣θs,M)=Pr̃(y∣M).\\Pr(y\\mid M) = \\mathbb{E}_\\text{prior} \\Pr(y\\mid \\theta,M) \\approx \\frac{1}{S} \\sum_s \\Pr(y\\mid \\theta_s,M) = \\tilde{\\Pr}(y\\mid M). , holds law large numbers, Pr̃(y∣M)→Pr(y∣M)\\tilde{\\Pr}(y\\mid M) \\\\Pr(y\\mid M) almost surely S→∞S \\\\infty. final approximation model’s marginal likelihood weighted sum posterior harmonic mean estimate prior arithmetic mean estimate, weights determined sample sizes. use prior arithmetic mean estimator, call mml() function specification number prior draws S set recompute = TRUE. Note prior arithmetic mean estimator works well prior posterior distribution similar shape strong overlap, Gronau et al. (2017) points . Otherwise, sampled prior values result likelihood value close zero, thereby contributing marginally approximation. case, large number S prior samples required.","code":"model_train <- mml(model_train) attr(model_train$mml, \"mmll\") #> [1] -1731.584"},{"path":"https://loelschlaeger.de/RprobitB/articles/v06_model_selection.html","id":"bf","dir":"Articles","previous_headings":"The model_selection() function","what":"BF","title":"Model selection","text":"Bayes factor index relative posterior model plausibility one model another (Marin Robert 2014). Given data 𝚢\\texttt{y} two models 𝚖𝚘𝚍𝟶\\texttt{mod0} 𝚖𝚘𝚍𝟷\\texttt{mod1}, defined BF(𝚖𝚘𝚍𝟶,𝚖𝚘𝚍𝟷)=Pr(𝚖𝚘𝚍𝟶∣𝚢)Pr(𝚖𝚘𝚍𝟷∣𝚢)=Pr(𝚢∣𝚖𝚘𝚍𝟶)Pr(𝚢∣𝚖𝚘𝚍𝟷)/Pr(𝚖𝚘𝚍𝟶)Pr(𝚖𝚘𝚍𝟷). BF(\\texttt{mod0},\\texttt{mod1}) = \\frac{\\Pr(\\texttt{mod0} \\mid \\texttt{y})}{\\Pr(\\texttt{mod1} \\mid \\texttt{y})} = \\frac{\\Pr(\\texttt{y} \\mid \\texttt{mod0} )}{\\Pr(\\texttt{y} \\mid \\texttt{mod1})} / \\frac{\\Pr(\\texttt{mod0})}{\\Pr(\\texttt{mod1})}. ratio Pr(𝚖𝚘𝚍𝟶)/Pr(𝚖𝚘𝚍𝟷)\\Pr(\\texttt{mod0}) / \\Pr(\\texttt{mod1}) expresses factor 𝚖𝚘𝚍𝟶\\texttt{mod0} priori assumed correct model. Per default, RprobitB sets Pr(𝚖𝚘𝚍𝟶)=Pr(𝚖𝚘𝚍𝟷)=0.5\\Pr(\\texttt{mod0}) = \\Pr(\\texttt{mod1}) = 0.5. front part Pr(𝚢∣𝚖𝚘𝚍𝟶)/Pr(𝚢∣𝚖𝚘𝚍𝟷)\\Pr(\\texttt{y} \\mid \\texttt{mod0} ) / \\Pr(\\texttt{y} \\mid \\texttt{mod1}) ratio marginal model likelihoods. value BF(𝚖𝚘𝚍𝟶,𝚖𝚘𝚍𝟷)>1BF(\\texttt{mod0},\\texttt{mod1}) > 1 means model 𝚖𝚘𝚍𝟶\\texttt{mod0} strongly supported data consideration 𝚖𝚘𝚍𝟷\\texttt{mod1}. Adding \"BF\" criteria argument model_selection yields Bayes factors. find decisive evidence (Jeffreys 1998) favour model_train.","code":"model_selection(model_train, model_train_sparse, criteria = \"BF\") #>                          model_train model_train_sparse #> BF(*,model_train)                  1             < 0.01 #> BF(*,model_train_sparse)       > 100                  1"},{"path":"https://loelschlaeger.de/RprobitB/articles/v06_model_selection.html","id":"pred_acc","dir":"Articles","previous_headings":"The model_selection() function","what":"pred_acc","title":"Model selection","text":"Finally, adding \"pred_acc\" criteria argument model_selection() function returns share correctly predicted choices. output model_selection() (alternatively one following) deduce model_train correctly predicts 6% choices model_train_sparse:5","code":"pred_acc(model_train, model_train_sparse) #> [1] 0.6944350 0.6340048"},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lennart Oelschläger. Author, maintainer. Dietmar Bauer. Contributor.","code":""},{"path":"https://loelschlaeger.de/RprobitB/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Oelschläger L (2025). RprobitB: Bayesian Probit Choice Modeling. R package version 1.2.0, https://loelschlaeger.de/RprobitB/.","code":"@Manual{,   title = {RprobitB: Bayesian Probit Choice Modeling},   author = {Lennart Oelschläger},   year = {2025},   note = {R package version 1.2.0},   url = {https://loelschlaeger.de/RprobitB/}, }"},{"path":"https://loelschlaeger.de/RprobitB/index.html","id":"rprobitb-","dir":"","previous_headings":"","what":"Probit models for discrete choice data","title":"Probit models for discrete choice data","text":"RprobitB R package modeling explaining choices among discrete alternatives. package name portmanteau, combining R (programming language), probit (model class) B (Bayesian, estimation method). package documented several vignettes, see .","code":""},{"path":"https://loelschlaeger.de/RprobitB/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Probit models for discrete choice data","text":"can install released version RprobitB CRAN : Next, load via:","code":"install.packages(\"RprobitB\") library(\"RprobitB\") #> Thanks for using {RprobitB} version 1.2.0, happy choice modeling! #> Documentation: https://loelschlaeger.de/RprobitB"},{"path":"https://loelschlaeger.de/RprobitB/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Probit models for discrete choice data","text":"analyze data set 2929 stated choices 235 Dutch individuals deciding two virtual train trip options based price, travel time, level comfort, number changes. following lines fit probit model explains chosen trip alternatives (choice) price, time, number changes, level comfort (lower value higher comfort). normalization, price coefficient fixed -1, allows interpret coefficients monetary values:  summary method provides summary statistics Gibbs samples: estimated effects obtained Gibbs sample means can visualized via:  results indicate deciders value one hour travel time 25€, additional change 5€, comfortable class 15€. Now assume train company wants anticipate effect price increase market share. model, increasing ticket price 100€ 110€ (ceteris paribus) draws 15% customers competitor increase prices: However, offering better comfort class (0 better 1) compensates higher price even results gain 7% market share:","code":"form <- choice ~ price + time + change + comfort | 0 data <- prepare_data(form, train_choice, id = \"deciderID\", idc = \"occasionID\") plot(data, by_choice = TRUE) model <- fit_model(data, scale = \"price := -1\") FUN <- c(\"mean\" = mean, \"mode\" = mode_approx, \"sd\" = stats::sd, \"R^\" = R_hat) summary(model, FUN = FUN) #> Probit model #> Formula: choice ~ price + time + change + comfort | 0  #> R: 1000, B: 500, Q: 1 #> Level: Utility differences with respect to alternative 'B'. #> Scale: Coefficient of effect 'price' (alpha_1) fixed to -1. #>  #> Gibbs sample statistics #>           mean    mode      sd      R^ #>  alpha #>                                        #>      1   -1.00   -1.00    0.00    1.00 #>      2  -25.84  -25.86    2.18    1.00 #>      3   -4.96   -4.85    0.81    1.00 #>      4  -14.36  -14.64    0.89    1.00 #>  #>  Sigma #>                                        #>    1,1  648.51  622.88   63.32    1.00 coef(model) |> plot() new_prices <- data.frame(   \"price_A\" = c(100, 110), \"price_B\" = c(100, 100) ) predict(model, data = new_prices, overview = FALSE) #>   deciderID occasionID    A    B prediction #> 1         1          1 0.50 0.50          A #> 2         2          1 0.35 0.65          B new_comfort <- data.frame(   \"price_A\" = c(100, 110), \"comfort_A\" = c(1, 0),   \"price_B\" = c(100, 100), \"comfort_B\" = c(1, 1) ) predict(model, data = new_comfort, overview = FALSE) #>   deciderID occasionID    A    B prediction #> 1         1          1 0.50 0.50          A #> 2         2          1 0.57 0.43          A"},{"path":"https://loelschlaeger.de/RprobitB/reference/R_hat.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Gelman-Rubin statistic — R_hat","title":"Compute Gelman-Rubin statistic — R_hat","text":"function computes Gelman-Rubin statistic R_hat.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/R_hat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Gelman-Rubin statistic — R_hat","text":"","code":"R_hat(samples, parts = 2)"},{"path":"https://loelschlaeger.de/RprobitB/reference/R_hat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Gelman-Rubin statistic — R_hat","text":"samples [numeric() | matrix] Samples Markov chain. matrix, column gives samples separate chain. parts [integer(1)] number parts divide chain sub-chains.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/R_hat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Gelman-Rubin statistic — R_hat","text":"Gelman-Rubin statistic.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/R_hat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Gelman-Rubin statistic — R_hat","text":"NA values samples ignored. degenerate case indicated NA. Gelman-Rubin statistic bounded 1 . Values close 1 indicate reasonable convergence.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/R_hat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Gelman-Rubin statistic — R_hat","text":"","code":"no_chains <- 2 length_chains <- 1e3 samples <- matrix(NA_real_, length_chains, no_chains) samples[1, ] <- 1 Gamma <- matrix(c(0.8, 0.1, 0.2, 0.9), 2, 2) for (c in 1:no_chains) {   for (t in 2:length_chains) {     samples[t, c] <- sample(1:2, 1, prob = Gamma[samples[t - 1, c], ])   } } R_hat(samples) #> [1] 1.001126"},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB-package.html","id":null,"dir":"Reference","previous_headings":"","what":"RprobitB: Bayesian Probit Choice Modeling — RprobitB-package","title":"RprobitB: Bayesian Probit Choice Modeling — RprobitB-package","text":"Bayes estimation probit choice models cross-sectional panel settings. package can analyze binary, multivariate, ordered, ranked choices, well heterogeneity choice behavior among deciders. main functionality includes model fitting via Gibbs sampling, tools convergence diagnostic, choice data simulation, -sample --sample choice prediction, model selection using information criteria Bayes factors. latent class model extension facilitates preference-based decider classification, number latent classes can inferred via Dirichlet process weight-based updating heuristic. allows flexible modeling choice behavior without need impose structural constraints. reference method, see Oelschlaeger Bauer (2021) https://trid.trb.org/view/1759753.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"RprobitB: Bayesian Probit Choice Modeling — RprobitB-package","text":"Maintainer: Lennart Oelschläger oelschlaeger.lennart@gmail.com (ORCID) contributors: Dietmar Bauer dietmar.bauer@uni-bielefeld.de (ORCID) [contributor]","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create object of class RprobitB_data — RprobitB_data","title":"Create object of class RprobitB_data — RprobitB_data","text":"function constructs object class RprobitB_data.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create object of class RprobitB_data — RprobitB_data","text":"","code":"RprobitB_data(   data,   choice_data,   N,   T,   J,   P_f,   P_r,   alternatives,   ordered,   ranked,   base,   form,   re,   ASC,   effects,   standardize,   simulated,   choice_available,   true_parameter,   res_var_names )  # S3 method for class 'RprobitB_data' print(x, ...)  # S3 method for class 'RprobitB_data' summary(object, ...)  # S3 method for class 'summary.RprobitB_data' print(x, ...)  # S3 method for class 'RprobitB_data' plot(x, by_choice = FALSE, alpha = 1, position = \"dodge\", ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create object of class RprobitB_data — RprobitB_data","text":"data [list] list choice data. list N elements. element list two elements, X y, covariates decisions decision maker. precisely: X list T elements, element matrix dimension Jx(P_f+P_r) contains characteristics one choice occasion. y vector length T contains labels chosen alternatives. choice_data [data.frame] Choice data wide format, row represents one choice occasion. N [integer(1)] number decision makers. T [integer(1) | integer(N)] number choice occasions vector decider-specific choice occasions length N. J [integer(1)] number >= 2 choice alternatives. P_f [integer(1)] number covariates connected fixed coefficient. P_r [integer(2)] number covariates connected random coefficient. alternatives [character()] names choice alternatives. specified, choice set defined observed choices. ordered = TRUE, alternatives assumed specified alternatives ordered worst best. ordered [logical(1)] TRUE, choice set alternatives assumed ordered worst best. ranked [logical(1)] alternatives ranked? base [character(1)] name base alternative covariates alternative specific (.e. type 2 covariates ASCs). Ignored set NULL model alternative specific covariates (e.g. ordered probit model). default, base last element alternatives. form [formula] model description structure choice ~ | B | C, choice name dependent variable (choices), names alternative choice situation specific covariates coefficient constant across alternatives, B names choice situation specific covariates alternative specific coefficients, C names alternative choice situation specific covariates alternative specific coefficients. Multiple covariates (one type) separated + sign. default, alternative specific constants (ASCs) added model. can removed adding +0 second spot. ordered probit model (ordered = TRUE), formula object simple structure choice ~ . ASCs estimated. re [character() | NULL] Names covariates random effects. re = NULL (default), random effects. random effects ASCs, include \"ASC\" re. ASC [logical(1)] model ASCs? effects [data.frame] data frame effect names booleans indicating whether connected random effects. standardize [character() | \"\"] Names covariates get standardized. Covariates type 1 3 addressed <covariate>_<alternative>. standardize = \"\", covariates get standardized. simulated [logical(1)] data simulated? choice_available [logical(1)] data contain observed choices? true_parameter [RprobitB_parameters] True parameters data generating process. res_var_names [list] Reserved variable names choice_data. x object class RprobitB_data. ... Currently used. by_choice [logical(1)] Group covariates chosen alternatives? alpha, position Passed ggplot.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create object of class RprobitB_data — RprobitB_data","text":"object class RprobitB_data.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create object of class RprobitB_data — RprobitB_data","text":"","code":"data <- simulate_choices(   form = choice ~ cost | 0,   N = 100,   T = 10,   J = 2,   alternatives = c(\"bus\", \"car\"),   true_parameter = list(\"alpha\" = -1) ) plot(data, by_choice = TRUE)"},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Create object of class RprobitB_fit — RprobitB_fit","title":"Create object of class RprobitB_fit — RprobitB_fit","text":"function creates object class RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create object of class RprobitB_fit — RprobitB_fit","text":"","code":"RprobitB_fit(   data,   scale,   level,   normalization,   R,   B,   Q,   latent_classes,   prior,   gibbs_samples,   class_sequence,   comp_time )  # S3 method for class 'RprobitB_fit' print(x, ...)  # S3 method for class 'RprobitB_fit' summary(object, FUN = c(mean = mean, sd = stats::sd, `R^` = R_hat), ...)  # S3 method for class 'summary.RprobitB_fit' print(x, digits = 2, ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create object of class RprobitB_fit — RprobitB_fit","text":"data object class RprobitB_data. scale [character(1)] character determines utility scale. form <parameter> := <value>, <parameter> either name fixed effect Sigma_<j>,<j> <j>th diagonal element Sigma, <value> value fixed parameter. normalization object class RprobitB_normalization. R [integer(1)] number iterations Gibbs sampler. B [integer(1)] length burn-period. Q [integer(1)] thinning factor Gibbs samples. latent_classes [list() | NULL] Optionally parameters specifying number latent classes updating scheme. values brackets default. C (1): fixed number (greater equal 1) (initial) classes. wb_update (FALSE): Set TRUE weight-based class updates. dp_update (FALSE): Set TRUE Dirichlet process class updates. Cmax (10): maximum number latent classes. following specifications used weight-based updating scheme: buffer (50): number iterations wait next update. epsmin (0.01): threshold weight removing latent class. epsmax (0.7): threshold weight splitting latent class. deltamin (0.1): minimum mean distance merging two classes. deltashift (0.5): scale shifting class means split. prior [list] named list parameters prior distributions. See documentation check_prior details parameters can specified. gibbs_samples object class RprobitB_gibbs_samples. class_sequence sequence class numbers Gibbs sampling length R. comp_time time spent Gibbs sampling.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create object of class RprobitB_fit — RprobitB_fit","text":"object class RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_gibbs_samples_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Create object of class RprobitB_gibbs_samples_statistics — RprobitB_gibbs_samples_statistics","title":"Create object of class RprobitB_gibbs_samples_statistics — RprobitB_gibbs_samples_statistics","text":"function creates object class RprobitB_gibbs_samples_statistics.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_gibbs_samples_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create object of class RprobitB_gibbs_samples_statistics — RprobitB_gibbs_samples_statistics","text":"","code":"RprobitB_gibbs_samples_statistics(gibbs_samples, FUN = list(mean = mean))  # S3 method for class 'RprobitB_gibbs_samples_statistics' print(x, true = NULL, digits = 2, ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_gibbs_samples_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create object of class RprobitB_gibbs_samples_statistics — RprobitB_gibbs_samples_statistics","text":"gibbs_samples object class RprobitB_gibbs_samples, generally located object gibbs_samples RprobitB_model object. FUN (preferably named) list functions compute parameter statistics Gibbs samples, example mean mean, sd standard deviation, min minimum, max maximum, median median, function(x) quantile(x, p) pth quantile, R_hat Gelman-Rubin statistic. true Either NULL object class RprobitB_parameter.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_gibbs_samples_statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create object of class RprobitB_gibbs_samples_statistics — RprobitB_gibbs_samples_statistics","text":"object class RprobitB_gibbs_samples_statistics, list statistics gibbs_samples obtained applying elements FUN.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_latent_classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Create object of class RprobitB_latent_classes — RprobitB_latent_classes","title":"Create object of class RprobitB_latent_classes — RprobitB_latent_classes","text":"function creates object class RprobitB_latent_classes defines number latent classes updating scheme.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_latent_classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create object of class RprobitB_latent_classes — RprobitB_latent_classes","text":"","code":"RprobitB_latent_classes(latent_classes = NULL)  # S3 method for class 'RprobitB_latent_classes' print(x, ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_latent_classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create object of class RprobitB_latent_classes — RprobitB_latent_classes","text":"latent_classes [list() | NULL] Optionally parameters specifying number latent classes updating scheme. values brackets default. C (1): fixed number (greater equal 1) (initial) classes. wb_update (FALSE): Set TRUE weight-based class updates. dp_update (FALSE): Set TRUE Dirichlet process class updates. Cmax (10): maximum number latent classes. following specifications used weight-based updating scheme: buffer (50): number iterations wait next update. epsmin (0.01): threshold weight removing latent class. epsmax (0.7): threshold weight splitting latent class. deltamin (0.1): minimum mean distance merging two classes. deltashift (0.5): scale shifting class means split. x object class RprobitB_latent_classes. ... Currently used.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_latent_classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create object of class RprobitB_latent_classes — RprobitB_latent_classes","text":"object class RprobitB_latent_classes.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_normalization.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility normalization — RprobitB_normalization","title":"Utility normalization — RprobitB_normalization","text":"function creates object class RprobitB_normalization, defines utility scale level.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_normalization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility normalization — RprobitB_normalization","text":"","code":"RprobitB_normalization(   level,   scale = \"Sigma_1,1 := 1\",   form,   re = NULL,   alternatives,   base,   ordered = FALSE )  # S3 method for class 'RprobitB_normalization' print(x, ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_normalization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility normalization — RprobitB_normalization","text":"level [character(1)] alternative name respect utility differences computed. Currently, differences respect last alternative supported. scale [character(1)] character determines utility scale. form <parameter> := <value>, <parameter> either name fixed effect Sigma_<j>,<j> <j>th diagonal element Sigma, <value> value fixed parameter. form [formula] model description structure choice ~ | B | C, choice name dependent variable (choices), names alternative choice situation specific covariates coefficient constant across alternatives, B names choice situation specific covariates alternative specific coefficients, C names alternative choice situation specific covariates alternative specific coefficients. Multiple covariates (one type) separated + sign. default, alternative specific constants (ASCs) added model. can removed adding +0 second spot. ordered probit model (ordered = TRUE), formula object simple structure choice ~ . ASCs estimated. re [character() | NULL] Names covariates random effects. re = NULL (default), random effects. random effects ASCs, include \"ASC\" re. alternatives [character()] names choice alternatives. specified, choice set defined observed choices. ordered = TRUE, alternatives assumed specified alternatives ordered worst best. base [character(1)] name base alternative covariates alternative specific (.e. type 2 covariates ASCs). Ignored set NULL model alternative specific covariates (e.g. ordered probit model). default, base last element alternatives. ordered [logical(1)] TRUE, choice set alternatives assumed ordered worst best. x object class RprobitB_normalization. ... Currently used.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_normalization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility normalization — RprobitB_normalization","text":"object class RprobitB_normalization, list level, list elements level (number alternative specified input level) name (name alternative, .e. input level), alternatively NA ordered probit case, scale, list elements parameter (either \"s\" element Sigma \"\" element alpha), parameter index, fixed value. parameter = \"\", also name fixed effect.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_normalization.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utility normalization — RprobitB_normalization","text":"Utility models require normalization respect level scale. level normalization, {RprobitB} takes utility differences respect one alternative. ordered model one utility modelled, {RprobitB} fixes first utility threshold 0. scale normalization, {RprobitB} fixes one model parameter. Per default, first error-term variance fixed 1. specified via scale = \"Sigma_1,1 := 1\". Alternatively, error-term variance non-random coefficient can fixed.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Define probit model parameter — RprobitB_parameter","title":"Define probit model parameter — RprobitB_parameter","text":"function creates object class RprobitB_parameter, contains parameters probit model. sample = TRUE, missing parameters sampled. parameters checked values P_f, P_r, J, N. Note parameters automatically ordered respect non-ascending s class identifiability.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define probit model parameter — RprobitB_parameter","text":"","code":"RprobitB_parameter(   P_f,   P_r,   J,   N,   C = 1,   ordered = FALSE,   alpha = NULL,   s = NULL,   b = NULL,   Omega = NULL,   Sigma = NULL,   Sigma_full = NULL,   beta = NULL,   z = NULL,   d = NULL,   sample = TRUE )  # S3 method for class 'RprobitB_parameter' print(x, ..., digits = 4)"},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define probit model parameter — RprobitB_parameter","text":"P_f [integer(1)] number covariates connected fixed coefficient. P_r [integer(2)] number covariates connected random coefficient. J [integer(1)] number >= 2 choice alternatives. N [integer(1)] number decision makers. C [integer(1)] number (greater equal 1) latent classes decision makers. ordered [logical(1)] TRUE, choice set alternatives assumed ordered worst best. alpha [numeric(P_f)] fixed coefficient vector. s [numeric(C)] vector class weights. b [matrix(nrow = P_r, ncol = C)] matrix class means columns. Omega [matrix(nrow = P_r * P_r, ncol = C)] matrix vectorized class covariance matrices columns. Sigma [matrix(nrow = J - 1, ncol = J - 1) | numeric(1)] differenced (wrt. alternative J) error covariance matrix. case ordered = TRUE, single error variance. Sigma_full [matrix(nrow = J, ncol = J)] error covariance matrix. Ignored Sigma specified ordered = TRUE. Internally, Sigma_full gets differenced wrt.  alternative J. beta [matrix(nrow = P_r, ncol = N)] matrix decider-specific coefficient vectors. z [numeric(N)] decider class allocations. d [numeric(J - 2)] logarithmic increases utility thresholds ordered probit case (ordered = TRUE). sample [logical(1)] Sample missing parameters? x RprobitB_parameter object. ... [character()] Names parameters printed. specified, parameters printed. digits [integer(1)] number decimal places.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define probit model parameter — RprobitB_parameter","text":"object class RprobitB_parameter, named list model parameters.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_parameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define probit model parameter — RprobitB_parameter","text":"","code":"RprobitB_parameter(P_f = 1, P_r = 2, J = 3, N = 10, C = 2) #> alpha : -0.9 #>  #> C : 2 #>  #> s : double vector of length 2  #> 0.76 0.24 #>  #> b : 2 x 2 matrix of doubles  #>      [,1] [,2] #> [1,] -0.8  1.3 #> [2,]  3.0 -2.5 #>  #>  #> Omega : 4 x 2 matrix of doubles  #>      [,1]  [,2] #> [1,] 1.15  1.26 #> [2,] 0.06 -0.21 #> [3,] 0.06 -0.21 #> [4,]  1.2  1.98 #>  #>  #> Sigma : 2 x 2 matrix of doubles  #>      [,1] [,2] #> [1,] 2.80 1.42 #> [2,] 1.42 2.36 #>  #>  #> Sigma_full : 3 x 3 matrix of doubles  #>      [,1] [,2] [,3] #> [1,] 1.77 0.36 0.06 #> [2,] 0.36 1.27 0.03 #> [3,] 0.06 0.03 1.14 #>  #>  #> beta : 2 x 10 matrix of doubles  #>       [,1]  [,2] [,3] ... [,10] #> [1,]  1.56  0.01 0.06 ...  2.68 #> [2,] -3.14 -3.16 1.98 ...  -2.9 #>  #>  #> z : double vector of length 10  #> 2 2 1 ... 2 #>  #> d : NA #>"},{"path":"https://loelschlaeger.de/RprobitB/reference/WAIC.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute WAIC value — WAIC","title":"Compute WAIC value — WAIC","text":"function computes WAIC value RprobitB_fit object.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/WAIC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute WAIC value — WAIC","text":"","code":"WAIC(x)  # S3 method for class 'RprobitB_waic' print(x, digits = 2, ...)  # S3 method for class 'RprobitB_waic' plot(x, ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/WAIC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute WAIC value — WAIC","text":"x object class RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/WAIC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute WAIC value — WAIC","text":"numeric, WAIC value, following attributes: se_waic, standard error WAIC value, lppd, log pointwise predictive density, p_waic, effective number parameters, p_waic_vec, vector summands p_waic, p_si, output compute_p_si.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/WAIC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute WAIC value — WAIC","text":"WAIC short Widely Applicable (Watanabe-Akaike) Information Criterion. AIC BIC, smaller WAIC value better model. definition $$WAIC = -2 \\cdot lppd + 2 \\cdot  p_{WAIC},$$ \\(lppd\\) stands log pointwise predictive density \\(p_{WAIC}\\) penalty term proportional variance posterior distribution sometimes called effective number parameters. \\(lppd\\) approximated follows. Let $$p_{} = \\Pr(y_i\\mid \\theta_s)$$ probability observation \\(y_i\\) given \\(s\\)th set \\(\\theta_s\\) parameter samples posterior. $$lppd = \\sum_i \\log S^{-1} \\sum_s p_{si}.$$ penalty term computed sum variances log-probability observation: $$p_{WAIC} = \\sum_i V_{\\theta} \\left[ \\log p_{si} \\right].$$","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/as_cov_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-label alternative specific covariates — as_cov_names","title":"Re-label alternative specific covariates — as_cov_names","text":"{RprobitB}, alternative specific covariates must named format \"<covariate>_<alternative>\". helper function generates format given choice_data set.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/as_cov_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-label alternative specific covariates — as_cov_names","text":"","code":"as_cov_names(choice_data, cov, alternatives)"},{"path":"https://loelschlaeger.de/RprobitB/reference/as_cov_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-label alternative specific covariates — as_cov_names","text":"choice_data [data.frame] Choice data wide format, row represents one choice occasion. cov [character()] Names alternative specific covariates choice_data. alternatives [atomic()] alternative names.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/as_cov_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-label alternative specific covariates — as_cov_names","text":"choice_data input updated column names.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/as_cov_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Re-label alternative specific covariates — as_cov_names","text":"","code":"data(\"Electricity\", package = \"mlogit\") cov <- c(\"pf\", \"cl\", \"loc\", \"wk\", \"tod\", \"seas\") alternatives <- 1:4 colnames(Electricity) #>  [1] \"choice\" \"id\"     \"pf1\"    \"pf2\"    \"pf3\"    \"pf4\"    \"cl1\"    \"cl2\"    #>  [9] \"cl3\"    \"cl4\"    \"loc1\"   \"loc2\"   \"loc3\"   \"loc4\"   \"wk1\"    \"wk2\"    #> [17] \"wk3\"    \"wk4\"    \"tod1\"   \"tod2\"   \"tod3\"   \"tod4\"   \"seas1\"  \"seas2\"  #> [25] \"seas3\"  \"seas4\"  Electricity <- as_cov_names(Electricity, cov, alternatives) colnames(Electricity) #>  [1] \"choice\" \"id\"     \"pf_1\"   \"pf_2\"   \"pf_3\"   \"pf_4\"   \"cl_1\"   \"cl_2\"   #>  [9] \"cl_3\"   \"cl_4\"   \"loc_1\"  \"loc_2\"  \"loc_3\"  \"loc_4\"  \"wk_1\"   \"wk_2\"   #> [17] \"wk_3\"   \"wk_4\"   \"tod_1\"  \"tod_2\"  \"tod_3\"  \"tod_4\"  \"seas_1\" \"seas_2\" #> [25] \"seas_3\" \"seas_4\""},{"path":"https://loelschlaeger.de/RprobitB/reference/check_form.html","id":null,"dir":"Reference","previous_headings":"","what":"Check model formula — check_form","title":"Check model formula — check_form","text":"function checks input form.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/check_form.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check model formula — check_form","text":"","code":"check_form(form, re = NULL, ordered = FALSE)"},{"path":"https://loelschlaeger.de/RprobitB/reference/check_form.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check model formula — check_form","text":"form [formula] model description structure choice ~ | B | C, choice name dependent variable (choices), names alternative choice situation specific covariates coefficient constant across alternatives, B names choice situation specific covariates alternative specific coefficients, C names alternative choice situation specific covariates alternative specific coefficients. Multiple covariates (one type) separated + sign. default, alternative specific constants (ASCs) added model. can removed adding +0 second spot. ordered probit model (ordered = TRUE), formula object simple structure choice ~ . ASCs estimated. re [character() | NULL] Names covariates random effects. re = NULL (default), random effects. random effects ASCs, include \"ASC\" re. ordered [logical(1)] TRUE, choice set alternatives assumed ordered worst best.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/check_form.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check model formula — check_form","text":"list contains following elements: input form. name choice dependent variable form. input re. list vars three character vectors covariate names three covariate types. boolean ASC, determining whether model ASCs.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/reference/check_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Check prior parameters — check_prior","title":"Check prior parameters — check_prior","text":"function checks compatibility submitted parameters prior distributions sets missing values default values.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/check_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check prior parameters — check_prior","text":"","code":"check_prior(   P_f,   P_r,   J,   ordered = FALSE,   mu_alpha_0 = numeric(P_f),   Sigma_alpha_0 = 10 * diag(P_f),   delta = 1,   mu_b_0 = numeric(P_r),   Sigma_b_0 = 10 * diag(P_r),   n_Omega_0 = P_r + 2,   V_Omega_0 = diag(P_r),   n_Sigma_0 = J + 1,   V_Sigma_0 = diag(J - 1),   mu_d_0 = numeric(J - 2),   Sigma_d_0 = diag(J - 2) )"},{"path":"https://loelschlaeger.de/RprobitB/reference/check_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check prior parameters — check_prior","text":"P_f [integer(1)] number covariates connected fixed coefficient. P_r [integer(2)] number covariates connected random coefficient. J [integer(1)] number >= 2 choice alternatives. ordered [logical(1)] TRUE, choice set alternatives assumed ordered worst best. mu_alpha_0 [numeric(P_f)] mean vector normal prior alpha. Sigma_alpha_0 [matrix(P_f, P_f)] covariance matrix normal prior alpha. delta [numeric(1)] prior concentration s. mu_b_0 [numeric(P_r)] mean vector normal prior b_c. Sigma_b_0 [matrix(P_r, P_r)] covariance matrix normal prior b_c. n_Omega_0 [integer(1)] degrees freedom Inverse Wishart prior Omega_c. V_Omega_0 [matrix(P_r, P_r)] scale matrix Inverse Wishart prior Omega_c. n_Sigma_0 [integer(1)] degrees freedom Inverse Wishart prior Sigma. V_Sigma_0 [matrix(J - 1, J - 1)] scale matrix Inverse Wishart prior Sigma. mu_d_0 [numeric(J - 2)] mean vector normal prior d . Sigma_d_0 [matrix(J - 2, J - 2)] covariance matrix normal prior d.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/check_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check prior parameters — check_prior","text":"object class RprobitB_prior, list containing prior parameters.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/check_prior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check prior parameters — check_prior","text":"priori-distributions: \\(\\alpha \\sim N(\\mu_{\\alpha_0}, \\Sigma_{\\alpha_0})\\) \\(s \\sim Dir(\\delta)\\) \\(b_c \\sim N(\\mu_{b_0}, \\Sigma_{b_0})\\) \\(c\\) \\(\\Omega_c \\sim IW(n_{\\Omega_0}, V_{\\Omega_0})\\) \\(c\\) \\(\\Sigma \\sim IW(n_{\\Sigma_0}, V_{\\Sigma_0})\\) \\(d \\sim N(\\mu_{d_0}, \\Sigma_{d_0})\\)","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/check_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check prior parameters — check_prior","text":"","code":"check_prior(P_f = 1, P_r = 2, J = 3, ordered = TRUE) #> $mu_alpha_0 #> [1] 0 #>  #> $Sigma_alpha_0 #>      [,1] #> [1,]   10 #>  #> $delta #> [1] 1 #>  #> $mu_b_0 #> [1] 0 0 #>  #> $Sigma_b_0 #>      [,1] [,2] #> [1,]   10    0 #> [2,]    0   10 #>  #> $n_Omega_0 #> [1] 4 #>  #> $V_Omega_0 #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    1 #>  #> $n_Sigma_0 #> [1] NA #>  #> $V_Sigma_0 #> [1] NA #>  #> $mu_d_0 #> [1] 0 #>  #> $Sigma_d_0 #>      [,1] #> [1,]    1 #>  #> attr(,\"class\") #> [1] \"RprobitB_prior\" \"list\""},{"path":"https://loelschlaeger.de/RprobitB/reference/choice_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute choice probabilities — choice_probabilities","title":"Compute choice probabilities — choice_probabilities","text":"function returns choice probabilities RprobitB_fit object.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/choice_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute choice probabilities — choice_probabilities","text":"","code":"choice_probabilities(x, data = NULL, par_set = mean)"},{"path":"https://loelschlaeger.de/RprobitB/reference/choice_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute choice probabilities — choice_probabilities","text":"x object class RprobitB_fit. data Either NULL object class RprobitB_data. former case, choice probabilities computed data used model fitting. Alternatively, new data set can provided. par_set Specifying parameter set calculation either function computes posterior point estimate (default mean()), \"true\" select true parameter set, object class RprobitB_parameter.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/choice_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute choice probabilities — choice_probabilities","text":"data frame choice probabilities choice situations rows alternatives columns. first two columns decider identifier \"id\" choice situation identifier \"idc\".","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/choice_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute choice probabilities — choice_probabilities","text":"","code":"data <- simulate_choices(form = choice ~ covariate, N = 10, T = 10, J = 2) x <- fit_model(data) #> Computing sufficient statistics - 0 of 4   #> Computing sufficient statistics - 1 of 4   #> Computing sufficient statistics - 2 of 4   #> Computing sufficient statistics - 3 of 4   #> Computing sufficient statistics - 4 of 4   #> Gibbs sampler - 1 of 1000 iterations  #> Gibbs sampler - 10 of 1000 iterations  #> Gibbs sampler - 20 of 1000 iterations  #> Gibbs sampler - 30 of 1000 iterations  #> Gibbs sampler - 40 of 1000 iterations  #> Gibbs sampler - 50 of 1000 iterations  #> Gibbs sampler - 60 of 1000 iterations  #> Gibbs sampler - 70 of 1000 iterations  #> Gibbs sampler - 80 of 1000 iterations  #> Gibbs sampler - 90 of 1000 iterations  #> Gibbs sampler - 100 of 1000 iterations  #> Gibbs sampler - 110 of 1000 iterations  #> Gibbs sampler - 120 of 1000 iterations  #> Gibbs sampler - 130 of 1000 iterations  #> Gibbs sampler - 140 of 1000 iterations  #> Gibbs sampler - 150 of 1000 iterations  #> Gibbs sampler - 160 of 1000 iterations  #> Gibbs sampler - 170 of 1000 iterations  #> Gibbs sampler - 180 of 1000 iterations  #> Gibbs sampler - 190 of 1000 iterations  #> Gibbs sampler - 200 of 1000 iterations  #> Gibbs sampler - 210 of 1000 iterations  #> Gibbs sampler - 220 of 1000 iterations  #> Gibbs sampler - 230 of 1000 iterations  #> Gibbs sampler - 240 of 1000 iterations  #> Gibbs sampler - 250 of 1000 iterations  #> Gibbs sampler - 260 of 1000 iterations  #> Gibbs sampler - 270 of 1000 iterations  #> Gibbs sampler - 280 of 1000 iterations  #> Gibbs sampler - 290 of 1000 iterations  #> Gibbs sampler - 300 of 1000 iterations  #> Gibbs sampler - 310 of 1000 iterations  #> Gibbs sampler - 320 of 1000 iterations  #> Gibbs sampler - 330 of 1000 iterations  #> Gibbs sampler - 340 of 1000 iterations  #> Gibbs sampler - 350 of 1000 iterations  #> Gibbs sampler - 360 of 1000 iterations  #> Gibbs sampler - 370 of 1000 iterations  #> Gibbs sampler - 380 of 1000 iterations  #> Gibbs sampler - 390 of 1000 iterations  #> Gibbs sampler - 400 of 1000 iterations  #> Gibbs sampler - 410 of 1000 iterations  #> Gibbs sampler - 420 of 1000 iterations  #> Gibbs sampler - 430 of 1000 iterations  #> Gibbs sampler - 440 of 1000 iterations  #> Gibbs sampler - 450 of 1000 iterations  #> Gibbs sampler - 460 of 1000 iterations  #> Gibbs sampler - 470 of 1000 iterations  #> Gibbs sampler - 480 of 1000 iterations  #> Gibbs sampler - 490 of 1000 iterations  #> Gibbs sampler - 500 of 1000 iterations  #> Gibbs sampler - 510 of 1000 iterations  #> Gibbs sampler - 520 of 1000 iterations  #> Gibbs sampler - 530 of 1000 iterations  #> Gibbs sampler - 540 of 1000 iterations  #> Gibbs sampler - 550 of 1000 iterations  #> Gibbs sampler - 560 of 1000 iterations  #> Gibbs sampler - 570 of 1000 iterations  #> Gibbs sampler - 580 of 1000 iterations  #> Gibbs sampler - 590 of 1000 iterations  #> Gibbs sampler - 600 of 1000 iterations  #> Gibbs sampler - 610 of 1000 iterations  #> Gibbs sampler - 620 of 1000 iterations  #> Gibbs sampler - 630 of 1000 iterations  #> Gibbs sampler - 640 of 1000 iterations  #> Gibbs sampler - 650 of 1000 iterations  #> Gibbs sampler - 660 of 1000 iterations  #> Gibbs sampler - 670 of 1000 iterations  #> Gibbs sampler - 680 of 1000 iterations  #> Gibbs sampler - 690 of 1000 iterations  #> Gibbs sampler - 700 of 1000 iterations  #> Gibbs sampler - 710 of 1000 iterations  #> Gibbs sampler - 720 of 1000 iterations  #> Gibbs sampler - 730 of 1000 iterations  #> Gibbs sampler - 740 of 1000 iterations  #> Gibbs sampler - 750 of 1000 iterations  #> Gibbs sampler - 760 of 1000 iterations  #> Gibbs sampler - 770 of 1000 iterations  #> Gibbs sampler - 780 of 1000 iterations  #> Gibbs sampler - 790 of 1000 iterations  #> Gibbs sampler - 800 of 1000 iterations  #> Gibbs sampler - 810 of 1000 iterations  #> Gibbs sampler - 820 of 1000 iterations  #> Gibbs sampler - 830 of 1000 iterations  #> Gibbs sampler - 840 of 1000 iterations  #> Gibbs sampler - 850 of 1000 iterations  #> Gibbs sampler - 860 of 1000 iterations  #> Gibbs sampler - 870 of 1000 iterations  #> Gibbs sampler - 880 of 1000 iterations  #> Gibbs sampler - 890 of 1000 iterations  #> Gibbs sampler - 900 of 1000 iterations  #> Gibbs sampler - 910 of 1000 iterations  #> Gibbs sampler - 920 of 1000 iterations  #> Gibbs sampler - 930 of 1000 iterations  #> Gibbs sampler - 940 of 1000 iterations  #> Gibbs sampler - 950 of 1000 iterations  #> Gibbs sampler - 960 of 1000 iterations  #> Gibbs sampler - 970 of 1000 iterations  #> Gibbs sampler - 980 of 1000 iterations  #> Gibbs sampler - 990 of 1000 iterations  #> Gibbs sampler - 1000 of 1000 iterations  choice_probabilities(x) #>     id idc            A           B #> 1    1   1 4.932177e-01 0.506782344 #> 2    1   2 9.517899e-01 0.048210140 #> 3    1   3 1.781420e-02 0.982185802 #> 4    1   4 9.737644e-01 0.026235575 #> 5    1   5 2.593394e-01 0.740660593 #> 6    1   6 1.394951e-01 0.860504918 #> 7    1   7 3.249789e-01 0.675021089 #> 8    1   8 7.228659e-01 0.277134143 #> 9    1   9 3.513767e-04 0.999648623 #> 10   1  10 4.797067e-01 0.520293289 #> 11   2   1 3.876312e-01 0.612368800 #> 12   2   2 8.399955e-01 0.160004513 #> 13   2   3 2.713725e-04 0.999728628 #> 14   2   4 1.285106e-01 0.871489416 #> 15   2   5 3.350039e-01 0.664996076 #> 16   2   6 3.720707e-02 0.962792932 #> 17   2   7 5.808553e-02 0.941914469 #> 18   2   8 8.505197e-03 0.991494803 #> 19   2   9 7.033465e-01 0.296653502 #> 20   2  10 1.239741e-01 0.876025855 #> 21   3   1 2.291752e-01 0.770824838 #> 22   3   2 5.344472e-02 0.946555279 #> 23   3   3 1.011996e-02 0.989880042 #> 24   3   4 7.280773e-01 0.271922685 #> 25   3   5 5.646351e-02 0.943536493 #> 26   3   6 5.180008e-02 0.948199915 #> 27   3   7 7.417511e-01 0.258248872 #> 28   3   8 1.382350e-02 0.986176505 #> 29   3   9 5.914428e-02 0.940855724 #> 30   3  10 8.361066e-01 0.163893396 #> 31   4   1 6.026618e-01 0.397338239 #> 32   4   2 3.493744e-02 0.965062562 #> 33   4   3 7.679173e-01 0.232082743 #> 34   4   4 2.145815e-01 0.785418498 #> 35   4   5 1.053219e-02 0.989467806 #> 36   4   6 2.062785e-01 0.793721471 #> 37   4   7 7.120449e-02 0.928795514 #> 38   4   8 2.253851e-01 0.774614880 #> 39   4   9 5.223427e-01 0.477657289 #> 40   4  10 9.134286e-01 0.086571441 #> 41   5   1 5.473963e-02 0.945260372 #> 42   5   2 3.272214e-01 0.672778585 #> 43   5   3 1.218131e-01 0.878186878 #> 44   5   4 8.789859e-02 0.912101413 #> 45   5   5 4.140010e-02 0.958599896 #> 46   5   6 1.876479e-01 0.812352092 #> 47   5   7 1.700860e-01 0.829914023 #> 48   5   8 2.401754e-01 0.759824603 #> 49   5   9 1.093627e-01 0.890637305 #> 50   5  10 1.038872e-01 0.896112795 #> 51   6   1 5.492245e-05 0.999945078 #> 52   6   2 2.333860e-01 0.766613954 #> 53   6   3 5.288959e-01 0.471104114 #> 54   6   4 6.309383e-02 0.936906175 #> 55   6   5 6.007168e-01 0.399283190 #> 56   6   6 8.657904e-01 0.134209572 #> 57   6   7 6.183260e-01 0.381674022 #> 58   6   8 8.375500e-01 0.162450007 #> 59   6   9 2.169853e-01 0.783014714 #> 60   6  10 4.873812e-05 0.999951262 #> 61   7   1 5.966253e-01 0.403374719 #> 62   7   2 1.501737e-04 0.999849826 #> 63   7   3 1.909438e-01 0.809056167 #> 64   7   4 3.998612e-01 0.600138798 #> 65   7   5 1.786103e-02 0.982138969 #> 66   7   6 3.365395e-03 0.996634605 #> 67   7   7 2.041831e-02 0.979581687 #> 68   7   8 3.357516e-01 0.664248405 #> 69   7   9 2.239267e-01 0.776073348 #> 70   7  10 9.976883e-01 0.002311711 #> 71   8   1 1.386012e-01 0.861398788 #> 72   8   2 4.841025e-01 0.515897468 #> 73   8   3 4.039655e-01 0.596034538 #> 74   8   4 1.532953e-01 0.846704731 #> 75   8   5 4.952403e-01 0.504759704 #> 76   8   6 9.841896e-01 0.015810364 #> 77   8   7 3.001694e-01 0.699830618 #> 78   8   8 4.280600e-04 0.999571940 #> 79   8   9 6.825799e-02 0.931742012 #> 80   8  10 5.062417e-01 0.493758274 #> 81   9   1 1.184241e-01 0.881575907 #> 82   9   2 3.123446e-01 0.687655373 #> 83   9   3 8.657735e-01 0.134226520 #> 84   9   4 3.558924e-01 0.644107607 #> 85   9   5 9.478017e-01 0.052198302 #> 86   9   6 8.202939e-01 0.179706098 #> 87   9   7 2.681820e-01 0.731817976 #> 88   9   8 3.595393e-02 0.964046070 #> 89   9   9 9.865736e-01 0.013426377 #> 90   9  10 3.428442e-01 0.657155751 #> 91  10   1 3.049607e-03 0.996950393 #> 92  10   2 8.544151e-02 0.914558493 #> 93  10   3 1.698517e-03 0.998301483 #> 94  10   4 9.860539e-01 0.013946058 #> 95  10   5 8.230816e-01 0.176918428 #> 96  10   6 7.981163e-01 0.201883666 #> 97  10   7 9.212081e-01 0.078791918 #> 98  10   8 2.366363e-05 0.999976336 #> 99  10   9 5.486260e-01 0.451374029 #> 100 10  10 6.423519e-01 0.357648061"},{"path":"https://loelschlaeger.de/RprobitB/reference/classification.html","id":null,"dir":"Reference","previous_headings":"","what":"Preference-based classification of deciders — classification","title":"Preference-based classification of deciders — classification","text":"function classifies deciders based allocation components mixing distribution.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/classification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preference-based classification of deciders — classification","text":"","code":"classification(x, add_true = FALSE)"},{"path":"https://loelschlaeger.de/RprobitB/reference/classification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preference-based classification of deciders — classification","text":"x object class RprobitB_fit. add_true Set TRUE add true class memberships output (available).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/classification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preference-based classification of deciders — classification","text":"data.frame. row names decider identifiers. first C columns contain relative frequencies deciders allocated classes. Next, columnest` contains estimated class decider based highest allocation frequency. add_true = TRUE, next column true contains true class memberships.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/classification.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Preference-based classification of deciders — classification","text":"relative frequencies decider allocated classes Gibbs sampling displayed. thinned samples burn-period considered.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/reference/coef.RprobitB_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract model effects — coef.RprobitB_fit","title":"Extract model effects — coef.RprobitB_fit","text":"function extracts estimated model effects.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/coef.RprobitB_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract model effects — coef.RprobitB_fit","text":"","code":"# S3 method for class 'RprobitB_fit' coef(object, ...)  # S3 method for class 'RprobitB_coef' print(x, ...)  # S3 method for class 'RprobitB_coef' plot(x, sd = 1, het = FALSE, ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/coef.RprobitB_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract model effects — coef.RprobitB_fit","text":"object object class RprobitB_fit. ... Currently used. x object class RprobitB_coef. sd number standard deviations display. het Set FALSE show standard deviation estimate. Set TRUE show standard deviation mixing distribution.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/coef.RprobitB_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract model effects — coef.RprobitB_fit","text":"object class RprobitB_coef.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/compute_choice_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute probit choice probabilities — compute_choice_probabilities","title":"Compute probit choice probabilities — compute_choice_probabilities","text":"helper function choice_probabilities computes probit choice probabilities single choice situation J alternatives.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/compute_choice_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute probit choice probabilities — compute_choice_probabilities","text":"","code":"compute_choice_probabilities(X, alternatives, parameter, ordered = FALSE)"},{"path":"https://loelschlaeger.de/RprobitB/reference/compute_choice_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute probit choice probabilities — compute_choice_probabilities","text":"X matrix covariates J rows P_f + P_r columns, first P_f columns connected fixed coefficients last P_r columns connected random coefficients. alternatives vector unique integers 1 J, indicating alternatives choice probabilities computed. parameter object class RprobitB_parameter. ordered [logical(1)] TRUE, choice set alternatives assumed ordered worst best.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/compute_choice_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute probit choice probabilities — compute_choice_probabilities","text":"probability vector length length(alternatives).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/compute_p_si.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute choice probabilities at posterior samples — compute_p_si","title":"Compute choice probabilities at posterior samples — compute_p_si","text":"function computes probability observed choice (normalized, burned thinned) samples posterior. probabilities required compute WAIC marginal model likelihood mml.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/compute_p_si.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute choice probabilities at posterior samples — compute_p_si","text":"","code":"compute_p_si(x, ncores = parallel::detectCores() - 1, recompute = FALSE)"},{"path":"https://loelschlaeger.de/RprobitB/reference/compute_p_si.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute choice probabilities at posterior samples — compute_p_si","text":"x object class RprobitB_fit. ncores [integer(1)] number cores parallel computation. set 1, parallel backend used. recompute [logical(1)] Recompute probabilities?","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/compute_p_si.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute choice probabilities at posterior samples — compute_p_si","text":"object x, including object p_si, matrix probabilities, observations rows posterior samples columns.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/cov_mix.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract estimated covariance matrix of mixing distribution — cov_mix","title":"Extract estimated covariance matrix of mixing distribution — cov_mix","text":"convenience function returns estimated covariance matrix mixing distribution.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/cov_mix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract estimated covariance matrix of mixing distribution — cov_mix","text":"","code":"cov_mix(x, cor = FALSE)"},{"path":"https://loelschlaeger.de/RprobitB/reference/cov_mix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract estimated covariance matrix of mixing distribution — cov_mix","text":"x object class RprobitB_fit. cor TRUE, returns correlation matrix instead.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/cov_mix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract estimated covariance matrix of mixing distribution — cov_mix","text":"estimated covariance matrix mixing distribution. case multiple classes, list matrices class.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_lagged_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Create lagged choice covariates — create_lagged_cov","title":"Create lagged choice covariates — create_lagged_cov","text":"function creates lagged choice covariates data.frame choice_data, assumed sorted choice occasions.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_lagged_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create lagged choice covariates — create_lagged_cov","text":"","code":"create_lagged_cov(choice_data, column = character(), k = 1, id = \"id\")"},{"path":"https://loelschlaeger.de/RprobitB/reference/create_lagged_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create lagged choice covariates — create_lagged_cov","text":"choice_data [data.frame] Choice data wide format, row represents one choice occasion. column [character()] Covariate names choice_data. k [integer()] number lags (units observations), see details. id [character(1)] name column choice_data contains unique identifier decision maker.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_lagged_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create lagged choice covariates — create_lagged_cov","text":"input choice_data additional columns named column.k element column number k containing lagged covariates.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_lagged_cov.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create lagged choice covariates — create_lagged_cov","text":"Say choice_data contains column column. , function call returns input choice_data includes new column named column.k. column contains decider (based id) choice occasion covariate faced k choice occasions. data point available, set NA. particular, first k values column.k NA (initial condition problem).","code":"create_lagged_cov(choice_data, column, k, id)"},{"path":"https://loelschlaeger.de/RprobitB/reference/create_lagged_cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create lagged choice covariates — create_lagged_cov","text":"","code":"choice_data <- data.frame(id = rep(1:2, each = 3), cov = LETTERS[1:6]) create_lagged_cov(choice_data, column = \"cov\", k = 1:2) #>   id cov cov.1 cov.2 #> 1  1   A  <NA>  <NA> #> 2  1   B     A  <NA> #> 3  1   C     B     A #> 4  2   D  <NA>  <NA> #> 5  2   E     D  <NA> #> 6  2   F     E     D"},{"path":"https://loelschlaeger.de/RprobitB/reference/d_to_gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform increments to thresholds — d_to_gamma","title":"Transform increments to thresholds — d_to_gamma","text":"Transform increments thresholds","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/d_to_gamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform increments to thresholds — d_to_gamma","text":"","code":"d_to_gamma(d)"},{"path":"https://loelschlaeger.de/RprobitB/reference/d_to_gamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform increments to thresholds — d_to_gamma","text":"d [numeric(J - 2)] Threshold increments.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/d_to_gamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform increments to thresholds — d_to_gamma","text":"threshold vector length J + 1.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/d_to_gamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform increments to thresholds — d_to_gamma","text":"","code":"d_to_gamma(c(0, 0, 0)) #>      [,1] #> [1,] -Inf #> [2,]    0 #> [3,]    1 #> [4,]    2 #> [5,]    3 #> [6,]  Inf"},{"path":"https://loelschlaeger.de/RprobitB/reference/draw_from_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from prior distributions — draw_from_prior","title":"Sample from prior distributions — draw_from_prior","text":"function returns sample parameter's prior distribution.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/draw_from_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from prior distributions — draw_from_prior","text":"","code":"draw_from_prior(prior, C = 1)"},{"path":"https://loelschlaeger.de/RprobitB/reference/draw_from_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from prior distributions — draw_from_prior","text":"prior object class RprobitB_prior, output check_prior. C number latent classes.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/draw_from_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from prior distributions — draw_from_prior","text":"list draws alpha, s, b, Omega, Sigma (specified model).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/filter_gibbs_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Gibbs samples — filter_gibbs_samples","title":"Filter Gibbs samples — filter_gibbs_samples","text":"helper function filters Gibbs samples.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/filter_gibbs_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Gibbs samples — filter_gibbs_samples","text":"","code":"filter_gibbs_samples(   x,   P_f,   P_r,   J,   C,   cov_sym,   ordered = FALSE,   keep_par = c(\"s\", \"alpha\", \"b\", \"Omega\", \"Sigma\", \"d\"),   drop_par = NULL )"},{"path":"https://loelschlaeger.de/RprobitB/reference/filter_gibbs_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Gibbs samples — filter_gibbs_samples","text":"x object class RprobitB_gibbs_samples. P_f [integer(1)] number covariates connected fixed coefficient. P_r [integer(2)] number covariates connected random coefficient. J [integer(1)] number >= 2 choice alternatives. cov_sym Set TRUE labels symmetric covariance elements. ordered [logical(1)] TRUE, choice set alternatives assumed ordered worst best. keep_par, drop_par vector parameter names kept dropped.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/filter_gibbs_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Gibbs samples — filter_gibbs_samples","text":"object class RprobitB_gibbs_samples filtered labels parameter_labels.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/fit_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit probit model to choice data — fit_model","title":"Fit probit model to choice data — fit_model","text":"function performs MCMC simulation fitting different types probit models (binary, multivariate, mixed, latent class, ordered, ranked) discrete choice data.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/fit_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit probit model to choice data — fit_model","text":"","code":"fit_model(   data,   scale = \"Sigma_1,1 := 1\",   R = 1000,   B = R/2,   Q = 1,   print_progress = getOption(\"RprobitB_progress\", default = TRUE),   prior = NULL,   latent_classes = NULL,   fixed_parameter = list(),   save_beta_draws = FALSE )"},{"path":"https://loelschlaeger.de/RprobitB/reference/fit_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit probit model to choice data — fit_model","text":"data object class RprobitB_data. scale [character(1)] character determines utility scale. form <parameter> := <value>, <parameter> either name fixed effect Sigma_<j>,<j> <j>th diagonal element Sigma, <value> value fixed parameter. R [integer(1)] number iterations Gibbs sampler. B [integer(1)] length burn-period. Q [integer(1)] thinning factor Gibbs samples. print_progress [logical(1)] Print Gibbs sampler progress? prior [list] named list parameters prior distributions. See documentation check_prior details parameters can specified. latent_classes [list() | NULL] Optionally parameters specifying number latent classes updating scheme. values brackets default. C (1): fixed number (greater equal 1) (initial) classes. wb_update (FALSE): Set TRUE weight-based class updates. dp_update (FALSE): Set TRUE Dirichlet process class updates. Cmax (10): maximum number latent classes. following specifications used weight-based updating scheme: buffer (50): number iterations wait next update. epsmin (0.01): threshold weight removing latent class. epsmax (0.7): threshold weight splitting latent class. deltamin (0.1): minimum mean distance merging two classes. deltashift (0.5): scale shifting class means split. fixed_parameter [list] named list fixed parameter values alpha, C, s, b, Omega, Sigma, Sigma_full, beta, z, d simulation. See vignette model definition definitions variables. save_beta_draws [logical(1)] Save draws decider-specific coefficient vectors? Usually recommended, requires lot storage space.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/fit_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit probit model to choice data — fit_model","text":"object class RprobitB_fit.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/reference/fit_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit probit model to choice data — fit_model","text":"","code":"set.seed(1) form <- choice ~ var | 0 data <- simulate_choices(form = form, N = 100, T = 10, J = 3, re = \"var\") model <- fit_model(data = data, R = 1000) #> Computing sufficient statistics - 0 of 4   #> Computing sufficient statistics - 1 of 4   #> Computing sufficient statistics - 2 of 4   #> Computing sufficient statistics - 3 of 4   #> Computing sufficient statistics - 4 of 4   #> Gibbs sampler - 1 of 1000 iterations  #> Gibbs sampler - 10 of 1000 iterations  #> Gibbs sampler - 20 of 1000 iterations  #> Gibbs sampler - 30 of 1000 iterations  #> Gibbs sampler - 40 of 1000 iterations  #> Gibbs sampler - 50 of 1000 iterations  #> Gibbs sampler - 60 of 1000 iterations  #> Gibbs sampler - 70 of 1000 iterations  #> Gibbs sampler - 80 of 1000 iterations  #> Gibbs sampler - 90 of 1000 iterations  #> Gibbs sampler - 100 of 1000 iterations  #> Gibbs sampler - 110 of 1000 iterations  #> Gibbs sampler - 120 of 1000 iterations  #> Gibbs sampler - 130 of 1000 iterations  #> Gibbs sampler - 140 of 1000 iterations  #> Gibbs sampler - 150 of 1000 iterations  #> Gibbs sampler - 160 of 1000 iterations  #> Gibbs sampler - 170 of 1000 iterations  #> Gibbs sampler - 180 of 1000 iterations  #> Gibbs sampler - 190 of 1000 iterations  #> Gibbs sampler - 200 of 1000 iterations  #> Gibbs sampler - 210 of 1000 iterations  #> Gibbs sampler - 220 of 1000 iterations  #> Gibbs sampler - 230 of 1000 iterations  #> Gibbs sampler - 240 of 1000 iterations  #> Gibbs sampler - 250 of 1000 iterations  #> Gibbs sampler - 260 of 1000 iterations  #> Gibbs sampler - 270 of 1000 iterations  #> Gibbs sampler - 280 of 1000 iterations  #> Gibbs sampler - 290 of 1000 iterations  #> Gibbs sampler - 300 of 1000 iterations  #> Gibbs sampler - 310 of 1000 iterations  #> Gibbs sampler - 320 of 1000 iterations  #> Gibbs sampler - 330 of 1000 iterations  #> Gibbs sampler - 340 of 1000 iterations  #> Gibbs sampler - 350 of 1000 iterations  #> Gibbs sampler - 360 of 1000 iterations  #> Gibbs sampler - 370 of 1000 iterations  #> Gibbs sampler - 380 of 1000 iterations  #> Gibbs sampler - 390 of 1000 iterations  #> Gibbs sampler - 400 of 1000 iterations  #> Gibbs sampler - 410 of 1000 iterations  #> Gibbs sampler - 420 of 1000 iterations  #> Gibbs sampler - 430 of 1000 iterations  #> Gibbs sampler - 440 of 1000 iterations  #> Gibbs sampler - 450 of 1000 iterations  #> Gibbs sampler - 460 of 1000 iterations  #> Gibbs sampler - 470 of 1000 iterations  #> Gibbs sampler - 480 of 1000 iterations  #> Gibbs sampler - 490 of 1000 iterations  #> Gibbs sampler - 500 of 1000 iterations  #> Gibbs sampler - 510 of 1000 iterations  #> Gibbs sampler - 520 of 1000 iterations  #> Gibbs sampler - 530 of 1000 iterations  #> Gibbs sampler - 540 of 1000 iterations  #> Gibbs sampler - 550 of 1000 iterations  #> Gibbs sampler - 560 of 1000 iterations  #> Gibbs sampler - 570 of 1000 iterations  #> Gibbs sampler - 580 of 1000 iterations  #> Gibbs sampler - 590 of 1000 iterations  #> Gibbs sampler - 600 of 1000 iterations  #> Gibbs sampler - 610 of 1000 iterations  #> Gibbs sampler - 620 of 1000 iterations  #> Gibbs sampler - 630 of 1000 iterations  #> Gibbs sampler - 640 of 1000 iterations  #> Gibbs sampler - 650 of 1000 iterations  #> Gibbs sampler - 660 of 1000 iterations  #> Gibbs sampler - 670 of 1000 iterations  #> Gibbs sampler - 680 of 1000 iterations  #> Gibbs sampler - 690 of 1000 iterations  #> Gibbs sampler - 700 of 1000 iterations  #> Gibbs sampler - 710 of 1000 iterations  #> Gibbs sampler - 720 of 1000 iterations  #> Gibbs sampler - 730 of 1000 iterations  #> Gibbs sampler - 740 of 1000 iterations  #> Gibbs sampler - 750 of 1000 iterations  #> Gibbs sampler - 760 of 1000 iterations  #> Gibbs sampler - 770 of 1000 iterations  #> Gibbs sampler - 780 of 1000 iterations  #> Gibbs sampler - 790 of 1000 iterations  #> Gibbs sampler - 800 of 1000 iterations  #> Gibbs sampler - 810 of 1000 iterations  #> Gibbs sampler - 820 of 1000 iterations  #> Gibbs sampler - 830 of 1000 iterations  #> Gibbs sampler - 840 of 1000 iterations  #> Gibbs sampler - 850 of 1000 iterations  #> Gibbs sampler - 860 of 1000 iterations  #> Gibbs sampler - 870 of 1000 iterations  #> Gibbs sampler - 880 of 1000 iterations  #> Gibbs sampler - 890 of 1000 iterations  #> Gibbs sampler - 900 of 1000 iterations  #> Gibbs sampler - 910 of 1000 iterations  #> Gibbs sampler - 920 of 1000 iterations  #> Gibbs sampler - 930 of 1000 iterations  #> Gibbs sampler - 940 of 1000 iterations  #> Gibbs sampler - 950 of 1000 iterations  #> Gibbs sampler - 960 of 1000 iterations  #> Gibbs sampler - 970 of 1000 iterations  #> Gibbs sampler - 980 of 1000 iterations  #> Gibbs sampler - 990 of 1000 iterations  #> Gibbs sampler - 1000 of 1000 iterations  summary(model) #> Probit model #> Formula: choice ~ var | 0  #> R: 1000, B: 500, Q: 1 #> Level: Utility differences with respect to alternative 'C'. #> Scale: Coefficient of the 1. error term variance fixed to 1. #>  #> Latent classes #> C = 1  #>  #> Gibbs sample statistics #>           true    mean      sd      R^ #>  b #>                                        #>    1.1    0.47    0.62    0.09    1.01 #>  #>  Omega #>                                        #>  1.1,1    0.35    0.52    0.15    1.01 #>  #>  Sigma #>                                        #>    1,1    1.00    1.00    0.00    1.00 #>    1,2    1.30    1.20    0.13    1.01 #>    2,2    2.79    2.86    0.55    1.04"},{"path":"https://loelschlaeger.de/RprobitB/reference/get_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract covariates of choice occasion — get_cov","title":"Extract covariates of choice occasion — get_cov","text":"convenience function returns covariates choices specific choice occasions.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/get_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract covariates of choice occasion — get_cov","text":"","code":"get_cov(x, id, idc, idc_label)"},{"path":"https://loelschlaeger.de/RprobitB/reference/get_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract covariates of choice occasion — get_cov","text":"x Either object class RprobitB_data RprobitB_fit. id numeric (vector), specifies decider(s). idc numeric (vector), specifies choice occasion(s). idc_label name column contains choice occasion identifier.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/get_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract covariates of choice occasion — get_cov","text":"subset choice_data data frame specified prepare_data().","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/gibbs_sampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Gibbs sampler for probit models — gibbs_sampler","title":"Gibbs sampler for probit models — gibbs_sampler","text":"Gibbs sampler probit models","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/gibbs_sampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gibbs sampler for probit models — gibbs_sampler","text":"","code":"gibbs_sampler(   sufficient_statistics,   prior,   latent_classes,   fixed_parameter,   R,   B,   print_progress,   ordered,   ranked,   save_beta_draws = FALSE )"},{"path":"https://loelschlaeger.de/RprobitB/reference/gibbs_sampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gibbs sampler for probit models — gibbs_sampler","text":"sufficient_statistics [list] output sufficient_statistics. prior [list] named list parameters prior distributions. See documentation check_prior details parameters can specified. latent_classes [list() | NULL] Optionally parameters specifying number latent classes updating scheme. values brackets default. C (1): fixed number (greater equal 1) (initial) classes. wb_update (FALSE): Set TRUE weight-based class updates. dp_update (FALSE): Set TRUE Dirichlet process class updates. Cmax (10): maximum number latent classes. following specifications used weight-based updating scheme: buffer (50): number iterations wait next update. epsmin (0.01): threshold weight removing latent class. epsmax (0.7): threshold weight splitting latent class. deltamin (0.1): minimum mean distance merging two classes. deltashift (0.5): scale shifting class means split. fixed_parameter [list] named list fixed parameter values alpha, C, s, b, Omega, Sigma, Sigma_full, beta, z, d simulation. See vignette model definition definitions variables. R [integer(1)] number iterations Gibbs sampler. B [integer(1)] length burn-period. print_progress [logical(1)] Print Gibbs sampler progress? ordered [logical(1)] TRUE, choice set alternatives assumed ordered worst best. ranked [logical(1)] alternatives ranked? save_beta_draws [logical(1)] Save draws decider-specific coefficient vectors? Usually recommended, requires lot storage space.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/gibbs_sampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gibbs sampler for probit models — gibbs_sampler","text":"list Gibbs samples Sigma, alpha (P_f > 0), s, z, b, Omega (P_r > 0), d (ordered = TRUE), vector class_sequence length R, r-th entry number classes iteration r.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/gibbs_sampler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gibbs sampler for probit models — gibbs_sampler","text":"function supposed called directly, rather via fit_model.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/ll_ordered.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute ordered probit log-likelihood — ll_ordered","title":"Compute ordered probit log-likelihood — ll_ordered","text":"Compute ordered probit log-likelihood","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/ll_ordered.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute ordered probit log-likelihood — ll_ordered","text":"","code":"ll_ordered(d, y, sys, Tvec)"},{"path":"https://loelschlaeger.de/RprobitB/reference/ll_ordered.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute ordered probit log-likelihood — ll_ordered","text":"d [numeric(J - 2)] Threshold increments. y [matrix(nrow = N, ncol = max(Tvec))] Choices 1,...,J decider choice occasion. sys [matrix(nrow = N, ncol = max(Tvec))] Systematic utilties decider choice occasion. Tvec [integer(N)] Number choice occasions per decider.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/ll_ordered.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute ordered probit log-likelihood — ll_ordered","text":"ordered probit log-likelihood value.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/ll_ordered.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute ordered probit log-likelihood — ll_ordered","text":"","code":"d <- c(0, 0, 0) y <- matrix(c(1, 2, 1, NA), ncol = 2) sys <- matrix(c(0, 0, 0, NA), ncol = 2) Tvec <- c(2, 1) ll_ordered(d = d, y = y, sys = sys, Tvec = Tvec) #> [1] -2.461157"},{"path":"https://loelschlaeger.de/RprobitB/reference/missing_covariates.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle missing covariates — missing_covariates","title":"Handle missing covariates — missing_covariates","text":"function checks replaces missing covariate entries choice_data.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/missing_covariates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle missing covariates — missing_covariates","text":"","code":"missing_covariates(   choice_data,   impute = \"complete_cases\",   col_ignore = character() )"},{"path":"https://loelschlaeger.de/RprobitB/reference/missing_covariates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle missing covariates — missing_covariates","text":"choice_data [data.frame] Choice data wide format, row represents one choice occasion. impute character specifies handle missing covariate entries choice_data, one : \"complete_cases\", removes rows containing missing covariate entries (default), \"zero\", replaces missing covariate entries zero (numeric columns), \"mean\", imputes missing covariate entries mean (numeric columns). col_ignore character vector columns ignored (none per default).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/missing_covariates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle missing covariates — missing_covariates","text":"input choice_data, missing covariates addressed.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/mml.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate marginal model likelihood — mml","title":"Approximate marginal model likelihood — mml","text":"function approximates model's marginal likelihood.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/mml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate marginal model likelihood — mml","text":"","code":"mml(x, S = 0, ncores = parallel::detectCores() - 1, recompute = FALSE)  # S3 method for class 'RprobitB_mml' print(x, log = FALSE, ...)  # S3 method for class 'RprobitB_mml' plot(x, log = FALSE, ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/mml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate marginal model likelihood — mml","text":"x object class RprobitB_fit. S number prior samples prior arithmetic mean estimate. Per default, S = 0. case, posterior samples used approximation via posterior harmonic mean estimator, see details section. ncores Computation prior arithmetic mean estimate parallelized, set number cores. recompute Set TRUE recompute likelihood. log Return logarithm marginal model likelihood? ... Currently used.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/mml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate marginal model likelihood — mml","text":"object x, including object mml, model's approximated marginal likelihood value.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/mml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Approximate marginal model likelihood — mml","text":"model's marginal likelihood \\(p(y\\mid M)\\) model \\(M\\) data \\(y\\) required computation Bayes factors. general, term closed form must approximated numerically. function uses posterior Gibbs samples approximate model's marginal likelihood via posterior harmonic mean estimator. check convergence, call plot(x$mml), x output function. estimation seem converged, can improve approximation combining value prior arithmetic mean estimator. final approximation model's marginal likelihood weighted sum posterior harmonic mean estimate prior arithmetic mean estimate, weights determined sample sizes.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/mode_approx.html","id":null,"dir":"Reference","previous_headings":"","what":"Gibbs sample mode — mode_approx","title":"Gibbs sample mode — mode_approx","text":"function approximates Gibbs sample mode.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/mode_approx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gibbs sample mode — mode_approx","text":"","code":"mode_approx(samples)"},{"path":"https://loelschlaeger.de/RprobitB/reference/mode_approx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gibbs sample mode — mode_approx","text":"samples [numeric()] Gibbs samples.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/mode_approx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gibbs sample mode — mode_approx","text":"(approximated) mode.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/mode_approx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gibbs sample mode — mode_approx","text":"","code":"samples <- oeli::rmixnorm(   n = 1000, mean = matrix(c(-2, 2), ncol = 2),   Sigma = matrix(c(1, 1), ncol = 2), proportions = c(0.7, 0.3) ) hist(samples)  mean(samples) # expected: 0.7 * (-2) + 0.3 * 2 = -0.8 #> [1] -0.7650793 mode_approx(samples) # expected: -2 #> [1] -2.095665"},{"path":"https://loelschlaeger.de/RprobitB/reference/model_selection.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare fitted models — model_selection","title":"Compare fitted models — model_selection","text":"function returns table several criteria model comparison.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/model_selection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare fitted models — model_selection","text":"","code":"model_selection(   ...,   criteria = c(\"npar\", \"LL\", \"AIC\", \"BIC\"),   add_form = FALSE )  # S3 method for class 'RprobitB_model_selection' print(x, digits = 2, ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/model_selection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare fitted models — model_selection","text":"... One objects class RprobitB_fit. criteria [character()] One following: \"npar\" number model parameters (see npar), \"LL\" log-likelihood value (see logLik), \"AIC\" AIC value (see AIC), \"BIC\" BIC value (see BIC), \"WAIC\" WAIC value (also shows standard error sd(WAIC) number pWAIC effective model parameters, see WAIC), \"MMLL\" marginal model log-likelihood, \"BF\" Bayes factor, \"pred_acc\" prediction accuracy (see pred_acc). add_form [logical(1)] Add model formulas? x object class RprobitB_model_selection. digits [integer(1)] number digits.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/model_selection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare fitted models — model_selection","text":"data.frame, criteria columns, models rows.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/model_selection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare fitted models — model_selection","text":"See vignette model selection details.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/npar.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract number of model parameters — npar","title":"Extract number of model parameters — npar","text":"function extracts number model parameters RprobitB_fit object.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/npar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract number of model parameters — npar","text":"","code":"npar(object, ...)  # S3 method for class 'RprobitB_fit' npar(object, ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/npar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract number of model parameters — npar","text":"object object class RprobitB_fit. ... Optionally objects class RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/npar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract number of model parameters — npar","text":"Either numeric value (just one object provided) numeric vector.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/overview_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Print effect overview — overview_effects","title":"Print effect overview — overview_effects","text":"function gives overview effect names, whether covariate alternative-specific, whether coefficient alternative-specific, whether random effect.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/overview_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print effect overview — overview_effects","text":"","code":"overview_effects(   form,   re = NULL,   alternatives,   base = tail(alternatives, 1),   ordered = FALSE )"},{"path":"https://loelschlaeger.de/RprobitB/reference/overview_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print effect overview — overview_effects","text":"form [formula] model description structure choice ~ | B | C, choice name dependent variable (choices), names alternative choice situation specific covariates coefficient constant across alternatives, B names choice situation specific covariates alternative specific coefficients, C names alternative choice situation specific covariates alternative specific coefficients. Multiple covariates (one type) separated + sign. default, alternative specific constants (ASCs) added model. can removed adding +0 second spot. ordered probit model (ordered = TRUE), formula object simple structure choice ~ . ASCs estimated. re [character() | NULL] Names covariates random effects. re = NULL (default), random effects. random effects ASCs, include \"ASC\" re. alternatives [character()] names choice alternatives. specified, choice set defined observed choices. ordered = TRUE, alternatives assumed specified alternatives ordered worst best. base [character(1)] name base alternative covariates alternative specific (.e. type 2 covariates ASCs). Ignored set NULL model alternative specific covariates (e.g. ordered probit model). default, base last element alternatives. ordered [logical(1)] TRUE, choice set alternatives assumed ordered worst best.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/overview_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print effect overview — overview_effects","text":"data.frame, row effect, columns effect name \"effect\", booleans whether covariate alternative-specific \"as_value\", whether coefficient alternative-specific \"as_coef\", whether random effect \"random\".","code":""},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/reference/overview_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print effect overview — overview_effects","text":"","code":"overview_effects(   form = choice ~ price + time + comfort + change | 1,   re = c(\"price\", \"time\"),   alternatives = c(\"A\", \"B\"),   base = \"A\" ) #>    effect as_value as_coef random #> 1 comfort     TRUE   FALSE  FALSE #> 2  change     TRUE   FALSE  FALSE #> 3   ASC_B    FALSE    TRUE  FALSE #> 4   price     TRUE   FALSE   TRUE #> 5    time     TRUE   FALSE   TRUE"},{"path":"https://loelschlaeger.de/RprobitB/reference/parameter_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Create parameters labels — parameter_labels","title":"Create parameters labels — parameter_labels","text":"function creates model parameter labels.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/parameter_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create parameters labels — parameter_labels","text":"","code":"parameter_labels(   P_f,   P_r,   J,   C,   cov_sym,   ordered = FALSE,   keep_par = c(\"s\", \"alpha\", \"b\", \"Omega\", \"Sigma\", \"d\"),   drop_par = NULL )  create_labels_s(P_r, C)  create_labels_alpha(P_f)  create_labels_b(P_r, C)  create_labels_Omega(P_r, C, cov_sym)  create_labels_Sigma(J, cov_sym, ordered = FALSE)  create_labels_d(J, ordered)"},{"path":"https://loelschlaeger.de/RprobitB/reference/parameter_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create parameters labels — parameter_labels","text":"P_f [integer(1)] number covariates connected fixed coefficient. P_r [integer(2)] number covariates connected random coefficient. J [integer(1)] number >= 2 choice alternatives. cov_sym Set TRUE labels symmetric covariance elements. ordered [logical(1)] TRUE, choice set alternatives assumed ordered worst best. keep_par, drop_par vector parameter names kept dropped.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/parameter_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create parameters labels — parameter_labels","text":"list labels selected model parameters.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot.RprobitB_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize fitted probit model — plot.RprobitB_fit","title":"Visualize fitted probit model — plot.RprobitB_fit","text":"function plot method object class RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot.RprobitB_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize fitted probit model — plot.RprobitB_fit","text":"","code":"# S3 method for class 'RprobitB_fit' plot(x, type, ignore = NULL, ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot.RprobitB_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize fitted probit model — plot.RprobitB_fit","text":"x object class RprobitB_fit. type [character(1)] type plot, can one : \"mixture\" visualize mixing distribution, \"acf\" autocorrelation plots Gibbs samples, \"trace\" trace plots Gibbs samples, \"class_seq\" visualize sequence class numbers. ignore [character()] Covariate parameter names get visualized. ... Currently used.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot.RprobitB_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize fitted probit model — plot.RprobitB_fit","text":"return value. Draws plot current device.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_acf.html","id":null,"dir":"Reference","previous_headings":"","what":"Autocorrelation plot of Gibbs samples — plot_acf","title":"Autocorrelation plot of Gibbs samples — plot_acf","text":"function plots autocorrelation Gibbs samples. plots include total Gibbs sample size TSS effective sample size ESS, see details.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_acf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autocorrelation plot of Gibbs samples — plot_acf","text":"","code":"plot_acf(gibbs_samples, par_labels)"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_acf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autocorrelation plot of Gibbs samples — plot_acf","text":"gibbs_samples matrix Gibbs samples. par_labels character vector labels Gibbs samples, length equal number columns gibbs_samples.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_acf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autocorrelation plot of Gibbs samples — plot_acf","text":"return value. Draws plot current device.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_acf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Autocorrelation plot of Gibbs samples — plot_acf","text":"effective sample size value $$TSS / \\sqrt{1 + 2\\sum_{k\\geq 1} \\rho_k}$$, \\(\\rho_k\\) auto correlation chain offset \\(k\\) positions. auto correlations estimated via spec.ar.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_class_allocation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot class allocation (for P_r = 2 only) — plot_class_allocation","title":"Plot class allocation (for P_r = 2 only) — plot_class_allocation","text":"function plots allocation decision-maker specific coefficient vectors beta given allocation vector z, class means b, class covariance matrices Omega.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_class_allocation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot class allocation (for P_r = 2 only) — plot_class_allocation","text":"","code":"plot_class_allocation(beta, z, b, Omega, ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_class_allocation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot class allocation (for P_r = 2 only) — plot_class_allocation","text":"beta [matrix(nrow = P_r, ncol = N)] matrix decider-specific coefficient vectors. z [numeric(N)] decider class allocations. b [matrix(nrow = P_r, ncol = C)] matrix class means columns. Omega [matrix(nrow = P_r * P_r, ncol = C)] matrix vectorized class covariance matrices columns. ... Optional visualization parameters: colors, character vector color specifications, perc, numeric 0 1 draw perc percentile ellipsoids underlying Gaussian distributions (perc = 0.95 per default), r, current iteration number Gibbs sampler displayed legend, sleep, number seconds pause plotting.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_class_allocation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot class allocation (for P_r = 2 only) — plot_class_allocation","text":"return value. Draws plot current device.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_class_allocation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot class allocation (for P_r = 2 only) — plot_class_allocation","text":"applicable two-dimensional case, .e. P_r = 2.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_class_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualizing the number of classes during Gibbs sampling — plot_class_seq","title":"Visualizing the number of classes during Gibbs sampling — plot_class_seq","text":"function plots number latent Glasses Gibbs sampling visualize class updating.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_class_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualizing the number of classes during Gibbs sampling — plot_class_seq","text":"","code":"plot_class_seq(class_sequence, B)"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_class_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualizing the number of classes during Gibbs sampling — plot_class_seq","text":"class_sequence sequence class numbers Gibbs sampling length R. B [integer(1)] length burn-period.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_class_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualizing the number of classes during Gibbs sampling — plot_class_seq","text":"return value. Draws plot current device.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_mixture_contour.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot bivariate contour of mixing distributions — plot_mixture_contour","title":"Plot bivariate contour of mixing distributions — plot_mixture_contour","text":"function plots estimated bivariate contour mixing distributions.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_mixture_contour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot bivariate contour of mixing distributions — plot_mixture_contour","text":"","code":"plot_mixture_contour(means, covs, weights, names)"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_mixture_contour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot bivariate contour of mixing distributions — plot_mixture_contour","text":"means class means. covs class covariances. weights class weights. names covariate names.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_mixture_contour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot bivariate contour of mixing distributions — plot_mixture_contour","text":"object class ggplot.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_mixture_contour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot bivariate contour of mixing distributions — plot_mixture_contour","text":"","code":"means <- list(c(0, 0), c(2, 2)) covs <- list(diag(2), 0.5 * diag(2)) weights <- c(0.7, 0.3) names <- c(\"A\", \"B\") plot_mixture_contour(means, covs, weights, names)"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_mixture_marginal.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marginal mixing distributions — plot_mixture_marginal","title":"Plot marginal mixing distributions — plot_mixture_marginal","text":"function plots estimated marginal mixing distributions.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_mixture_marginal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marginal mixing distributions — plot_mixture_marginal","text":"","code":"plot_mixture_marginal(mean, cov, weights, name)"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_mixture_marginal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marginal mixing distributions — plot_mixture_marginal","text":"mean class means. cov class covariances. weights class weights. name covariate name.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_mixture_marginal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marginal mixing distributions — plot_mixture_marginal","text":"object class ggplot.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_roc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ROC curve — plot_roc","title":"Plot ROC curve — plot_roc","text":"function draws receiver operating characteristic (ROC) curves.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_roc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ROC curve — plot_roc","text":"","code":"plot_roc(..., reference = NULL)"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_roc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ROC curve — plot_roc","text":"... One RprobitB_fit objects data.frames choice probability. reference reference alternative.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_roc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ROC curve — plot_roc","text":"return value. Draws plot current device.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualizing the trace of Gibbs samples. — plot_trace","title":"Visualizing the trace of Gibbs samples. — plot_trace","text":"function plots traces Gibbs samples.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualizing the trace of Gibbs samples. — plot_trace","text":"","code":"plot_trace(gibbs_samples, par_labels)"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualizing the trace of Gibbs samples. — plot_trace","text":"gibbs_samples matrix Gibbs samples. par_labels character vector length equal number columns gibbs_samples, containing labels Gibbs samples.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_trace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualizing the trace of Gibbs samples. — plot_trace","text":"return value. Draws plot current device.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/point_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute point estimates — point_estimates","title":"Compute point estimates — point_estimates","text":"function computes point estimates RprobitB_fit. Per default, mean Gibbs samples used point estimate. However, statistic computes single numeric value vector Gibbs samples can specified FUN.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/point_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute point estimates — point_estimates","text":"","code":"point_estimates(x, FUN = mean)"},{"path":"https://loelschlaeger.de/RprobitB/reference/point_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute point estimates — point_estimates","text":"x object class RprobitB_fit. FUN function computes single numeric value vector numeric values.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/point_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute point estimates — point_estimates","text":"object class RprobitB_parameter.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/point_estimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute point estimates — point_estimates","text":"","code":"data <- simulate_choices(form = choice ~ covariate, N = 10, T = 10, J = 2) model <- fit_model(data) #> Computing sufficient statistics - 0 of 4   #> Computing sufficient statistics - 1 of 4   #> Computing sufficient statistics - 2 of 4   #> Computing sufficient statistics - 3 of 4   #> Computing sufficient statistics - 4 of 4   #> Gibbs sampler - 1 of 1000 iterations  #> Gibbs sampler - 10 of 1000 iterations  #> Gibbs sampler - 20 of 1000 iterations  #> Gibbs sampler - 30 of 1000 iterations  #> Gibbs sampler - 40 of 1000 iterations  #> Gibbs sampler - 50 of 1000 iterations  #> Gibbs sampler - 60 of 1000 iterations  #> Gibbs sampler - 70 of 1000 iterations  #> Gibbs sampler - 80 of 1000 iterations  #> Gibbs sampler - 90 of 1000 iterations  #> Gibbs sampler - 100 of 1000 iterations  #> Gibbs sampler - 110 of 1000 iterations  #> Gibbs sampler - 120 of 1000 iterations  #> Gibbs sampler - 130 of 1000 iterations  #> Gibbs sampler - 140 of 1000 iterations  #> Gibbs sampler - 150 of 1000 iterations  #> Gibbs sampler - 160 of 1000 iterations  #> Gibbs sampler - 170 of 1000 iterations  #> Gibbs sampler - 180 of 1000 iterations  #> Gibbs sampler - 190 of 1000 iterations  #> Gibbs sampler - 200 of 1000 iterations  #> Gibbs sampler - 210 of 1000 iterations  #> Gibbs sampler - 220 of 1000 iterations  #> Gibbs sampler - 230 of 1000 iterations  #> Gibbs sampler - 240 of 1000 iterations  #> Gibbs sampler - 250 of 1000 iterations  #> Gibbs sampler - 260 of 1000 iterations  #> Gibbs sampler - 270 of 1000 iterations  #> Gibbs sampler - 280 of 1000 iterations  #> Gibbs sampler - 290 of 1000 iterations  #> Gibbs sampler - 300 of 1000 iterations  #> Gibbs sampler - 310 of 1000 iterations  #> Gibbs sampler - 320 of 1000 iterations  #> Gibbs sampler - 330 of 1000 iterations  #> Gibbs sampler - 340 of 1000 iterations  #> Gibbs sampler - 350 of 1000 iterations  #> Gibbs sampler - 360 of 1000 iterations  #> Gibbs sampler - 370 of 1000 iterations  #> Gibbs sampler - 380 of 1000 iterations  #> Gibbs sampler - 390 of 1000 iterations  #> Gibbs sampler - 400 of 1000 iterations  #> Gibbs sampler - 410 of 1000 iterations  #> Gibbs sampler - 420 of 1000 iterations  #> Gibbs sampler - 430 of 1000 iterations  #> Gibbs sampler - 440 of 1000 iterations  #> Gibbs sampler - 450 of 1000 iterations  #> Gibbs sampler - 460 of 1000 iterations  #> Gibbs sampler - 470 of 1000 iterations  #> Gibbs sampler - 480 of 1000 iterations  #> Gibbs sampler - 490 of 1000 iterations  #> Gibbs sampler - 500 of 1000 iterations  #> Gibbs sampler - 510 of 1000 iterations  #> Gibbs sampler - 520 of 1000 iterations  #> Gibbs sampler - 530 of 1000 iterations  #> Gibbs sampler - 540 of 1000 iterations  #> Gibbs sampler - 550 of 1000 iterations  #> Gibbs sampler - 560 of 1000 iterations  #> Gibbs sampler - 570 of 1000 iterations  #> Gibbs sampler - 580 of 1000 iterations  #> Gibbs sampler - 590 of 1000 iterations  #> Gibbs sampler - 600 of 1000 iterations  #> Gibbs sampler - 610 of 1000 iterations  #> Gibbs sampler - 620 of 1000 iterations  #> Gibbs sampler - 630 of 1000 iterations  #> Gibbs sampler - 640 of 1000 iterations  #> Gibbs sampler - 650 of 1000 iterations  #> Gibbs sampler - 660 of 1000 iterations  #> Gibbs sampler - 670 of 1000 iterations  #> Gibbs sampler - 680 of 1000 iterations  #> Gibbs sampler - 690 of 1000 iterations  #> Gibbs sampler - 700 of 1000 iterations  #> Gibbs sampler - 710 of 1000 iterations  #> Gibbs sampler - 720 of 1000 iterations  #> Gibbs sampler - 730 of 1000 iterations  #> Gibbs sampler - 740 of 1000 iterations  #> Gibbs sampler - 750 of 1000 iterations  #> Gibbs sampler - 760 of 1000 iterations  #> Gibbs sampler - 770 of 1000 iterations  #> Gibbs sampler - 780 of 1000 iterations  #> Gibbs sampler - 790 of 1000 iterations  #> Gibbs sampler - 800 of 1000 iterations  #> Gibbs sampler - 810 of 1000 iterations  #> Gibbs sampler - 820 of 1000 iterations  #> Gibbs sampler - 830 of 1000 iterations  #> Gibbs sampler - 840 of 1000 iterations  #> Gibbs sampler - 850 of 1000 iterations  #> Gibbs sampler - 860 of 1000 iterations  #> Gibbs sampler - 870 of 1000 iterations  #> Gibbs sampler - 880 of 1000 iterations  #> Gibbs sampler - 890 of 1000 iterations  #> Gibbs sampler - 900 of 1000 iterations  #> Gibbs sampler - 910 of 1000 iterations  #> Gibbs sampler - 920 of 1000 iterations  #> Gibbs sampler - 930 of 1000 iterations  #> Gibbs sampler - 940 of 1000 iterations  #> Gibbs sampler - 950 of 1000 iterations  #> Gibbs sampler - 960 of 1000 iterations  #> Gibbs sampler - 970 of 1000 iterations  #> Gibbs sampler - 980 of 1000 iterations  #> Gibbs sampler - 990 of 1000 iterations  #> Gibbs sampler - 1000 of 1000 iterations  point_estimates(model) #> alpha : double vector of length 2  #> 1.5 -1.92 #>  #> C : NA #>  #> s : NA #>  #> b : NA #>  #> Omega : NA #>  #> Sigma : 1 #>  #> Sigma_full : 2 x 2 matrix of doubles  #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    0 #>  #>  #> beta : NA #>  #> z : NA #>  #> d : NA #>  point_estimates(model, FUN = median) #> alpha : double vector of length 2  #> 1.51 -1.92 #>  #> C : NA #>  #> s : NA #>  #> b : NA #>  #> Omega : NA #>  #> Sigma : 1 #>  #> Sigma_full : 2 x 2 matrix of doubles  #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    0 #>  #>  #> beta : NA #>  #> z : NA #>  #> d : NA #>"},{"path":"https://loelschlaeger.de/RprobitB/reference/posterior_pars.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter sets from posterior samples — posterior_pars","title":"Parameter sets from posterior samples — posterior_pars","text":"function builds parameter sets normalized, burned thinned posterior samples.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/posterior_pars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter sets from posterior samples — posterior_pars","text":"","code":"posterior_pars(x)"},{"path":"https://loelschlaeger.de/RprobitB/reference/posterior_pars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter sets from posterior samples — posterior_pars","text":"x object class RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/posterior_pars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter sets from posterior samples — posterior_pars","text":"list RprobitB_parameter objects.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/pred_acc.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute prediction accuracy — pred_acc","title":"Compute prediction accuracy — pred_acc","text":"function computes prediction accuracy RprobitB_fit object. Prediction accuracy means share choices correctly predicted model, prediction based maximum choice probability.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/pred_acc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute prediction accuracy — pred_acc","text":"","code":"pred_acc(x, ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/pred_acc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute prediction accuracy — pred_acc","text":"x object class RprobitB_fit. ... Optionally specify RprobitB_fit objects.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/pred_acc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute prediction accuracy — pred_acc","text":"numeric.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/predict.RprobitB_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict choices — predict.RprobitB_fit","title":"Predict choices — predict.RprobitB_fit","text":"function predicts discrete choice behaviour.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/predict.RprobitB_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict choices — predict.RprobitB_fit","text":"","code":"# S3 method for class 'RprobitB_fit' predict(object, data = NULL, overview = TRUE, digits = 2, ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/predict.RprobitB_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict choices — predict.RprobitB_fit","text":"object object class RprobitB_fit. data Either NULL, using data object, object class RprobitB_data, example test part generated train_test, data frame custom choice characteristics. must structure choice_data used prepare_data. Missing columns NA values set 0. overview [logical(1)] Summarize prediction confusion matrix? digits [integer(1)] number digits returned choice probabilities. ... Currently used.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/predict.RprobitB_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict choices — predict.RprobitB_fit","text":"Either table overview = TRUE data frame otherwise.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/predict.RprobitB_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict choices — predict.RprobitB_fit","text":"Predictions made based maximum predicted probability choice alternative. See vignette choice prediction demonstration visualize model's sensitivity specificity means receiver operating characteristic (ROC) curve.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/predict.RprobitB_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict choices — predict.RprobitB_fit","text":"","code":"set.seed(1) data <- simulate_choices(form = choice ~ cov, N = 10, T = 10, J = 2) data <- train_test(data, test_proportion = 0.5) model <- fit_model(data$train) #> Computing sufficient statistics - 0 of 4   #> Computing sufficient statistics - 1 of 4   #> Computing sufficient statistics - 2 of 4   #> Computing sufficient statistics - 3 of 4   #> Computing sufficient statistics - 4 of 4   #> Gibbs sampler - 1 of 1000 iterations  #> Gibbs sampler - 10 of 1000 iterations  #> Gibbs sampler - 20 of 1000 iterations  #> Gibbs sampler - 30 of 1000 iterations  #> Gibbs sampler - 40 of 1000 iterations  #> Gibbs sampler - 50 of 1000 iterations  #> Gibbs sampler - 60 of 1000 iterations  #> Gibbs sampler - 70 of 1000 iterations  #> Gibbs sampler - 80 of 1000 iterations  #> Gibbs sampler - 90 of 1000 iterations  #> Gibbs sampler - 100 of 1000 iterations  #> Gibbs sampler - 110 of 1000 iterations  #> Gibbs sampler - 120 of 1000 iterations  #> Gibbs sampler - 130 of 1000 iterations  #> Gibbs sampler - 140 of 1000 iterations  #> Gibbs sampler - 150 of 1000 iterations  #> Gibbs sampler - 160 of 1000 iterations  #> Gibbs sampler - 170 of 1000 iterations  #> Gibbs sampler - 180 of 1000 iterations  #> Gibbs sampler - 190 of 1000 iterations  #> Gibbs sampler - 200 of 1000 iterations  #> Gibbs sampler - 210 of 1000 iterations  #> Gibbs sampler - 220 of 1000 iterations  #> Gibbs sampler - 230 of 1000 iterations  #> Gibbs sampler - 240 of 1000 iterations  #> Gibbs sampler - 250 of 1000 iterations  #> Gibbs sampler - 260 of 1000 iterations  #> Gibbs sampler - 270 of 1000 iterations  #> Gibbs sampler - 280 of 1000 iterations  #> Gibbs sampler - 290 of 1000 iterations  #> Gibbs sampler - 300 of 1000 iterations  #> Gibbs sampler - 310 of 1000 iterations  #> Gibbs sampler - 320 of 1000 iterations  #> Gibbs sampler - 330 of 1000 iterations  #> Gibbs sampler - 340 of 1000 iterations  #> Gibbs sampler - 350 of 1000 iterations  #> Gibbs sampler - 360 of 1000 iterations  #> Gibbs sampler - 370 of 1000 iterations  #> Gibbs sampler - 380 of 1000 iterations  #> Gibbs sampler - 390 of 1000 iterations  #> Gibbs sampler - 400 of 1000 iterations  #> Gibbs sampler - 410 of 1000 iterations  #> Gibbs sampler - 420 of 1000 iterations  #> Gibbs sampler - 430 of 1000 iterations  #> Gibbs sampler - 440 of 1000 iterations  #> Gibbs sampler - 450 of 1000 iterations  #> Gibbs sampler - 460 of 1000 iterations  #> Gibbs sampler - 470 of 1000 iterations  #> Gibbs sampler - 480 of 1000 iterations  #> Gibbs sampler - 490 of 1000 iterations  #> Gibbs sampler - 500 of 1000 iterations  #> Gibbs sampler - 510 of 1000 iterations  #> Gibbs sampler - 520 of 1000 iterations  #> Gibbs sampler - 530 of 1000 iterations  #> Gibbs sampler - 540 of 1000 iterations  #> Gibbs sampler - 550 of 1000 iterations  #> Gibbs sampler - 560 of 1000 iterations  #> Gibbs sampler - 570 of 1000 iterations  #> Gibbs sampler - 580 of 1000 iterations  #> Gibbs sampler - 590 of 1000 iterations  #> Gibbs sampler - 600 of 1000 iterations  #> Gibbs sampler - 610 of 1000 iterations  #> Gibbs sampler - 620 of 1000 iterations  #> Gibbs sampler - 630 of 1000 iterations  #> Gibbs sampler - 640 of 1000 iterations  #> Gibbs sampler - 650 of 1000 iterations  #> Gibbs sampler - 660 of 1000 iterations  #> Gibbs sampler - 670 of 1000 iterations  #> Gibbs sampler - 680 of 1000 iterations  #> Gibbs sampler - 690 of 1000 iterations  #> Gibbs sampler - 700 of 1000 iterations  #> Gibbs sampler - 710 of 1000 iterations  #> Gibbs sampler - 720 of 1000 iterations  #> Gibbs sampler - 730 of 1000 iterations  #> Gibbs sampler - 740 of 1000 iterations  #> Gibbs sampler - 750 of 1000 iterations  #> Gibbs sampler - 760 of 1000 iterations  #> Gibbs sampler - 770 of 1000 iterations  #> Gibbs sampler - 780 of 1000 iterations  #> Gibbs sampler - 790 of 1000 iterations  #> Gibbs sampler - 800 of 1000 iterations  #> Gibbs sampler - 810 of 1000 iterations  #> Gibbs sampler - 820 of 1000 iterations  #> Gibbs sampler - 830 of 1000 iterations  #> Gibbs sampler - 840 of 1000 iterations  #> Gibbs sampler - 850 of 1000 iterations  #> Gibbs sampler - 860 of 1000 iterations  #> Gibbs sampler - 870 of 1000 iterations  #> Gibbs sampler - 880 of 1000 iterations  #> Gibbs sampler - 890 of 1000 iterations  #> Gibbs sampler - 900 of 1000 iterations  #> Gibbs sampler - 910 of 1000 iterations  #> Gibbs sampler - 920 of 1000 iterations  #> Gibbs sampler - 930 of 1000 iterations  #> Gibbs sampler - 940 of 1000 iterations  #> Gibbs sampler - 950 of 1000 iterations  #> Gibbs sampler - 960 of 1000 iterations  #> Gibbs sampler - 970 of 1000 iterations  #> Gibbs sampler - 980 of 1000 iterations  #> Gibbs sampler - 990 of 1000 iterations  #> Gibbs sampler - 1000 of 1000 iterations   predict(model) #>     predicted #> true  A  B #>    A 16  8 #>    B  6 20 predict(model, overview = FALSE) #>    id idc    A    B true predicted correct #> 1   1   1 0.57 0.43    B         A   FALSE #> 2   1   2 0.53 0.47    A         A    TRUE #> 3   1   3 0.54 0.46    A         A    TRUE #> 4   1   4 0.21 0.79    B         B    TRUE #> 5   1   5 0.31 0.69    A         B   FALSE #> 6   1   6 0.97 0.03    A         A    TRUE #> 7   1   7 0.63 0.37    A         A    TRUE #> 8   1   8 0.61 0.39    A         A    TRUE #> 9   1   9 0.51 0.49    A         A    TRUE #> 10  1  10 0.94 0.06    A         A    TRUE #> 11  2   1 0.10 0.90    B         B    TRUE #> 12  2   2 0.34 0.66    B         B    TRUE #> 13  2   3 0.94 0.06    A         A    TRUE #> 14  2   4 0.89 0.11    B         A   FALSE #> 15  2   5 0.23 0.77    B         B    TRUE #> 16  2   6 0.47 0.53    A         B   FALSE #> 17  2   7 0.48 0.52    B         B    TRUE #> 18  2   8 0.25 0.75    A         B   FALSE #> 19  2   9 0.48 0.52    A         B   FALSE #> 20  2  10 0.36 0.64    B         B    TRUE #> 21  3   1 0.21 0.79    A         B   FALSE #> 22  3   2 0.71 0.29    A         A    TRUE #> 23  3   3 0.49 0.51    B         B    TRUE #> 24  3   4 0.92 0.08    A         A    TRUE #> 25  3   5 0.37 0.63    A         B   FALSE #> 26  3   6 0.75 0.25    A         A    TRUE #> 27  3   7 0.59 0.41    B         A   FALSE #> 28  3   8 0.87 0.13    A         A    TRUE #> 29  3   9 0.51 0.49    B         A   FALSE #> 30  3  10 0.37 0.63    B         B    TRUE #> 31  4   1 0.24 0.76    B         B    TRUE #> 32  4   2 0.43 0.57    B         B    TRUE #> 33  4   3 0.60 0.40    B         A   FALSE #> 34  4   4 0.20 0.80    B         B    TRUE #> 35  4   5 0.91 0.09    A         A    TRUE #> 36  4   6 0.27 0.73    B         B    TRUE #> 37  4   7 0.59 0.41    A         A    TRUE #> 38  4   8 0.44 0.56    A         B   FALSE #> 39  4   9 0.15 0.85    B         B    TRUE #> 40  4  10 0.35 0.65    B         B    TRUE #> 41  5   1 0.15 0.85    A         B   FALSE #> 42  5   2 0.87 0.13    A         A    TRUE #> 43  5   3 0.07 0.93    B         B    TRUE #> 44  5   4 0.30 0.70    B         B    TRUE #> 45  5   5 0.45 0.55    B         B    TRUE #> 46  5   6 0.55 0.45    B         A   FALSE #> 47  5   7 0.91 0.09    A         A    TRUE #> 48  5   8 0.36 0.64    B         B    TRUE #> 49  5   9 0.26 0.74    B         B    TRUE #> 50  5  10 0.06 0.94    B         B    TRUE predict(model, data = data$test) #>     predicted #> true  A  B #>    A 23  7 #>    B  7 13 predict(   model,   data = data.frame(\"cov_A\" = c(1, 1, NA, NA), \"cov_B\" = c(1, NA, 1, NA)),   overview = FALSE ) #> Checking for missing covariates #>   id idc    A    B prediction #> 1  1   1 0.56 0.44          A #> 2  2   1 0.30 0.70          B #> 3  3   1 0.80 0.20          A #> 4  4   1 0.56 0.44          A"},{"path":"https://loelschlaeger.de/RprobitB/reference/preference_flip.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for flip in preferences after change in model scale. — preference_flip","title":"Check for flip in preferences after change in model scale. — preference_flip","text":"function checks change model scale flipped preferences.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/preference_flip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for flip in preferences after change in model scale. — preference_flip","text":"","code":"preference_flip(model_old, model_new)"},{"path":"https://loelschlaeger.de/RprobitB/reference/preference_flip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for flip in preferences after change in model scale. — preference_flip","text":"model_old object class RprobitB_fit, model scale change. model_new object class RprobitB_fit, model scale change.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/preference_flip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for flip in preferences after change in model scale. — preference_flip","text":"return value, called side-effects.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/prepare_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare choice data for estimation — prepare_data","title":"Prepare choice data for estimation — prepare_data","text":"function prepares choice data estimation.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/prepare_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare choice data for estimation — prepare_data","text":"","code":"prepare_data(   form,   choice_data,   re = NULL,   alternatives = NULL,   ordered = FALSE,   ranked = FALSE,   base = NULL,   id = \"id\",   idc = NULL,   standardize = NULL,   impute = \"complete_cases\" )"},{"path":"https://loelschlaeger.de/RprobitB/reference/prepare_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare choice data for estimation — prepare_data","text":"form [formula] model description structure choice ~ | B | C, choice name dependent variable (choices), names alternative choice situation specific covariates coefficient constant across alternatives, B names choice situation specific covariates alternative specific coefficients, C names alternative choice situation specific covariates alternative specific coefficients. Multiple covariates (one type) separated + sign. default, alternative specific constants (ASCs) added model. can removed adding +0 second spot. ordered probit model (ordered = TRUE), formula object simple structure choice ~ . ASCs estimated. choice_data [data.frame] Choice data wide format, row represents one choice occasion. re [character() | NULL] Names covariates random effects. re = NULL (default), random effects. random effects ASCs, include \"ASC\" re. alternatives [character()] names choice alternatives. specified, choice set defined observed choices. ordered = TRUE, alternatives assumed specified alternatives ordered worst best. ordered [logical(1)] TRUE, choice set alternatives assumed ordered worst best. ranked [logical(1)] alternatives ranked? base [character(1)] name base alternative covariates alternative specific (.e. type 2 covariates ASCs). Ignored set NULL model alternative specific covariates (e.g. ordered probit model). default, base last element alternatives. id [character(1)] name column choice_data contains unique identifier decision maker. idc [character(1)] name column choice_data contains unique identifier choice situation decision maker. default, identifier generated order appearance. standardize [character() | \"\"] Names covariates get standardized. Covariates type 1 3 addressed <covariate>_<alternative>. standardize = \"\", covariates get standardized. impute character specifies handle missing covariate entries choice_data, one : \"complete_cases\", removes rows containing missing covariate entries (default), \"zero\", replaces missing covariate entries zero (numeric columns), \"mean\", imputes missing covariate entries mean (numeric columns).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/prepare_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare choice data for estimation — prepare_data","text":"object class RprobitB_data.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/prepare_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare choice data for estimation — prepare_data","text":"Requirements data.frame choice_data: must contain column named id contains unique identifier decision maker. can contain column named idc contains unique identifier choice situation decision maker. information missing, identifier generated automatically appearance choices data set. can contain column named choice observed choices, choice must match name dependent variable form. column required model fitting prediction. must contain numeric column named p_j alternative specific covariate p form choice alternative j alternatives. must contain numeric column named q covariate q form constant across alternatives. ordered case (ordered = TRUE), column choice must contain full ranking alternatives choice occasion character, alternatives separated commas, see examples. See vignette choice data details.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/reference/prepare_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare choice data for estimation — prepare_data","text":"","code":"data <- prepare_data(   form = choice ~ price + time + comfort + change | 0,   choice_data = train_choice,   re = c(\"price\", \"time\"),   id = \"deciderID\",   idc = \"occasionID\",   standardize = c(\"price\", \"time\") ) #> Checking for missing covariates  ### ranked case choice_data <- data.frame(   \"id\" = 1:3, \"choice\" = c(\"A,B,C\", \"A,C,B\", \"B,C,A\"), \"cov\" = 1 ) data <- prepare_data(   form = choice ~ 0 | cov + 0,   choice_data = choice_data,   ranked = TRUE ) #> Checking for missing covariates"},{"path":"https://loelschlaeger.de/RprobitB/reference/sample_allocation.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample allocation — sample_allocation","title":"Sample allocation — sample_allocation","text":"Sample allocation","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/sample_allocation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample allocation — sample_allocation","text":"","code":"sample_allocation(prob)"},{"path":"https://loelschlaeger.de/RprobitB/reference/sample_allocation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample allocation — sample_allocation","text":"prob [numeric(C)] vector class probabilities.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/sample_allocation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample allocation — sample_allocation","text":"integer 1:C.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/sample_allocation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample allocation — sample_allocation","text":"","code":"sample_allocation(c(0.5, 0.3, 0.2)) #> [1] 1"},{"path":"https://loelschlaeger.de/RprobitB/reference/simulate_choices.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate choice data — simulate_choices","title":"Simulate choice data — simulate_choices","text":"function simulates choice data probit model.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/simulate_choices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate choice data — simulate_choices","text":"","code":"simulate_choices(   form,   N,   T = 1,   J,   re = NULL,   alternatives = NULL,   ordered = FALSE,   ranked = FALSE,   base = NULL,   covariates = NULL,   true_parameter = list() )"},{"path":"https://loelschlaeger.de/RprobitB/reference/simulate_choices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate choice data — simulate_choices","text":"form [formula] model description structure choice ~ | B | C, choice name dependent variable (choices), names alternative choice situation specific covariates coefficient constant across alternatives, B names choice situation specific covariates alternative specific coefficients, C names alternative choice situation specific covariates alternative specific coefficients. Multiple covariates (one type) separated + sign. default, alternative specific constants (ASCs) added model. can removed adding +0 second spot. ordered probit model (ordered = TRUE), formula object simple structure choice ~ . ASCs estimated. N [integer(1)] number decision makers. T [integer(1) | integer(N)] number choice occasions vector decider-specific choice occasions length N. J [integer(1)] number >= 2 choice alternatives. re [character() | NULL] Names covariates random effects. re = NULL (default), random effects. random effects ASCs, include \"ASC\" re. alternatives [character()] names choice alternatives. specified, choice set defined observed choices. ordered = TRUE, alternatives assumed specified alternatives ordered worst best. ordered [logical(1)] TRUE, choice set alternatives assumed ordered worst best. ranked [logical(1)] alternatives ranked? base [character(1)] name base alternative covariates alternative specific (.e. type 2 covariates ASCs). Ignored set NULL model alternative specific covariates (e.g. ordered probit model). default, base last element alternatives. covariates [list] named list covariate values. element must vector length equal number choice occasions named according covariate. Covariates values supplied drawn standard normal distribution. true_parameter [list] named list true parameter values alpha, C, s, b, Omega, Sigma, Sigma_full, beta, z, d simulation. See vignette model definition definitions variables.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/simulate_choices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate choice data — simulate_choices","text":"object class RprobitB_data.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/simulate_choices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate choice data — simulate_choices","text":"See vignette choice data details.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/reference/simulate_choices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate choice data — simulate_choices","text":"","code":"### simulate data from a binary probit model with two latent classes data <- simulate_choices(   form = choice ~ cost | income | time,   N = 100,   T = 10,   J = 2,   re = c(\"cost\", \"time\"),   alternatives = c(\"car\", \"bus\"),   true_parameter = list(     \"alpha\" = c(-1, 1),     \"b\" = matrix(c(-1, -1, -0.5, -1.5, 0, -1), ncol = 2),     \"C\" = 2   ) )  ### simulate data from an ordered probit model data <- simulate_choices(   form = opinion ~ age + gender,   N = 10,   T = 1:10,   J = 5,   alternatives = c(\"very bad\", \"bad\", \"indifferent\", \"good\", \"very good\"),   ordered = TRUE,   covariates = list(     \"gender\" = rep(sample(c(0, 1), 10, replace = TRUE), times = 1:10)   ) )  ### simulate data from a ranked probit model data <- simulate_choices(   form = product ~ price,   N = 10,   T = 1:10,   J = 3,   alternatives = c(\"A\", \"B\", \"C\"),   ranked = TRUE )"},{"path":"https://loelschlaeger.de/RprobitB/reference/sufficient_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute sufficient statistics — sufficient_statistics","title":"Compute sufficient statistics — sufficient_statistics","text":"function computes sufficient statistics RprobitB_data object Gibbs sampler save computation time.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/sufficient_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute sufficient statistics — sufficient_statistics","text":"","code":"sufficient_statistics(data, normalization)"},{"path":"https://loelschlaeger.de/RprobitB/reference/sufficient_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute sufficient statistics — sufficient_statistics","text":"data object class RprobitB_data. normalization object class RprobitB_normalization, can created via RprobitB_normalization.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/sufficient_statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute sufficient statistics — sufficient_statistics","text":"list sufficient statistics data Gibbs sampling, containing elements N, T, J, P_f P_r data, Tvec, vector choice occasions decider length N, csTvec, vector length N cumulated sums Tvec starting 0, W, list design matrices differenced respect alternative number normalization$level$level decider choice occasion covariates linked fixed coefficient (NA P_f = 0), X, list design matrices differenced respect alternative number normalization$level$level decider choice occasion covariates linked random coefficient (NA P_r = 0), y, matrix dimension N x max(Tvec) observed choices deciders rows choice occasions columns, decoded numeric values respect appearance data$alternatives, rows filled NA case unbalanced panel, WkW, matrix dimension P_f^2 x (J-1)^2, sum Kronecker products transposed element W , XkX, list length N, element constructed way WkW elements X separately decider, rdiff (ranked case ), list matrices reverse base differencing instead difference way resulting utility vector negative.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/train_choice.html","id":null,"dir":"Reference","previous_headings":"","what":"Stated Preferences for Train Traveling — train_choice","title":"Stated Preferences for Train Traveling — train_choice","text":"Data set 2929 stated choices 235 Dutch individuals deciding two virtual train trip options \"\" \"B\" based price, travel time, number rail--rail transfers (changes), level comfort. data obtained 1987 Hague Consulting Group National Dutch Railways. Prices recorded Dutch guilder data set transformed Euro exchange rate 2.20371 guilders = 1 Euro.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/train_choice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stated Preferences for Train Traveling — train_choice","text":"","code":"train_choice"},{"path":"https://loelschlaeger.de/RprobitB/reference/train_choice.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Stated Preferences for Train Traveling — train_choice","text":"data.frame 2929 rows 11 columns: deciderID integer identifier decider occasionID integer identifier choice occasion choice character chosen alternative (either \"\" \"B\") price_A numeric price alternative \"\" Euro time_A numeric travel time alternative \"\" hours change_A integer number changes alternative \"\" comfort_A integer comfort level (decreasing comfort order) alternative \"\" price_B numeric price alternative \"B\" Euro time_B numeric travel time alternative \"B\" hours change_B integer number changes alternative \"B\" comfort_B integer comfort level (decreasing comfort order) alternative \"B\"","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/train_choice.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stated Preferences for Train Traveling — train_choice","text":"Ben-Akiva M, Bolduc D, Bradley M (1993). “Estimation travel choice models randomly distributed values time.” Transportation Research Record, 1413. Meijer E, Rouwendal J (2006). “Measuring welfare effects models random coefficients.” Journal Applied Econometrics, 21(2).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/train_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Split choice data into train and test subset — train_test","title":"Split choice data into train and test subset — train_test","text":"function splits choice data train test part.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/train_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split choice data into train and test subset — train_test","text":"","code":"train_test(   x,   test_proportion = NULL,   test_number = NULL,   by = \"N\",   random = FALSE )"},{"path":"https://loelschlaeger.de/RprobitB/reference/train_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split choice data into train and test subset — train_test","text":"x object class RprobitB_data. test_proportion [numeric(1)] proportion test subset. test_number [integer(1)] number observations test subset. [character(1)] Either \"N\" (split deciders) \"T\" (split occasions). random [logical(1)] Build subsets randomly?","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/train_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split choice data into train and test subset — train_test","text":"list two objects class RprobitB_data, named \"train\" \"test\".","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/train_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split choice data into train and test subset — train_test","text":"","code":"### simulate choices for demonstration x <- simulate_choices(form = choice ~ covariate, N = 10, T = 10, J = 2)  ### 70% of deciders in the train subsample, ### 30% of deciders in the test subsample train_test(x, test_proportion = 0.3, by = \"N\") #> $train #> Simulated data of 70 choices. #>  #> $test #> Simulated data of 30 choices. #>   ### 2 randomly chosen choice occasions per decider in the test subsample, ### the rest in the train subsample train_test(x, test_number = 2, by = \"T\", random = TRUE) #> $train #> Simulated data of 80 choices. #>  #> $test #> Simulated data of 20 choices. #>"},{"path":"https://loelschlaeger.de/RprobitB/reference/transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform fitted probit model — transform.RprobitB_fit","title":"Transform fitted probit model — transform.RprobitB_fit","text":"Given object class RprobitB_fit, function can: change length B burn-period, change thinning factor Q Gibbs samples, change utility scale.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform fitted probit model — transform.RprobitB_fit","text":"","code":"# S3 method for class 'RprobitB_fit' transform(   `_data`,   B = NULL,   Q = NULL,   scale = NULL,   check_preference_flip = TRUE,   ... )"},{"path":"https://loelschlaeger.de/RprobitB/reference/transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform fitted probit model — transform.RprobitB_fit","text":"_data object class RprobitB_fit. B [integer(1)] length burn-period. Q [integer(1)] thinning factor Gibbs samples. scale [character(1)] character determines utility scale. form <parameter> := <value>, <parameter> either name fixed effect Sigma_<j>,<j> <j>th diagonal element Sigma, <value> value fixed parameter. check_preference_flip Set TRUE check flip preferences new scale. ... Currently used.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform fitted probit model — transform.RprobitB_fit","text":"transformed RprobitB_fit object.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/transform.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform fitted probit model — transform.RprobitB_fit","text":"See vignette \"Model fitting\" details: vignette(\"v03_model_fitting\", package = \"RprobitB\").","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/transform_gibbs_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Transformation of Gibbs samples — transform_gibbs_samples","title":"Transformation of Gibbs samples — transform_gibbs_samples","text":"function normalizes, burns thins Gibbs samples.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/transform_gibbs_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transformation of Gibbs samples — transform_gibbs_samples","text":"","code":"transform_gibbs_samples(gibbs_samples, R, B, Q, normalization)"},{"path":"https://loelschlaeger.de/RprobitB/reference/transform_gibbs_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transformation of Gibbs samples — transform_gibbs_samples","text":"gibbs_samples output gibbs_sampler, .e. list Gibbs samples Sigma, alpha (P_f>0), s, z, b, Omega (P_r>0). R [integer(1)] number iterations Gibbs sampler. B [integer(1)] length burn-period. Q [integer(1)] thinning factor Gibbs samples. normalization object class RprobitB_normalization, can created via RprobitB_normalization.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/transform_gibbs_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transformation of Gibbs samples — transform_gibbs_samples","text":"list, first element gibbs_sampes_raw input gibbs_samples, second element normalized, burned, thinned version gibbs_samples called gibbs_samples_nbt. list gets class RprobitB_gibbs_samples.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/transform_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Transformation of parameter values — transform_parameter","title":"Transformation of parameter values — transform_parameter","text":"function transforms parameter values based normalization.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/transform_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transformation of parameter values — transform_parameter","text":"","code":"transform_parameter(parameter, normalization, ordered = FALSE)"},{"path":"https://loelschlaeger.de/RprobitB/reference/transform_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transformation of parameter values — transform_parameter","text":"parameter object class RprobitB_parameter. normalization object class RprobitB_normalization. ordered [logical(1)] TRUE, choice set alternatives assumed ordered worst best.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/transform_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transformation of parameter values — transform_parameter","text":"object class RprobitB_parameter.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update.RprobitB_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Update and re-fit probit model — update.RprobitB_fit","title":"Update and re-fit probit model — update.RprobitB_fit","text":"function estimates nested probit model based given RprobitB_fit object.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update.RprobitB_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update and re-fit probit model — update.RprobitB_fit","text":"","code":"# S3 method for class 'RprobitB_fit' update(   object,   form,   re,   alternatives,   id,   idc,   standardize,   impute,   scale,   R,   B,   Q,   print_progress,   prior,   latent_classes,   ... )"},{"path":"https://loelschlaeger.de/RprobitB/reference/update.RprobitB_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update and re-fit probit model — update.RprobitB_fit","text":"object object class RprobitB_fit. form [formula] model description structure choice ~ | B | C, choice name dependent variable (choices), names alternative choice situation specific covariates coefficient constant across alternatives, B names choice situation specific covariates alternative specific coefficients, C names alternative choice situation specific covariates alternative specific coefficients. Multiple covariates (one type) separated + sign. default, alternative specific constants (ASCs) added model. can removed adding +0 second spot. ordered probit model (ordered = TRUE), formula object simple structure choice ~ . ASCs estimated. re [character() | NULL] Names covariates random effects. re = NULL (default), random effects. random effects ASCs, include \"ASC\" re. alternatives [character()] names choice alternatives. specified, choice set defined observed choices. ordered = TRUE, alternatives assumed specified alternatives ordered worst best. id [character(1)] name column choice_data contains unique identifier decision maker. idc [character(1)] name column choice_data contains unique identifier choice situation decision maker. default, identifier generated order appearance. standardize [character() | \"\"] Names covariates get standardized. Covariates type 1 3 addressed <covariate>_<alternative>. standardize = \"\", covariates get standardized. impute character specifies handle missing covariate entries choice_data, one : \"complete_cases\", removes rows containing missing covariate entries (default), \"zero\", replaces missing covariate entries zero (numeric columns), \"mean\", imputes missing covariate entries mean (numeric columns). scale [character(1)] character determines utility scale. form <parameter> := <value>, <parameter> either name fixed effect Sigma_<j>,<j> <j>th diagonal element Sigma, <value> value fixed parameter. R [integer(1)] number iterations Gibbs sampler. B [integer(1)] length burn-period. Q [integer(1)] thinning factor Gibbs samples. print_progress [logical(1)] Print Gibbs sampler progress? prior [list] named list parameters prior distributions. See documentation check_prior details parameters can specified. latent_classes [list() | NULL] Optionally parameters specifying number latent classes updating scheme. values brackets default. C (1): fixed number (greater equal 1) (initial) classes. wb_update (FALSE): Set TRUE weight-based class updates. dp_update (FALSE): Set TRUE Dirichlet process class updates. Cmax (10): maximum number latent classes. following specifications used weight-based updating scheme: buffer (50): number iterations wait next update. epsmin (0.01): threshold weight removing latent class. epsmax (0.7): threshold weight splitting latent class. deltamin (0.1): minimum mean distance merging two classes. deltashift (0.5): scale shifting class means split. ... Currently used.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update.RprobitB_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update and re-fit probit model — update.RprobitB_fit","text":"object class RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update.RprobitB_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update and re-fit probit model — update.RprobitB_fit","text":"parameters (except object) optional specified retrieved specification object.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Omega.html","id":null,"dir":"Reference","previous_headings":"","what":"Update class covariances — update_Omega","title":"Update class covariances — update_Omega","text":"Update class covariances","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Omega.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update class covariances — update_Omega","text":"","code":"update_Omega(beta, b, z, m, n_Omega_0, V_Omega_0)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Omega.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update class covariances — update_Omega","text":"beta [matrix(nrow = P_r, ncol = N)] matrix decider-specific coefficient vectors. b [matrix(nrow = P_r, ncol = C)] matrix class means columns. z [numeric(N)] decider class allocations. m [numeric(C)] vector current class frequencies. n_Omega_0 [integer(1)] degrees freedom Inverse Wishart prior Omega_c. V_Omega_0 [matrix(P_r, P_r)] scale matrix Inverse Wishart prior Omega_c.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Omega.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update class covariances — update_Omega","text":"matrix updated covariance matrices class columns.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Omega.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update class covariances — update_Omega","text":"","code":"N <- 100 b <- cbind(c(0, 0), c(1, 1)) Omega <- matrix(c(1, 0.3, 0.3, 0.5, 1, -0.3, -0.3, 0.8), ncol = 2) z <- c(rep(1, N / 2), rep(2, N / 2)) m <- as.numeric(table(z)) beta <- sapply(   z, function(z) oeli::rmvnorm(n = 1, b[, z], matrix(Omega[, z], 2, 2)) ) update_Omega(   beta = beta, b = b, z = z, m = m,   n_Omega_0 = 4, V_Omega_0 = diag(2) ) #>            [,1]       [,2] #> [1,] 0.84055535  1.0005869 #> [2,] 0.07520765 -0.6248856 #> [3,] 0.07520765 -0.6248856 #> [4,] 0.33410723  0.9020809"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Omega_c.html","id":null,"dir":"Reference","previous_headings":"","what":"Update covariance of a single class — update_Omega_c","title":"Update covariance of a single class — update_Omega_c","text":"Update covariance single class","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Omega_c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update covariance of a single class — update_Omega_c","text":"","code":"update_Omega_c(S_c, m_c, n_Omega_0, V_Omega_0)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Omega_c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update covariance of a single class — update_Omega_c","text":"S_c [matrix(P_r, P_r)] scatter matrix class. m_c [integer(1)] number observations class. n_Omega_0 [integer(1)] degrees freedom Inverse Wishart prior Omega_c. V_Omega_0 [matrix(P_r, P_r)] scale matrix Inverse Wishart prior Omega_c.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Omega_c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update covariance of a single class — update_Omega_c","text":"update Omega_c.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Omega_c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update covariance of a single class — update_Omega_c","text":"","code":"update_Omega_c(S_c = diag(2), m_c = 10, n_Omega_0 = 4, V_Omega_0 = diag(2)) #>             [,1]        [,2] #> [1,] 0.323202252 0.005142021 #> [2,] 0.005142021 0.288210551"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Sigma.html","id":null,"dir":"Reference","previous_headings":"","what":"Update error covariance matrix — update_Sigma","title":"Update error covariance matrix — update_Sigma","text":"Update error covariance matrix","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Sigma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update error covariance matrix — update_Sigma","text":"","code":"update_Sigma(n_Sigma_0, V_Sigma_0, N, S)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Sigma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update error covariance matrix — update_Sigma","text":"n_Sigma_0 [integer(1)] degrees freedom Inverse Wishart prior Sigma. V_Sigma_0 [matrix(J - 1, J - 1)] scale matrix Inverse Wishart prior Sigma. N [integer(1)] sample size. S [matrix(J - 1, J - 1)] sum outer products residuals \\((\\epsilon_n)_{n = 1, \\dots, N}\\).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Sigma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update error covariance matrix — update_Sigma","text":"update Sigma.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Sigma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update error covariance matrix — update_Sigma","text":"","code":"(Sigma_true <- matrix(c(1, 0.5, 0.2, 0.5, 1, 0.2, 0.2, 0.2, 2), ncol = 3)) #>      [,1] [,2] [,3] #> [1,]  1.0  0.5  0.2 #> [2,]  0.5  1.0  0.2 #> [3,]  0.2  0.2  2.0 beta <- matrix(c(-1, 1), ncol = 1) N <- 100 X <- replicate(N, matrix(rnorm(6), ncol = 2), simplify = FALSE) eps <- replicate(   N, oeli::rmvnorm(n = 1, mean = c(0, 0, 0), Sigma = Sigma_true),   simplify = FALSE ) U <- mapply(function(X, eps) X %*% beta + eps, X, eps, SIMPLIFY = FALSE) n_Sigma_0 <- 4 V_Sigma_0 <- diag(3) outer_prod <- function(X, U) (U - X %*% beta) %*% t(U - X %*% beta) S <- Reduce(`+`, mapply(   function(X, U) (U - X %*% beta) %*% t(U - X %*% beta), X, U,   SIMPLIFY = FALSE )) Sigma_draws <- replicate(100, update_Sigma(n_Sigma_0, V_Sigma_0, N, S)) apply(Sigma_draws, 1:2, mean) #>           [,1]     [,2]      [,3] #> [1,] 1.0931620 0.549406 0.0436286 #> [2,] 0.5494060 1.132334 0.3403440 #> [3,] 0.0436286 0.340344 2.4259594"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U.html","id":null,"dir":"Reference","previous_headings":"","what":"Update utility vector — update_U","title":"Update utility vector — update_U","text":"Update utility vector","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update utility vector — update_U","text":"","code":"update_U(U, y, sys, Sigma_inv)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update utility vector — update_U","text":"U [numeric(J - 1)] current utility vector. y [integer(1)] index chosen alternative, 1 J. sys [numeric(J - 1)] systematic utility. Sigma_inv [matrix(J - 1, J - 1)] inverted error covariance matrix.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update utility vector — update_U","text":"update (single) U.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update utility vector — update_U","text":"","code":"U <- sys <- c(0, 0, 0) Sigma_inv <- diag(3) lapply(1:4, function(y) update_U(U, y, sys, Sigma_inv)) #> [[1]] #>             [,1] #> [1,]  0.04103214 #> [2,] -2.00688474 #> [3,] -0.27267550 #>  #> [[2]] #>            [,1] #> [1,] -0.1171715 #> [2,]  0.1128788 #> [3,] -1.6196667 #>  #> [[3]] #>           [,1] #> [1,] -1.489569 #> [2,] -1.009613 #> [3,]  1.692941 #>  #> [[4]] #>            [,1] #> [1,] -0.4423781 #> [2,] -1.8218303 #> [3,] -0.5895430 #>"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U_ranked.html","id":null,"dir":"Reference","previous_headings":"","what":"Update ranked utility vector — update_U_ranked","title":"Update ranked utility vector — update_U_ranked","text":"Update ranked utility vector","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U_ranked.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update ranked utility vector — update_U_ranked","text":"","code":"update_U_ranked(U, sys, Sigma_inv)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U_ranked.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update ranked utility vector — update_U_ranked","text":"U [numeric(J - 1)] current utility vector. sys [numeric(J - 1)] systematic utility. Sigma_inv [matrix(J - 1, J - 1)] inverted error covariance matrix.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U_ranked.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update ranked utility vector — update_U_ranked","text":"update (single) ranked U.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U_ranked.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update ranked utility vector — update_U_ranked","text":"","code":"U <- sys <- c(0, 0) Sigma_inv <- diag(2) update_U_ranked(U, sys, Sigma_inv) #>            [,1] #> [1,] -0.6929013 #> [2,] -0.1008980"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_b.html","id":null,"dir":"Reference","previous_headings":"","what":"Update class means — update_b","title":"Update class means — update_b","text":"Update class means","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_b.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update class means — update_b","text":"","code":"update_b(beta, Omega, z, m, Sigma_b_0_inv, mu_b_0)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_b.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update class means — update_b","text":"beta [matrix(nrow = P_r, ncol = N)] matrix decider-specific coefficient vectors. Omega [matrix(nrow = P_r * P_r, ncol = C)] matrix vectorized class covariance matrices columns. z [numeric(N)] decider class allocations. m [numeric(C)] vector current class frequencies. Sigma_b_0_inv [matrix(P_r, P_r)] prior precision class mean. mu_b_0 [numeric(P_r)] mean vector normal prior b_c.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_b.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update class means — update_b","text":"matrix updated means class columns.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_b.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update class means — update_b","text":"","code":"N <- 100 b <- cbind(c(0, 0), c(1, 1)) Omega <- matrix(c(1, 0.3, 0.3, 0.5, 1, -0.3, -0.3, 0.8), ncol = 2) z <- c(rep(1, N / 2), rep(2, N / 2)) m <- as.numeric(table(z)) beta <- sapply(   z, function(z) oeli::rmvnorm(n = 1, b[, z], matrix(Omega[, z], 2, 2)) ) update_b(   beta = beta, Omega = Omega, z = z, m = m,   Sigma_b_0_inv = diag(2), mu_b_0 = c(0, 0) ) #>            [,1]     [,2] #> [1,]  0.0401460 1.125959 #> [2,] -0.1740866 1.032935"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_b_c.html","id":null,"dir":"Reference","previous_headings":"","what":"Update mean of a single class — update_b_c","title":"Update mean of a single class — update_b_c","text":"Update mean single class","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_b_c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update mean of a single class — update_b_c","text":"","code":"update_b_c(bar_b_c, Omega_c, m_c, Sigma_b_0_inv, mu_b_0)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_b_c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update mean of a single class — update_b_c","text":"bar_b_c [numeric(P_r)] average observation class. Omega_c [matrix(P_r, P_r)] class covariance matrix. m_c [integer(1)] number observations class. Sigma_b_0_inv [matrix(P_r, P_r)] prior precision class mean. mu_b_0 [numeric(P_r)] mean vector normal prior b_c.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_b_c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update mean of a single class — update_b_c","text":"update b_c.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_b_c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update mean of a single class — update_b_c","text":"","code":"update_b_c(   bar_b_c = c(0, 0), Omega_c = diag(2), m_c = 10,   Sigma_b_0_inv = diag(2), mu_b_0 = c(0, 0) ) #>              [,1] #> [1,] -0.001739373 #> [2,]  0.008545417"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_dp.html","id":null,"dir":"Reference","previous_headings":"","what":"Dirichlet process class updates — update_classes_dp","title":"Dirichlet process class updates — update_classes_dp","text":"Dirichlet process class updates","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_dp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dirichlet process class updates — update_classes_dp","text":"","code":"update_classes_dp(   beta,   z,   b,   Omega,   delta,   mu_b_0,   Sigma_b_0,   n_Omega_0,   V_Omega_0,   identify_classes = FALSE,   Cmax = 10L )"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_dp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dirichlet process class updates — update_classes_dp","text":"beta [matrix(nrow = P_r, ncol = N)] matrix decider-specific coefficient vectors. z [numeric(N)] decider class allocations. b [matrix(nrow = P_r, ncol = C)] matrix class means columns. Omega [matrix(nrow = P_r * P_r, ncol = C)] matrix vectorized class covariance matrices columns. delta [numeric(1)] prior concentration s. mu_b_0 [numeric(P_r)] mean vector normal prior b_c. Sigma_b_0 [matrix(P_r, P_r)] covariance matrix normal prior b_c. n_Omega_0 [integer(1)] degrees freedom Inverse Wishart prior Omega_c. V_Omega_0 [matrix(P_r, P_r)] scale matrix Inverse Wishart prior Omega_c. identify_classes [logical(1)] Identify classes decreasing class weights? Cmax [integer(1)] maximum number classes, used allocate space.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_dp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dirichlet process class updates — update_classes_dp","text":"list updated values z, b, Omega, C.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_dp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dirichlet process class updates — update_classes_dp","text":"","code":"set.seed(1) z <- c(rep(1, 10),rep(2, 10)) b <- matrix(c(5, 5, 5, -5), ncol = 2) Omega <- matrix(c(1, 0.3, 0.3, 0.5, 1, -0.3, -0.3, 0.8), ncol = 2) beta <- sapply(   z, function(z) oeli::rmvnorm(n = 1, b[, z], matrix(Omega[, z], 2, 2)) ) beta[, 1] <- c(-10, 10) update_classes_dp(   beta = beta, z = z, b = b, Omega = Omega,   delta = 1, mu_b_0 = numeric(2), Sigma_b_0 = diag(2),   n_Omega_0 = 4, V_Omega_0 = diag(2) ) #> $z #>       [,1] #>  [1,]    3 #>  [2,]    1 #>  [3,]    1 #>  [4,]    1 #>  [5,]    1 #>  [6,]    1 #>  [7,]    1 #>  [8,]    1 #>  [9,]    1 #> [10,]    1 #> [11,]    2 #> [12,]    2 #> [13,]    2 #> [14,]    2 #> [15,]    2 #> [16,]    2 #> [17,]    2 #> [18,]    2 #> [19,]    2 #> [20,]    2 #>  #> $b #>          [,1]      [,2]      [,3] #> [1,] 4.271368  4.411489 -9.010132 #> [2,] 4.705080 -4.386000  6.669987 #>  #> $Omega #>          [,1]       [,2]       [,3] #> [1,] 2.318979  1.3721770  0.7757253 #> [2,] 1.007656 -0.4716889 -1.9847570 #> [3,] 1.007656 -0.4716889 -1.9847570 #> [4,] 1.079144  0.5840789  7.4273879 #>  #> $C #> [1] 3 #>"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_wb.html","id":null,"dir":"Reference","previous_headings":"","what":"Weight-based class updates — update_classes_wb","title":"Weight-based class updates — update_classes_wb","text":"Weight-based class updates","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_wb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weight-based class updates — update_classes_wb","text":"","code":"update_classes_wb(   s,   b,   Omega,   epsmin = 0.01,   epsmax = 0.7,   deltamin = 0.1,   deltashift = 0.5,   identify_classes = FALSE,   Cmax = 10L )"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_wb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weight-based class updates — update_classes_wb","text":"s [numeric(C)] vector class weights. b [matrix(nrow = P_r, ncol = C)] matrix class means columns. Omega [matrix(nrow = P_r * P_r, ncol = C)] matrix vectorized class covariance matrices columns. epsmin [numeric(1)] threshold weight removing class. epsmax [numeric(1)] threshold weight splitting class. deltamin [numeric(1)] threshold difference class means joining two classes. deltashift [numeric(1)] scale shifting class means split. identify_classes [logical(1)] Identify classes decreasing class weights? Cmax [integer(1)] maximum number classes, used allocate space.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_wb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weight-based class updates — update_classes_wb","text":"list updated values s, b, Omega indicator update_type signals type class update: 0: update 1: removed class 2: split class 3: merged classes","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_wb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weight-based class updates — update_classes_wb","text":"following updating rules apply: Class \\(c\\) removed \\(s_c < \\epsilon_{min}\\). Class \\(c\\) split two classes, \\(s_c > \\epsilon_{max}\\). Two classes \\(c_1\\) \\(c_2\\) merged one class, \\(||b_{c_1} - b_{c_2}|| < \\delta_{min}\\).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_wb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weight-based class updates — update_classes_wb","text":"","code":"s <- c(0.7, 0.3) b <- matrix(c(1, 1, 1, -1), ncol = 2) Omega <- matrix(c(0.5, 0.3, 0.3, 0.5, 1, -0.1, -0.1, 0.8), ncol = 2)  ### no update update_classes_wb(s = s, b = b, Omega = Omega) #> $s #> [1] 0.7 0.3 #>  #> $b #>      [,1] [,2] #> [1,]    1    1 #> [2,]    1   -1 #>  #> $Omega #>      [,1] [,2] #> [1,]  0.5  1.0 #> [2,]  0.3 -0.1 #> [3,]  0.3 -0.1 #> [4,]  0.5  0.8 #>  #> $update_type #> [1] 0 #>   ### remove class 2 update_classes_wb(s = s, b = b, Omega = Omega, epsmin = 0.31) #> $s #> [1] 1 #>  #> $b #>      [,1] #> [1,]    1 #> [2,]    1 #>  #> $Omega #>      [,1] #> [1,]  0.5 #> [2,]  0.3 #> [3,]  0.3 #> [4,]  0.5 #>  #> $update_type #> [1] 1 #>   ### split class 1 update_classes_wb(s = s, b = b, Omega = Omega, epsmax = 0.69) #> $s #> [1] 0.35 0.35 0.30 #>  #> $b #>          [,1]      [,2] [,3] #> [1,] 1.316228 0.6837722    1 #> [2,] 1.316228 0.6837722   -1 #>  #> $Omega #>      [,1] [,2] [,3] #> [1,]  0.5  0.5  1.0 #> [2,]  0.3  0.3 -0.1 #> [3,]  0.3  0.3 -0.1 #> [4,]  0.5  0.5  0.8 #>  #> $update_type #> [1] 2 #>   ### merge classes 1 and 2 update_classes_wb(s = s, b = b, Omega = Omega, deltamin = 3) #> $s #> [1] 1 #>  #> $b #>      [,1] #> [1,]    1 #> [2,]    0 #>  #> $Omega #>      [,1] #> [1,] 0.75 #> [2,] 0.10 #> [3,] 0.10 #> [4,] 0.65 #>  #> $update_type #> [1] 3 #>"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_coefficient.html","id":null,"dir":"Reference","previous_headings":"","what":"Update coefficient vector — update_coefficient","title":"Update coefficient vector — update_coefficient","text":"Update coefficient vector","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_coefficient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update coefficient vector — update_coefficient","text":"","code":"update_coefficient(mu_beta_0, Sigma_beta_0_inv, XSigX, XSigU)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_coefficient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update coefficient vector — update_coefficient","text":"mu_beta_0 [numeric(P)] prior mean coefficient vector, Sigma_beta_0_inv [matrix(P, P)] prior precision coefficient vector. XSigX [matrix(P, P)] matrix \\(\\sum_{n=1}^N X_n'\\Sigma^{-1}X_n\\). XSigU [numeric(P)] vector \\(\\sum_{n=1}^N X_n'\\Sigma^{-1}U_n\\).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_coefficient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update coefficient vector — update_coefficient","text":"update coefficient vector.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_coefficient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update coefficient vector — update_coefficient","text":"","code":"beta_true <- matrix(c(-1, 1), ncol = 1) Sigma <- matrix(c(1, 0.5, 0.2, 0.5, 1, 0.2, 0.2, 0.2, 2), ncol = 3) N <- 100 X <- replicate(N, matrix(rnorm(6), ncol = 2), simplify = FALSE) eps <- replicate(   N, oeli::rmvnorm(n = 1, mean = c(0, 0, 0), Sigma = Sigma),   simplify = FALSE ) U <- mapply(   function(X, eps) X %*% beta_true + eps, X, eps, SIMPLIFY = FALSE ) mu_beta_0 <- c(0, 0) Sigma_beta_0_inv <- diag(2) XSigX <- Reduce(   `+`, lapply(X, function(X) t(X) %*% solve(Sigma) %*% X) ) XSigU <- Reduce(   `+`, mapply(function(X, U) t(X) %*% solve(Sigma) %*% U, X, U,   SIMPLIFY = FALSE) ) R <- 10 beta_draws <- replicate(   R, update_coefficient(mu_beta_0, Sigma_beta_0_inv, XSigX, XSigU),   simplify = TRUE ) rowMeans(beta_draws) #> [1] -0.8986910  0.9530168"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_d.html","id":null,"dir":"Reference","previous_headings":"","what":"Update utility threshold increments — update_d","title":"Update utility threshold increments — update_d","text":"Update utility threshold increments","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update utility threshold increments — update_d","text":"","code":"update_d(d, y, sys, ll, mu_d_0, Sigma_d_0, Tvec, step_scale = 0.1)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update utility threshold increments — update_d","text":"d [numeric(J - 2)] Threshold increments. y [matrix(nrow = N, ncol = max(Tvec))] Choices 1,...,J decider choice occasion. sys [matrix(nrow = N, ncol = max(Tvec))] Systematic utilties decider choice occasion. ll [numeric(1)] Current log-likelihood value. mu_d_0 [numeric(J - 2)] mean vector normal prior d . Sigma_d_0 [matrix(J - 2, J - 2)] covariance matrix normal prior d. Tvec [integer(N)] Number choice occasions per decider. step_scale [numeric(1)] Scaling variance Gaussian proposal.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update utility threshold increments — update_d","text":"update d.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update utility threshold increments — update_d","text":"","code":"set.seed(1) N <- 1000 d_true <- rnorm(2) gamma <- c(-Inf, 0, cumsum(exp(d_true)), Inf) X <- matrix(rnorm(N * 2L), ncol = 2L) beta <- c(0.8, -0.5) mu <- matrix(as.vector(X %*% beta), ncol = 1L) U <- rnorm(N, mean = mu[, 1], sd = 1) yvec <- as.integer(cut(U, breaks = gamma, labels = FALSE)) y <- matrix(yvec, ncol = 1L) Tvec <- rep(1, N) mu_d_0 <- c(0, 0) Sigma_d_0 <- diag(2) * 5 d <- rnorm(2) ll <- -Inf R <- 1000 for (iter in seq_len(R)) {   ans <- update_d(     d = d, y = y, sys = mu, ll = ll, mu_d_0 = mu_d_0, Sigma_d_0 = Sigma_d_0,     Tvec = Tvec   )   d  <- ans$d   ll <- ans$ll } cbind(\"true\" = d_true, \"sample\" = d) |> round(2) #>       true       #> [1,] -0.63 -0.83 #> [2,]  0.18  0.17"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_m.html","id":null,"dir":"Reference","previous_headings":"","what":"Update class sizes — update_m","title":"Update class sizes — update_m","text":"Update class sizes","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_m.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update class sizes — update_m","text":"","code":"update_m(C, z, non_zero = FALSE)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_m.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update class sizes — update_m","text":"C [integer(1)] number (greater equal 1) latent classes decision makers. z [numeric(N)] decider class allocations. non_zero [logical(1)] Enforce strictly positive values m (numerical stability)?","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_m.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update class sizes — update_m","text":"update m.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_m.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update class sizes — update_m","text":"","code":"update_m(C = 4, z = c(1, 1, 1, 2, 2, 3)) #>      [,1] #> [1,]    3 #> [2,]    2 #> [3,]    1 #> [4,]    0"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_s.html","id":null,"dir":"Reference","previous_headings":"","what":"Update class weight vector — update_s","title":"Update class weight vector — update_s","text":"Update class weight vector","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_s.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update class weight vector — update_s","text":"","code":"update_s(delta, m)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_s.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update class weight vector — update_s","text":"delta [numeric(1)] prior concentration s. m [numeric(C)] vector current class frequencies.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_s.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update class weight vector — update_s","text":"update s.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_s.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update class weight vector — update_s","text":"","code":"update_s(delta = 1, m = 4:1) #>           [,1] #> [1,] 0.3383681 #> [2,] 0.1278070 #> [3,] 0.2574974 #> [4,] 0.2763275"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_z.html","id":null,"dir":"Reference","previous_headings":"","what":"Update class allocation vector — update_z","title":"Update class allocation vector — update_z","text":"Update class allocation vector","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update class allocation vector — update_z","text":"","code":"update_z(s, beta, b, Omega)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update class allocation vector — update_z","text":"s [numeric(C)] vector class weights. beta [matrix(nrow = P_r, ncol = N)] matrix decider-specific coefficient vectors. b [matrix(nrow = P_r, ncol = C)] matrix class means columns. Omega [matrix(nrow = P_r * P_r, ncol = C)] matrix vectorized class covariance matrices columns.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_z.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update class allocation vector — update_z","text":"update z.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_z.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update class allocation vector — update_z","text":"","code":"update_z(   s = c(0.6, 0.4), beta = matrix(c(-2, 0, 2), ncol = 3),   b = cbind(0, 1), Omega = cbind(1, 1) ) #>      [,1] #> [1,]    1 #> [2,]    2 #> [3,]    2"},{"path":"https://loelschlaeger.de/RprobitB/news/index.html","id":"rprobitb-120","dir":"Changelog","previous_headings":"","what":"RprobitB 1.2.0","title":"RprobitB 1.2.0","text":"Fix npar.RprobitB_fit(). Parameters covariance matrices mixing distributions miscounted. Fix sufficient_statistics(). bug calculating sufficient statistics ordered case. Added function mode_approx() approximate conditional posterior modes. Documentation improvements.","code":""},{"path":"https://loelschlaeger.de/RprobitB/news/index.html","id":"rprobitb-114","dir":"Changelog","previous_headings":"","what":"RprobitB 1.1.4","title":"RprobitB 1.1.4","text":"CRAN release: 2024-02-26 Small fixes documentation improvements.","code":""},{"path":"https://loelschlaeger.de/RprobitB/news/index.html","id":"rprobitb-113","dir":"Changelog","previous_headings":"","what":"RprobitB 1.1.3","title":"RprobitB 1.1.3","text":"CRAN release: 2024-02-08 Small fixes. Added train_choice data set.","code":""},{"path":"https://loelschlaeger.de/RprobitB/news/index.html","id":"rprobitb-112","dir":"Changelog","previous_headings":"","what":"RprobitB 1.1.2","title":"RprobitB 1.1.2","text":"CRAN release: 2022-11-06 logLik() method now returns logLik object can passed AIC() BIC() methods {stats}. Small bug fixes ordered probit model case.","code":""},{"path":"https://loelschlaeger.de/RprobitB/news/index.html","id":"rprobitb-111","dir":"Changelog","previous_headings":"","what":"RprobitB 1.1.1","title":"RprobitB 1.1.1","text":"CRAN release: 2022-08-11 Small documentation fixes.","code":""},{"path":"https://loelschlaeger.de/RprobitB/news/index.html","id":"rprobitb-110","dir":"Changelog","previous_headings":"","what":"RprobitB 1.1.0","title":"RprobitB 1.1.0","text":"CRAN release: 2022-07-22","code":""},{"path":"https://loelschlaeger.de/RprobitB/news/index.html","id":"new-functionality-1-1-0","dir":"Changelog","previous_headings":"","what":"New functionality","title":"RprobitB 1.1.0","text":"Ranked probit models Ordered probit models","code":""},{"path":"https://loelschlaeger.de/RprobitB/news/index.html","id":"updated-functionality-1-1-0","dir":"Changelog","previous_headings":"","what":"Updated functionality","title":"RprobitB 1.1.0","text":"Print method RprobitB_parameter. Splitting data set train test part can now done function train_test(). Consequently, argument test_prob removed prepare_data() simulate_choices(). function simulate_choices() argument distr anymore. Instead, covariates can supplied via covariates argument. Consequently, argument standardize removed well. Simplified specifying utility scale, see help page RprobitB_normalization().","code":""},{"path":"https://loelschlaeger.de/RprobitB/news/index.html","id":"renamed-functions-1-1-0","dir":"Changelog","previous_headings":"","what":"Renamed functions","title":"RprobitB 1.1.0","text":"function compare now called model_selection(). function prepare now called prepare_data(). function simulate now called simulate_choices() mask stats::simulate(). function mcmc now called fit_model(). function choice_probs now called choice_probabilities().","code":""},{"path":"https://loelschlaeger.de/RprobitB/news/index.html","id":"rprobitb-100","dir":"Changelog","previous_headings":"","what":"RprobitB 1.0.0","title":"RprobitB 1.0.0","text":"CRAN release: 2021-11-12 Integrated S3 classes methods. Several new functionalities.","code":""},{"path":"https://loelschlaeger.de/RprobitB/news/index.html","id":"rprobitb-010","dir":"Changelog","previous_headings":"","what":"RprobitB 0.1.0","title":"RprobitB 0.1.0","text":"CRAN release: 2021-05-15 Initial version.","code":""}]
