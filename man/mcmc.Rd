% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcmc.R
\name{mcmc}
\alias{mcmc}
\title{Probit model fitting via Markov chain Monte Carlo simulation.}
\usage{
mcmc(
  data,
  scale = list(parameter = "s", index = 1, value = 1),
  R = 10000,
  B = R/2,
  Q = 1,
  print_progress = TRUE,
  prior = NULL,
  latent_classes = NULL,
  seed = NULL
)
}
\arguments{
\item{data}{An object of class \code{RprobitB_data}.}

\item{scale}{A named list of three elements, determining the parameter normalization with
respect to the utility scale:
\itemize{
\item \code{parameter}:
Either \code{"a"} (for a linear coefficient of \code{"alpha"}) or
\code{"s"} (for a variance of the error-term covariance matrix
\code{"Sigma"}).
\item \code{index}:
The index of the parameter that gets fixed.
\item \code{value}:
The value for the fixed parameter.
}}

\item{R}{The number of iterations of the Gibbs sampler.}

\item{B}{The length of the burn-in period, i.e. a non-negative number of samples to
be discarded.}

\item{Q}{The thinning factor for the Gibbs samples, i.e. only every \code{Q}th
sample is kept.}

\item{print_progress}{A boolean, determining whether to print the Gibbs sampler progress and the
estimated remaining computation time.}

\item{prior}{A named list of parameters for the prior distributions. See the documentation
of \code{\link{check_prior}} for details about which parameters can be specified.}

\item{latent_classes}{Either \code{NULL} (for no latent classes) or a list of parameters specifying
the number of latent classes and their updating scheme:
\itemize{
\item \code{C}: The fixed number (greater or equal 1) of latent classes,
which is set to 1 per default. If either \code{weight_update = TRUE}
or \code{dp_update = TRUE} (i.e. if classes are updated), \code{C}
equals the initial number of latent classes.
\item \code{weight_update}: A boolean, set to \code{TRUE} to weight-based
update the latent classes. See ... for details.
\item \code{dp_update}: A boolean, set to \code{TRUE} to update the latent
classes based on a Dirichlet process. See ... for details.
\item \code{Cmax}: The maximum number of latent classes.
\item \code{buffer}: The number of iterations to wait before a next
weight-based update of the latent classes.
\item \code{epsmin}: The threshold weight (between 0 and 1) for removing
a latent class in the weight-based updating scheme.
\item \code{epsmax}: The threshold weight (between 0 and 1) for splitting
a latent class in the weight-based updating scheme.
\item \code{distmin}: The (non-negative) threshold difference in class means
for joining two latent classes in the weight-based updating scheme.
}}

\item{seed}{Set a seed for the Gibbs sampling.}
}
\value{
An object of class \code{RprobitB_fit}.
}
\description{
This function performs Markov chain Monte Carlo simulation for fitting a
(latent class) (mixed) (multinomial) probit model to discrete choice data.
}
\details{
See the vignette "Model fitting" for more details:
\code{vignette("model_fitting", package = "RprobitB")}.
}
\examples{
\dontrun{
### probit model
p <- simulate_choices(form = choice ~ var | 0, N = 100, T = 10, J = 2, seed = 1)
m1 <- mcmc(data = p, seed = 1)

### multinomial probit model
mnp <- simulate_choices(form = choice ~ var | 0, N = 100, T = 10, J = 3, seed = 1)
m2 <- mcmc(data = mnp, seed = 1)

### mixed multinomial probit model
mmnp <- simulate_choices(
  form = choice ~ 0 | var, N = 100, T = 10, J = 3, re = "var",
  seed = 1
)
m3 <- mcmc(data = mmnp, seed = 1)

### mixed multinomial probit model with 2 latent classes
lcmmnp <- simulate_choices(
  form = choice ~ 0 | var, N = 100, T = 10, J = 3,
  re = "var", seed = 1, C = 2
)
m4 <- mcmc(data = lcmmnp, latent_classes = list("C" = 2), seed = 1)

### update of latent classes
m5 <- simulate_choices(data = lcmmnp, latent_classes = list("update" = TRUE), seed = 1)
}

}
