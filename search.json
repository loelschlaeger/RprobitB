[{"path":"https://loelschlaeger.de/RprobitB/TODO.html","id":null,"dir":"","previous_headings":"","what":"RprobitB TODOs","title":"RprobitB TODOs","text":"following tasks agenda tackled time permits.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/TODO.html","id":"gibbs-sampler","dir":"","previous_headings":"Functionality","what":"Gibbs sampler","title":"RprobitB TODOs","text":"Use transform() keep Gibbs sampling, .e. change R. Show average covariates classes classification via classification().","code":""},{"path":"https://loelschlaeger.de/RprobitB/TODO.html","id":"data","dir":"","previous_headings":"Functionality","what":"Data","title":"RprobitB TODOs","text":"Variable choice set.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/TODO.html","id":"demos","dir":"","previous_headings":"Referencesd","what":"Demos","title":"RprobitB TODOs","text":"rpb() demonstration console feedback (Shiny app).","code":""},{"path":"https://loelschlaeger.de/RprobitB/TODO.html","id":"function-documentation","dir":"","previous_headings":"Referencesd","what":"Function documentation","title":"RprobitB TODOs","text":"Document Dirichlet Process update_classes_dp().","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/RprobitB.html","id":"why-should-i-use-this-package","dir":"Articles","previous_headings":"","what":"Why should I use this package?","title":"Introduction","text":"{RprobitB}1, can model choices made deciders among discrete set alternatives. example, think tourists want book flight holiday destination. knowledge prefer certain route another great value airlines, especially customer’s willingness pay say faster comfortable flight alternative. Different deciders value different choice attributes differently. example, imaginable business people place higher value flight time willing pay faster route alternative vacationers. choice behavior heterogeneity can addressed {RprobitB}. Furthermore, package enables identify groups deciders share similar preferences. package enables prediction choice behavior certain choice attributes change, example proportion customers choose competitor’s product event price increase. {RprobitB} can analyze binary, multivariate, ordered, ranked choices, cross-sectional panel setting.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/RprobitB.html","id":"how-can-i-use-this-package","dir":"Articles","previous_headings":"","what":"How can I use this package?","title":"Introduction","text":"Working {RprobitB} follows clear workflow. main functions can grouped ones data management, model fitting, model evaluation, see flowchart . package can used two different purposes: () estimation model given data (b) estimation model simulated data. Simulation typically serves assess properties estimation algorithms either research bootstrap like fashion. typical workflow follows: Prepare choice data set via prepare_data() function simulate data via simulate_choices(). functions return RprobitB_data object can fed estimation routine. train_test() allows split data estimation validation part. See vignette choice data details. estimation routine called fit_model() returns RprobitB_fit object. transform_fit() function allows change normalization model model fitted. details documented vignettes model fitting modeling heterogeneity. RprobitB_fit object can fed coef() show covariate effects choices predict() compute choice probabilities forecast choice behavior choice characteristics change, see vignette choice prediction. classification() function allows preference-based decider classification. function model_selection() compares arbitrary many competing RprobitB_fit objects computing different model selection criteria, see vignette model selection. flowchart {RprobitB}.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v01_model_definition.html","id":"the-probit-model","dir":"Articles","previous_headings":"","what":"The probit model","title":"Model definition","text":"probit model1 regression-type model dependent variable takes finite number values error term normally distributed (Agresti 2015). purpose estimate probability dependent variable takes certain, discrete value. common application discrete choice scenarios. dependent variable one finitely many mutually exclusive alternatives, explanatory variables typically characteristics deciders alternatives. concrete, assume possess data \\(N\\) decision makers choose \\(J \\geq 2\\) alternatives2 \\(T\\) choice occasions3. Specific decision maker, alternative choice occasion, furthermore observe \\(P\\) choice attributes use explain choices. continuous choice attributes linked directly discrete choices must take detour latent variable. discrete choice setting, variable can interpreted decider’s utility certain alternative. Decider \\(n\\)’s utility \\(U_{ntj}\\) alternative \\(j\\) choice occasion \\(t\\) modeled \\[\\begin{equation}   U_{ntj} = X_{ntj}'\\beta + \\epsilon_{ntj} \\end{equation}\\] \\(n=1,\\dots,N\\), \\(t=1,\\dots,T\\) \\(j=1,\\dots,J\\), \\(X_{ntj}\\) (column) vector \\(P\\) characteristics \\(j\\) faced \\(n\\) \\(t\\), \\(\\beta \\{\\mathbb R}^{P}\\) vector coefficients, \\((\\epsilon_{nt:}) = (\\epsilon_{nt1},\\dots,\\epsilon_{ntJ})' \\sim \\text{MVN}_{J} (0,\\Sigma)\\) model’s error term vector \\(n\\) \\(t\\), probit model assumed multivariate normally distributed zero mean covariance matrix \\(\\Sigma\\). Now let \\(y_{nt}=j\\) denote event decision maker \\(n\\) chooses alternative \\(j\\) choice occasion \\(t\\). Assuming utility maximizing behavior decision makers4, decisions linked utilities via \\[\\begin{equation} y_{nt} = {\\arg \\max}_{j = 1,\\dots,J} U_{ntj}. \\end{equation}\\] ordered probit case, concept decider’s separate utilities alternative longer natural (Train 2009). Instead, model single utility value \\[\\begin{align*}   U_{nt} = X_{nt}'\\beta_n + \\epsilon_{nt} \\end{align*}\\] per decider \\(n\\) choice occasion \\(t\\), interpret “level association” \\(n\\) choice question. utility value falls discrete categories, turn linked ordered alternatives \\(j=1,\\dots,J\\). Formally, \\[\\begin{align*}    y_{nt} = \\sum_{j = 1,\\dots,J} j \\cdot (\\gamma_{j-1} < U_{nt} \\leq \\gamma_{j}), \\end{align*}\\] end points \\(\\gamma_0 = -\\infty\\) \\(\\gamma_J = +\\infty\\), thresholds \\((\\gamma_j)_{j=1,\\dots,J-1}\\). ensure monotonicity thresholds, rather estimate logarithmic threshold increments \\(d_j\\) \\(\\gamma_j = \\sum_{=1,\\dots,j} \\exp{d_i}\\), \\(j=1,\\dots,J-1\\).","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v01_model_definition.html","id":"choice-behavior-heterogeneity","dir":"Articles","previous_headings":"","what":"Choice behavior heterogeneity","title":"Model definition","text":"Note coefficient vector \\(\\beta\\) constant across decision makers. assumption restrictive many applications.5 Heterogeneity choice behavior can modeled imposing distribution \\(\\beta\\) decider can preferences. Formally, define \\(\\beta = (\\alpha, \\beta_n)\\), \\(\\alpha\\) \\(P_f\\) coefficients constant across deciders \\(\\beta_n\\) \\(P_r\\) decider-specific coefficients. Consequently, \\(P = P_f + P_r\\). Now \\(P_r>0\\), \\(\\beta_n\\) distributed according \\(P_r\\)-variate distribution, -called mixing distribution. Choosing appropriate mixing distribution notoriously difficult task model specification. many applications, different types standard parametric distributions (including normal, log-normal, uniform tent distribution) tried conjunction likelihood value-based model selection, cf., Train (2009), Chapter 6. Instead, {RprobitB} implements approach (Oelschläger Bauer 2020) approximate underlying mixing distribution mixture (multivariate) Gaussian densities. precisely, underlying mixing distribution \\(g_{P_r}\\) random coefficients \\((\\beta_n)_{n}\\) approximated mixture \\(P_r\\)-variate normal densities \\(\\phi_{P_r}\\) mean vectors \\(b=(b_c)_{c}\\) covariance matrices \\(\\Omega=(\\Omega_c)_{c}\\) using \\(C\\) components, .e. \\[\\begin{equation} \\beta_n\\mid b,\\Omega \\sim \\sum_{c=1}^{C} s_c \\phi_{P_r} (\\cdot \\mid b_c,\\Omega_c). \\end{equation}\\] , \\((s_c)_{c}\\) weights satisfying \\(0 < s_c\\leq 1\\) \\(c=1,\\dots,C\\) \\(\\sum_c s_c=1\\). One interpretation latent class model obtained introducing variables \\(z=(z_n)_n\\), allocating decision maker \\(n\\) class \\(c\\) probability \\(s_c\\), .e. \\[\\begin{equation} \\text{Prob}(z_n=c)=s_c \\land \\beta_n \\mid z,b,\\Omega \\sim \\phi_{P_r}(\\cdot \\mid b_{z_n},\\Omega_{z_n}). \\end{equation}\\] call resulting model latent class mixed multinomial probit model. Note model collapses (normally) mixed multinomial probit model \\(P_r>0\\) \\(C=1\\), multinomial probit model \\(P_r=0\\) binary probit model additionally \\(J=2\\).","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v01_model_definition.html","id":"model-normalization","dir":"Articles","previous_headings":"","what":"Model normalization","title":"Model definition","text":"well known, utility model needs normalized respect level scale order identified (Train 2009). Therefore, consider transformed model \\[\\begin{equation} \\tilde{U}_{ntj} = \\tilde{X}_{ntj}' \\beta + \\tilde{\\epsilon}_{ntj}, \\end{equation}\\] \\(n=1,\\dots,N\\), \\(t=1,\\dots,T\\) \\(j=1,\\dots,J-1\\), (choosing \\(J\\) reference alternative) \\(\\tilde{U}_{ntj} = U_{ntj} - U_{ntJ}\\), \\(\\tilde{X}_{ntj} = X_{ntj} - X_{ntJ}\\), \\(\\tilde{\\epsilon}_{ntj} = \\epsilon_{ntj} - \\epsilon_{ntJ}\\), \\((\\tilde{\\epsilon}_{nt:}) = (\\tilde{\\epsilon}_{nt1},...,\\tilde{\\epsilon}_{nt(J-1)})' \\sim \\text{MVN}_{J-1} (0,\\tilde{\\Sigma})\\) \\(\\tilde{\\Sigma}\\) denotes covariance matrix top-left element restricted one.6","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v01_model_definition.html","id":"parameter-labels-in-rprobitb","dir":"Articles","previous_headings":"","what":"Parameter labels in {RprobitB}","title":"Model definition","text":"{RprobitB}, probit model parameters saved RprobitB_parameter object. labels consistent definition vignette. example: Mind matrix Sigma_full unique can matrix results Sigma differencing, see non-exported function RprobitB:::undiff_Sigma().","code":"RprobitB:::RprobitB_parameter(   P_f   = 1,              P_r   = 2,   J     = 3,   N     = 10,   C     = 2,          # the number of latent classes   alpha = c(1),       # the fixed coefficient vector of length 'P_f'   s     = c(0.6,0.4), # the vector of class weights of length 'C'   b     = matrix(c(-1,1,1,2), nrow = 2, ncol = 2),                                  # the matrix of class means as columns of dimension 'P_r' x 'C'   Omega = matrix(c(diag(2),0.1*diag(2)), nrow = 4, ncol = 2),                              # the matrix of class covariance matrices as columns of dimension 'P_r^2' x 'C'   Sigma = diag(2),    # the differenced error term covariance matrix of dimension '(J-1)' x '(J-1)'                       # the undifferenced error term covariance matrix is labeled 'Sigma_full'   z     = rep(1:2,5)  # the vector of the allocation variables of length 'N' ) #> alpha : 1 #>  #> C : 2 #>  #> s : double vector of length 2  #>  #> 0.6 0.4 #>  #> b : 2 x 2 matrix of doubles  #>  #>      [,1] [,2] #> [1,]   -1    1 #> [2,]    1    2 #>  #>  #> Omega : 4 x 2 matrix of doubles  #>  #>      [,1] [,2] #> [1,]    1  0.1 #> [2,]    0  0.0 #> [3,]    0  0.0 #> [4,]    1  0.1 #>  #>  #> Sigma : 2 x 2 matrix of doubles  #>  #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    1 #>  #>  #> Sigma_full : 3 x 3 matrix of doubles  #>  #>      [,1] [,2] [,3] #> [1,]    2    1    1 #> [2,]    1    2    1 #> [3,]    1    1    1 #>  #>  #> beta : 2 x 10 matrix of doubles  #>  #>         [,1]   [,2]    [,3] ...  [,10] #> [1,] -1.9429 1.2913 -2.3503 ... 0.9936 #> [2,]  1.1785 2.2184 -0.0956 ... 1.4067 #>  #>  #> z : integer vector of length 10  #>  #> 1 2 1 ... 2 #>  #> d : NA"},{"path":"https://loelschlaeger.de/RprobitB/articles/v01_model_definition.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model definition","text":"Agresti, . 2015. Foundations Linear Generalized Linear Models. Wiley. Bliss, C. . 1934. “Method Probits.” Science 79 (2037): 38–39. https://doi.org/10.1126/science.79.2037.38. Hewig, J., N. Kretschmer, R. H. Trippe, H. Hecht, M. G. H. Coles, C. B. Holroyd, W. H. R. Miltner. 2011. “Humans Deviate Rational Choice.” Psychophysiology 48 (4). https://doi.org/10.1111/j.1469-8986.2010.01081.x. Oelschläger, L., D. Bauer. 2020. “Bayes Estimation Latent Class Mixed Multinomial Probit Models.” TRB Annual Meeting 2021. Train, K. 2009. Discrete Choice Methods Simulation. Cambridge University Press. https://doi.org/10.1017/CBO9780511805271.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"requirements-to-choice-data","dir":"Articles","previous_headings":"","what":"Requirements to choice data","title":"Choice data","text":"{RprobitB} helps modeling choice individual deciders one alternative finite set choice alternatives. choice set fulfill three properties (Train 2009): Choices need mutually exclusive (one can choose one one alternative different), exhaustive (alternatives leave options open), finitely many. Every decider may take one repeated choices (called choice occasions). data set thus contains information identifier decider (optionally choice situation), choices, alternative decider specific covariates. Additionally, {RprobitB} asks following formal requirements: data set must “wide” format, means row provides full information one choice occasion.2 must contain column unique identifiers decision maker. Additionally, can contain column identifier choice situation decider. information missing, identifier generated automatically appearance choices data set.3 can contain column observed choices. column required model fitting prediction. must contain columns values alternative specific covariate alternative decider specific covariate.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"example","dir":"Articles","previous_headings":"Requirements to choice data","what":"Example","title":"Choice data","text":"Train data set contains 2929 stated choices 235 Dutch individuals deciding two virtual train trip options based price, travel time, level comfort, number changes. fulfills requirements: row represents one choice occasion, columns id choiceid identify deciders choice occasions, respectively. column choice gives observed choices. Four alternative-specific covariates available, namely price, time, change, comfort. values given alternative.4","code":"data(\"Train\", package = \"mlogit\") str(Train) #> 'data.frame':    2929 obs. of  11 variables: #>  $ id       : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ choiceid : int  1 2 3 4 5 6 7 8 9 10 ... #>  $ choice   : Factor w/ 2 levels \"A\",\"B\": 1 1 1 2 2 2 2 2 1 1 ... #>  $ price_A  : num  2400 2400 2400 4000 2400 4000 2400 2400 4000 2400 ... #>  $ time_A   : num  150 150 115 130 150 115 150 115 115 150 ... #>  $ change_A : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ comfort_A: num  1 1 1 1 1 0 1 1 0 1 ... #>  $ price_B  : num  4000 3200 4000 3200 3200 2400 3200 3200 3200 4000 ... #>  $ time_B   : num  150 130 115 150 150 130 115 150 130 115 ... #>  $ change_B : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ comfort_B: num  1 1 0 0 0 0 1 0 1 0 ..."},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"the-model-formula","dir":"Articles","previous_headings":"","what":"The model formula","title":"Choice data","text":"inform {RprobitB} covariates want include model via specifying formula object. Say want model utility \\(U_{n,t,j}\\) decider \\(n\\) choice occasion \\(t\\) alternative \\(j\\) via linear equation \\[U_{n,t,j} = A_{n,t,j} \\beta_1 + B_{n,t} \\beta_{2,j} + C_{n,t,j} \\beta_{3,j} + \\epsilon_{n,tj}.\\] , \\(\\) \\(C\\) alternative choice situation specific covariates, whereas \\(B\\) choice situation specific. coefficient \\(\\beta_1\\) generic (.e. alternative), whereas \\(\\beta_{2,j}\\) \\(\\beta_{3,j}\\) alternative specific. represent structure, formula object form (analogously {mlogit}) choice ~ | B | C, choice dependent variable (discrete choice aim explain), alternative choice situation specific covariates generic coefficient (call covariates type 1), B choice situation specific covariates alternative specific coefficients5 (call covariates type 2), C alternative choice situation specific covariates alternative specific coefficients (call covariates type 3). Specifying formula object {RprobitB} must consistent following rules: default, alternative specific constants (ASCs)6 added model. can removed adding + 0 second spot, e.g. choice ~ | B + 0 | C. exclude covariates backmost categories, use either 0, e.g. choice ~ | B | 0 just leave part write choice ~ | B. However, exclude covariates front categories, use 0, e.g. choice ~ 0 | B. include one covariate category, use +, e.g. choice ~ A1 + A2 | B. don’t want include covariates second category want estimate alternative specific constants, add 1 second spot, e.g. choice ~ | 1. expression choice ~ | 0 interpreted covariates second category alternative specific constants. impose random effects specific variables, need define character vector re corresponding variable names. random effects alternative specific constants, include \"ASC\" re.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"example-1","dir":"Articles","previous_headings":"The model formula","what":"Example","title":"Choice data","text":"specify model formula Train data set. Say want include covariates price, time, comfort, change, alternative specific (, contain potentially different value alternative, different prices B), either type 1 type 3. difference type 1 type 3 former case, estimate generic coefficient (.e. coefficient constant across alternatives), whereas latter case, estimate alternative specific coefficients. Deciding type 1 type 3 covariates belongs topic model selection, provide separate vignette. now, go type 1 covariates remove ASCs: Additionally, specify random effects price time (typically expect heterogeneity ):","code":"form <- choice ~ price + time + comfort + change | 0 re <- c(\"price\",\"time\")"},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"the-prepare_data-function","dir":"Articles","previous_headings":"","what":"The prepare_data() function","title":"Choice data","text":"model estimation {RprobitB}, empirical choice data set choice_data must pass prepare_data() function: function performs compatibility checks data transformations returns object class RprobitB_data can fed estimation routine fit_model(). following arguments optional: re: character vector variable names form random effects. re = NULL per default, .e. random effects. alternatives: may want consider alternatives choice_data. case, can specify character vector alternatives selected names alternatives. specified, choice set defined observed choices. id: character (single string), name column choice_data contains unique identifier decision maker. default \"id\". idc: character, name column choice_data contains unique identifier choice situation given decision maker. Per default, identifier generated appearance choices data set. standardize: character vector variable names form get standardized. Covariates type 1 3 addressed <covariate>_<alternative>. standardize = \"\", covariates get standardized. Per default, covariate standardized. impute: Specifies handle missing entries (NA, NaN, -Inf, Inf) choice_data. following options available: \"complete_cases\", removes rows containing missing entries (default), \"zero\", replaces missing entries zero, \"mean\", imputes missing entries covariate mean.","code":"data <- prepare_data(form = form, choice_data = choice_data)"},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"example-2","dir":"Articles","previous_headings":"The prepare_data() function","what":"Example","title":"Choice data","text":"Let’s prepare Train data set estimation previous specification form re: summary plot methods provide quick data overview:","code":"data <- prepare_data(form = form, choice_data = Train, re = re, id = \"id\", idc = \"choiceid\") summary(data) #>                  count #> deciders           235 #> choice occasions  5-19 #> total choices     2929 #> alternatives         2 #> - 'A'             1474 #> - 'B'             1455 plot(data)"},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"ordered-alternatives","dir":"Articles","previous_headings":"","what":"Ordered alternatives","title":"Choice data","text":"two choice alternatives train trip example unordered. asked “rate train trip 1 (horrible) 7 (great)”, respondents choose set ordered alternatives. ordered alternatives can analyzed setting ordered = TRUE prepare_data. case, alternatives becomes mandatory argument, alternatives must named worst best.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"ranked-choices","dir":"Articles","previous_headings":"","what":"Ranked choices","title":"Choice data","text":"Rather recording single preferred alternative, surveys ask full ranking alternatives, reveals far underlying preferences. Ranked choices can analyzed setting ranked = TRUE prepare_data(). choice column data set must provide full ranking choice occasion (preferred least preferred), alternatives separated commas. ranked probit model follows directly basic multivariate case. difference take flexible utility differences differenced utility vector always negative. Thereby, incorporate information full ranking.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"simulate-choices","dir":"Articles","previous_headings":"","what":"Simulate choices","title":"Choice data","text":"simulate_choices function simulates discrete choice data prespecified probit model. Say want simulate choices N deciders T choice occasions7 among J alternatives model formulation form, call function simulate_choices() following optional arguments: re: character vector variable names form random effects. alternatives: character vector length J names choice alternatives. specified, alternatives labeled first J upper-case letters Roman alphabet. covariates: named list covariate values. element must vector length equal number choice occasions named according covariate, follow naming convention alternative specific covariates, .e. <covariate>_<alternative>. Covariates values specified drawn standard normal distribution. standardize: character vector variable names form get standardized. seed: Set seed simulation. can specify true parameters8 adding named list values alpha, fixed coefficient vector, C, number (greater equal 1) latent classes decision makers, s, vector class weights, b, matrix class means columns, Omega, matrix class covariance matrices columns, Sigma, differenced error term covariance matrix, Sigma_full, full error term covariance matrix, beta, matrix decision-maker specific coefficient vectors, z, class allocation vector, d, vector logarithmic threshold increments ordered probit case. True parameters specified set random.","code":"data <- simulate_choices(form = form, N = N, T = T, J = J)"},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"example-3","dir":"Articles","previous_headings":"Simulate choices","what":"Example","title":"Choice data","text":"illustration, simulate choices N = 100 deciders T = 10 choice occasions alternatives B: {RprobitB} provides function overview_effects() can used get overview effects parameters can specified: Hence, coefficient vector alpha must length 3, elements 1 3 correspond var1, var3_A, var3_B, respectively. matrix b must dimension 2 x C, (default) C = 1 row 1 2 correspond var2_A ASC_A, respectively. can visualize covariates grouped chosen alternatives:  see consistent specification: Higher values var1_A example correspond frequently choice B (upper-right panel), coefficient var1 (first value alpha) negative.","code":"N <- 100 T <- 10 alternatives <- c(\"A\", \"B\") base <- \"B\" form <- choice ~ var1 | var2 | var3 re <- c(\"ASC\", \"var2\") overview_effects(form = form, re = re, alternatives = alternatives, base = base) #>   effect as_value as_coef random #> 1   var1     TRUE   FALSE  FALSE #> 2 var3_A     TRUE    TRUE  FALSE #> 3 var3_B     TRUE    TRUE  FALSE #> 4 var2_A    FALSE    TRUE   TRUE #> 5  ASC_A    FALSE    TRUE   TRUE data <- simulate_choices(   form = form,    N = N,    T = T,    J = 2,    re = re,    alternatives = alternatives,    seed = 1,   true_parameter = list(     alpha = c(-1,0,1),     b = matrix(c(2,-0.5), ncol = 1)   ) ) summary(data) #>                  count #> deciders           100 #> choice occasions    10 #> total choices     1000 #> alternatives         2 #> - 'A'              435 #> - 'B'              565 plot(data, by_choice = TRUE)"},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"train-and-test-data-set","dir":"Articles","previous_headings":"","what":"Train and test data set","title":"Choice data","text":"function train_test() can used split output prepare_data() simulate_choices() train test subset. useful evaluating prediction performance fitted model. example, following code puts 70% deciders simulated data train subsample 30% deciders test subsample: Alternatively, following code puts 2 randomly chosen choice occasions per decider data test subsample, rest goes train subsample:","code":"train_test(data, test_proportion = 0.3, by = \"N\") #> $train #> Simulated data of 700 choices. #>  #> $test #> Simulated data of 300 choices. train_test(data, test_number = 2, by = \"T\", random = TRUE, seed = 1) #> $train #> Simulated data of 800 choices. #>  #> $test #> Simulated data of 200 choices."},{"path":"https://loelschlaeger.de/RprobitB/articles/v02_choice_data.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Choice data","text":"Croissant, Y. 2020. “Estimation Random Utility Models R: Mlogit Package.” Journal Statistical Software 95 (11). https://doi.org/10.18637/jss.v095.i11. Train, K. 2009. Discrete Choice Methods Simulation. Cambridge University Press. https://doi.org/10.1017/CBO9780511805271.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v03_model_fitting.html","id":"bayes-estimation-of-the-probit-model","dir":"Articles","previous_headings":"","what":"Bayes estimation of the probit model","title":"Model fitting","text":"Bayes estimation probit model builds upon work McCulloch Rossi (1994), Nobile (1998), Allenby Rossi (1998), Imai Dyk (2005). key ingredient concept data augmentation, see Albert Chib (1993): idea treat latent utilities \\(U\\) model equation \\(U = X\\beta + \\epsilon\\) additional parameters. , conditional \\(U\\), probit model constitutes standard Bayesian linear regression set-. posterior distribution can approximated iteratively drawing updating model parameter conditional parameters (-called Gibbs sampling approach). priori, assume following (conjugate) parameter distributions: \\((s_1,\\dots,s_C)\\sim D_C(\\delta)\\), \\(D_C(\\delta)\\) denotes \\(C\\)-dimensional Dirichlet distribution concentration parameter vector \\(\\delta = (\\delta_1,\\dots,\\delta_C)\\), \\(\\alpha\\sim \\text{MVN}_{P_f}(\\psi,\\Psi)\\), \\(\\text{MVN}_{P_f}\\) denotes \\(P_f\\)-dimensional normal distribution mean \\(\\psi\\) covariance \\(\\Psi\\), \\(b_c \\sim \\text{MVN}_{P_r}(\\xi,\\Xi)\\), independent \\(c\\), \\(\\Omega_c \\sim W^{-1}_{P_r}(\\nu,\\Theta)\\), independent \\(c\\), \\(W^{-1}_{P_r}(\\nu,\\Theta)\\) denotes \\(P_r\\)-dimensional inverse Wishart distribution \\(\\nu\\) degrees freedom scale matrix \\(\\Theta\\), \\(\\Sigma \\sim W^{-1}_{J-1}(\\kappa,\\Lambda)\\). prior distributions imply following conditional posterior distributions: class weights drawn Dirichlet distribution \\[\\begin{equation} (s_1,\\dots,s_C)\\mid \\delta,z \\sim D_C(\\delta_1+m_1,\\dots,\\delta_C+m_C), \\end{equation}\\] \\(c=1,\\dots,C\\), \\(m_c=\\#\\{n:z_n=c\\}\\) denotes current absolute class size.2 Independently \\(n\\), update allocation variables \\((z_n)_n\\) conditional distribution \\[\\begin{equation} \\text{Prob}(z_n=c\\mid s,\\beta,b,\\Omega )=\\frac{s_c\\phi_{P_r}(\\beta_n\\mid b_c,\\Omega_c)}{\\sum_c s_c\\phi_{P_r}(\\beta_n\\mid b_c,\\Omega_c)}. \\end{equation}\\] class means \\((b_c)_c\\) updated independently \\(c\\) via \\[\\begin{equation} b_c\\mid \\Xi,\\Omega,\\xi,z,\\beta \\sim\\text{MVN}_{P_r}\\left( \\mu_{b_c}, \\Sigma_{b_c}  \\right), \\end{equation}\\] \\(\\mu_{b_c}=(\\Xi^{-1}+m_c\\Omega_c^{-1})^{-1}(\\Xi^{-1}\\xi +m_c\\Omega_c^{-1}\\bar{b}_c)\\), \\(\\Sigma_{b_c}=(\\Xi^{-1}+m_c\\Omega_c^{-1})^{-1}\\), \\(\\bar{b}_c=m_c^{-1}\\sum_{n:z_n=c} \\beta_n\\). class covariance matrices \\((\\Omega_c)_c\\) updated independently \\(c\\) via \\[\\begin{equation} \\Omega_c \\mid \\nu,\\Theta,z,\\beta,b \\sim W^{-1}_{P_r}(\\mu_{\\Omega_c},\\Sigma_{\\Omega_c}), \\end{equation}\\] \\(\\mu_{\\Omega_c}=\\nu+m_c\\) \\(\\Sigma_{\\Omega_c}=\\Theta^{-1} + \\sum_{n:z_n=c} (\\beta_n-b_c)(\\beta_n-b_c)'\\). Independently \\(n\\) \\(t\\) conditionally components, utility vectors \\((U_{nt:})\\) follow \\(J-1\\)-dimensional truncated multivariate normal distribution, truncation points determined choices \\(y_{nt}\\). sample truncated multivariate normal distribution, apply sub-Gibbs sampler, following approach Geweke (1998): \\[\\begin{equation} U_{ntj} \\mid U_{nt(-j)},y_{nt},\\Sigma,W,\\alpha,X,\\beta  \\sim \\mathcal{N}(\\mu_{U_{ntj}},\\Sigma_{U_{ntj}}) \\cdot \\begin{cases} 1(U_{ntj}>\\max(U_{nt(-j)},0) ) & \\text{}~ y_{nt}=j\\\\ 1(U_{ntj}<\\max(U_{nt(-j)},0) ) & \\text{}~ y_{nt}\\neq j \\end{cases}, \\end{equation}\\] \\(U_{nt(-j)}\\) denotes vector \\((U_{nt:})\\) without element \\(U_{ntj}\\), \\(\\mathcal{N}\\) denotes univariate normal distribution, \\(\\Sigma_{U_{ntj}} = 1/(\\Sigma^{-1})_{jj}\\) \\[\\begin{equation} \\mu_{U_{ntj}} = W_{ntj}'\\alpha + X_{ntj}'\\beta_n - \\Sigma_{U_{ntj}} (\\Sigma^{-1})_{j(-j)}   (U_{nt(-j)} - W_{nt(-j)}'\\alpha - X_{nt(-j)}' \\beta_n ), \\end{equation}\\] \\((\\Sigma^{-1})_{jj}\\) denotes \\((j,j)\\)th element \\(\\Sigma^{-1}\\), \\((\\Sigma^{-1})_{j(-j)}\\) \\(j\\)th row without \\(j\\)th entry, \\(W_{nt(-j)}\\) \\(X_{nt(-j)}\\) coefficient matrices \\(W_{nt}\\) \\(X_{nt}\\), respectively, without \\(j\\)th column. Updating fixed coefficient vector \\(\\alpha\\) achieved applying formula Bayesian linear regression regressors \\(W_{nt}\\) regressands \\((U_{nt:})-X_{nt}'\\beta_n\\), .e. \\[\\begin{equation} \\alpha \\mid \\Psi,\\psi,W,\\Sigma,U,X,\\beta \\sim \\text{MVN}_{P_f}(\\mu_\\alpha,\\Sigma_\\alpha), \\end{equation}\\] \\(\\mu_\\alpha = \\Sigma_\\alpha (\\Psi^{-1}\\psi + \\sum_{n=1,t=1}^{N,T} W_{nt} \\Sigma^{-1} ((U_{nt:})-X_{nt}'\\beta_n) )\\) \\(\\Sigma_\\alpha = (\\Psi^{-1} + \\sum_{n=1,t=1}^{N,T} W_{nt}\\Sigma^{-1} W_{nt}^{'} )^{-1}\\). Analogously \\(\\alpha\\), random coefficients \\((\\beta_n)_n\\) updated independently via \\[\\begin{equation} \\beta_n \\mid \\Omega,b,X,\\Sigma,U,W,\\alpha \\sim \\text{MVN}_{P_r}(\\mu_{\\beta_n},\\Sigma_{\\beta_n}), \\end{equation}\\] \\(\\mu_{\\beta_n} = \\Sigma_{\\beta_n} (\\Omega_{z_n}^{-1}b_{z_n} + \\sum_{t=1}^{T} X_{nt} \\Sigma^{-1} (U_{nt:}-W_{nt}'\\alpha) )\\) \\(\\Sigma_{\\beta_n} = (\\Omega_{z_n}^{-1} + \\sum_{t=1}^{T} X_{nt}\\Sigma^{-1} X_{nt}^{'} )^{-1}\\) . error term covariance matrix \\(\\Sigma\\) updated means \\[\\begin{equation} \\Sigma \\mid \\kappa,\\Lambda,U,W,\\alpha,X,\\beta \\sim W^{-1}_{J-1}(\\kappa+NT,\\Lambda+S), \\\\ \\end{equation}\\] \\(S = \\sum_{n=1,t=1}^{N,T} \\varepsilon_{nt} \\varepsilon_{nt}'\\) \\(\\varepsilon_{nt} = (U_{nt:}) - W_{nt}'\\alpha - X_{nt}'\\beta_n\\).","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v03_model_fitting.html","id":"parameter-normalization","dir":"Articles","previous_headings":"Bayes estimation of the probit model","what":"Parameter normalization","title":"Model fitting","text":"Samples obtained updating scheme described lack identification (except \\(s\\) \\(z\\) draws), compare vignette model definition. Therefore, subsequent sampling, following normalizations required \\(\\)th updates iterations \\(\\): \\(\\alpha^{()} \\cdot \\omega^{()}\\), \\(b_c^{()} \\cdot \\omega^{()}\\), \\(c=1,\\dots,C\\), \\(U_{nt}^{()} \\cdot \\omega^{()}\\), \\(n = 1,\\dots,N\\), \\(t = 1,\\dots,T\\), \\(\\beta_n^{()} \\cdot \\omega^{()}\\), \\(n = 1,\\dots,N\\), \\(\\Omega_c^{()} \\cdot (\\omega^{()})^2\\), \\(c=1,\\dots,C\\), \\(\\Sigma^{()} \\cdot (\\omega^{()})^2\\), either \\(\\omega^{()} = \\sqrt{\\text{const} / (\\Sigma^{()})_{jj}}\\) \\((\\Sigma^{()})_{jj}\\) \\(j\\)th diagonal element \\(\\Sigma^{()}\\), \\(1\\leq j \\leq J-1\\), alternatively \\(\\omega^{()} = \\text{const} / \\alpha^{()}_p\\) coordinate \\(1\\leq p \\leq P_f\\) \\(\\)th draw coefficient vector \\(\\alpha\\). , \\(\\text{const}\\) positive constant (typically 1). preferences flipped \\(\\omega^{()} < 0\\), case \\(\\alpha^{()}_p < 0\\).","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v03_model_fitting.html","id":"burn-in-and-thinning","dir":"Articles","previous_headings":"Bayes estimation of the probit model","what":"Burn-in and thinning","title":"Model fitting","text":"theory behind Gibbs sampling constitutes sequence samples produced updating scheme Markov chain stationary distribution equal desired joint posterior distribution. takes certain number iterations stationary distribution approximated reasonably well. Therefore, common practice discard first \\(B\\) \\(R\\) samples (-called burn-period). Furthermore, correlation nearby samples expected. order obtain independent samples, consider every \\(Q\\)th sample computing Gibbs sample statistics like expectation standard deviation. independence samples can verified computing serial correlation convergence Gibbs sampler can checked considering trace plots, see .","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v03_model_fitting.html","id":"the-fit_model-function","dir":"Articles","previous_headings":"","what":"The fit_model() function","title":"Model fitting","text":"Gibbs sampling scheme described can executed applying function data must RprobitB_data object (see vignette choice data). function following optional arguments: scale: character determines utility scale. form \"<parameter> := <value>\", <parameter> either name fixed effect Sigma_<j>,<j> <j>th diagonal element Sigma, <value> value fixed parameter (.e. \\(\\text{const}\\) introduced ). Per default scale = \"Sigma\\_1,1 := 1\", .e. first error-term variance fixed 1. R: number iterations Gibbs sampler. default R = 10000. B: length burn-period, .e. non-negative number samples discarded. default B = R/2. Q: thinning factor Gibbs samples, .e. every Qth sample kept. default Q = 1. print_progress: boolean, determining whether print Gibbs sampler progress. prior: named list parameters prior distributions (default values documented check_prior() function): eta: mean vector length P_f normal prior alpha. Psi: covariance matrix dimension P_f x P_f normal prior alpha. delta: concentration parameter length 1 Dirichlet prior s. xi: mean vector length P_r normal prior b_c. D: covariance matrix dimension P_r x P_r normal prior b_c. nu: degrees freedom (natural number greater P_r) Inverse Wishart prior Omega_c. Theta: scale matrix dimension P_r x P_r Inverse Wishart prior Omega_c. kappa: degrees freedom (natural number greater J-1) Inverse Wishart prior Sigma. E: scale matrix dimension J-1 x J-1 Inverse Wishart prior Sigma. latent_classes: list parameters specifying number updating scheme latent classes, see vignette modeling heterogeneity fitting.","code":"fit_model(data = data)"},{"path":"https://loelschlaeger.de/RprobitB/articles/v03_model_fitting.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Model fitting","text":"previous vignette choice data, introduced Train data set mlogit package (Croissant 2020) contains 2922 choices two fictional train route alternatives. First, transform travel time minutes hours travel price guilders euros: following lines fit probit model explains chosen trip alternatives (choice) price, time, number changes, level comfort (lower value higher comfort). normalization, first linear coefficient, price, fixed -1, allows interpret coefficients monetary values: estimated model saved {RprobitB} can accessed via estimated coefficients (using mean Gibbs samples point estimate) can printed via visualized via  results indicate deciders value one hour travel time 25€, additional change 5€, comfortable class 14€.3","code":"data(\"Train\", package = \"mlogit\") Train$price_A <- Train$price_A / 100 * 2.20371 Train$price_B <- Train$price_B / 100 * 2.20371 Train$time_A <- Train$time_A / 60 Train$time_B <- Train$time_B / 60 form <- choice ~ price + time + change + comfort | 0 data <- prepare_data(form = form, choice_data = Train) model_train <- fit_model(   data = data,   scale = \"price := -1\") ) data(model_train, package = \"RprobitB\") coef(model_train) #>            Estimate   (sd) #> 1   price     -1.00 (0.00) #> 2    time    -25.89 (2.21) #> 3  change     -4.94 (0.88) #> 4 comfort    -14.45 (0.86) plot(coef(model_train), sd = 3)"},{"path":"https://loelschlaeger.de/RprobitB/articles/v03_model_fitting.html","id":"checking-the-gibbs-samples","dir":"Articles","previous_headings":"","what":"Checking the Gibbs samples","title":"Model fitting","text":"Gibbs samples saved list form RprobitB_fit object entry \"gibbs_samples\", .e. object contains 2 elements: gibbs_samples_raw list raw samples Gibbs sampler, gibbs_samples_nbt Gibbs samples used parameter estimates, .e. normalized thinned Gibbs samples burn-. Calling summary function estimated RprobitB_fit object yields additional information Gibbs samples gibbs_samples_nbt. can specify list FUN functions compute point estimate Gibbs samples4, example mean arithmetic mean, stats::sd standard deviation, R_hat Gelman-Rubin statistic (Gelman Rubin 1992),5 custom statistics like absolute difference median mean. Calling plot method additional argument type = \"trace\" plots trace Gibbs samples gibbs_samples_nbt:  Additionally, can visualize serial correlation Gibbs samples via argument type = \"acf\". boxes top-right corner state total sample size TSS (R - B = 10000 - 5000 = 5000), effective sample size ESS, factor TSS larger ESS.  , effective sample size value \\(\\text{TSS} / (1 + \\sum_{k\\geq 1} \\rho_k)\\), \\(\\rho_k\\) auto correlation chain offset \\(k\\) positions. auto correlations estimated via stats::acf() function.","code":"str(model_train$gibbs_samples, max.level = 2, give.attr = FALSE) #> List of 2 #>  $ gibbs_samples_raw:List of 2 #>   ..$ alpha: num [1:10000, 1:4] -0.00239 -0.02179 -0.02986 -0.03343 -0.03584 ... #>   ..$ Sigma: num [1:10000, 1] 0.978 0.949 0.862 0.864 0.911 ... #>  $ gibbs_samples_nbt:List of 2 #>   ..$ alpha: num [1:500, 1:4] -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 ... #>   ..$ Sigma: num [1:500, 1] 649 541 662 691 623 ... summary(model_train,          FUN = c(\"mean\"        = mean,                  \"sd\"          = stats::sd,                  \"R^\"          = R_hat,                 \"custom_stat\" = function(x) abs(mean(x) - median(x))                 )        ) #> Probit model #> Formula: choice ~ price + time + change + comfort | 0  #> R: 10000, B: 5000, Q: 10 #> Level: Utility differences with respect to alternative 'B'. #> Scale: Coefficient of effect 'price' (alpha_1) fixed to -1. #>  #> Gibbs sample statistics #>                mean           sd           R^  custom_stat #>  alpha #>                                                            #>      1        -1.00         0.00         1.00         0.00 #>      2       -25.89         2.21         1.00         0.02 #>      3        -4.94         0.88         1.01         0.01 #>      4       -14.45         0.86         1.00         0.02 #>  #>  Sigma #>                                                            #>    1,1       655.56        65.79         1.00         7.28 par(mfrow = c(2,1)) plot(model_train, type = \"trace\") par(mfrow = c(2,3)) plot(model_train, type = \"acf\")"},{"path":"https://loelschlaeger.de/RprobitB/articles/v03_model_fitting.html","id":"model-transformation-after-estimation","dir":"Articles","previous_headings":"","what":"Model transformation after estimation","title":"Model fitting","text":"transform method can used transform RprobitB_fit object three ways: change length B burn-period, example change thinning factor Q Gibbs samples, example change model normalization scale, example","code":"model_train <- transform(model_train, B = 1) model_train <- transform(model_train, Q = 100) model_train <- transform(model_train, scale = \"Sigma_1 := 1\")"},{"path":"https://loelschlaeger.de/RprobitB/articles/v03_model_fitting.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model fitting","text":"Albert, J. H., S. Chib. 1993. “Bayesian Analysis Binary Polychotomous Response Data.” Journal American Statistical Association 88. https://doi.org/10.2307/2290350. Allenby, G. M., P. Rossi. 1998. “Marketing Models Consumer Heterogeneity.” Journal Econometrics 89. https://doi.org/10.1016/S0304-4076(98)00055-4. Croissant, Y. 2020. “Estimation Random Utility Models R: Mlogit Package.” Journal Statistical Software 95 (11). https://doi.org/10.18637/jss.v095.i11. Gelman, ., D. B. Rubin. 1992. “Inference Iterative Simulation Using Multiple Sequences.” Statistical Science 7 (4). https://doi.org/10.1214/ss/1177011136. Geweke, J. 1998. “Efficient Simulation Multivariate Normal Student-T Distributions Subject Linear Constraints Evaluation Constraint Probabilities.” Computing Science Statistics 23. Imai, K., D. . van Dyk. 2005. “Bayesian Analysis Multinomial Probit Model Using Marginal Data Augmentation.” Journal Econometrics 124. https://doi.org/j.jeconom.2004.02.002. McCulloch, R., P. Rossi. 1994. “Exact Likelihood Analysis Multinomial Probit Model.” Journal Econometrics 64. https://doi.org/10.1016/0304-4076(94)90064-7. Nobile, . 1998. “Hybrid Markov Chain Bayesian Analysis Multinomial Probit Model.” Statistics Computing 8. https://doi.org/10.1023/:1008905311214.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v04_modeling_heterogeneity.html","id":"estimating-a-joint-normal-mixing-distribution","dir":"Articles","previous_headings":"","what":"Estimating a joint normal mixing distribution","title":"Modeling heterogeneity","text":"{mlogit} package (Croissant 2020) contains data set Electricity, residential electricity customers asked decide four hypothetical electricity suppliers. suppliers differed 6 characteristics: fixed price pf per kWh, contract length cf, boolean loc, indicating whether supplier local company, boolean wk, indicating whether supplier well known company, boolean tod, indicating whether supplier offers time--day electricity price (higher day lower night), boolean seas, indicating whether supplier’s price seasonal dependent. constitutes choice situation choice behavior heterogeneity expected: customers might prefer time--day electricity price (may home day), others can opposite preference. Ideally differences preferences modeled using characteristics deciders. many cases (data set) adequate information. Instead differences taste can captured means mixing distribution tod coefficient. corresponds assumption random coefficient underlying mixing distribution drawn decider. can use estimated mixing distribution determine example share deciders positive versus negative preference towards time--day electricity prices. Additionally, expect correlations random coefficients certain covariates, example positive correlation influence loc wk: deciders prefer local suppliers might also prefer well known companies due recommendations past experiences, although might expensive unknown suppliers. fitted multivariate normal distribution reveal correlations. following lines prepare Electricity data set estimation. use convenience function as_cov_names() relabels data columns alternative specific covariates required format “<covariate>_<alternative>”, compare vignette choice data. Via re = c(\"cl\",\"loc\",\"wk\",\"tod\",\"seas\") argument, specify want model random effects price coefficient, fix -1 interpret estimates monetary values. estimated model saved {RprobitB} can accessed via: Calling coef() method estimated model also returns estimated (marginal) variances mixing distribution besides average mean effects: sign estimates can example deduce, existence time--day electricity price tod contract negative effect. However, deciders heterogeneous , estimated variance coefficient large (12.37). holds contract length cl. particular, estimated share population prefers longer contract length equals: correlation covariates can accessed follows:2 , see confirmation initial assumption high correlation loc wk. pairwise mixing distributions can visualized via calling plot() method additional argument type = mixture:","code":"data(\"Electricity\", package = \"mlogit\") Electricity <- as_cov_names(Electricity, c(\"pf\",\"cl\",\"loc\",\"wk\",\"tod\",\"seas\"), 1:4) data <- prepare_data(   form = choice ~ pf + cl + loc + wk + tod + seas | 0,   choice_data = Electricity,   re = c(\"cl\",\"loc\",\"wk\",\"tod\",\"seas\") ) model_elec <- fit_model(data, R = 5000, scale = \"price := -1\") data(model_elec, package = \"RprobitB\") coef(model_elec) #>         Estimate   (sd) Variance   (sd) #> 1   pf     -1.00 (0.00)       NA   (NA) #> 2   cl     -0.25 (0.03)     0.23 (0.04) #> 3  loc      2.77 (0.24)     6.74 (1.19) #> 4   wk      2.02 (0.19)     3.48 (0.69) #> 5  tod     -9.70 (0.23)    10.88 (1.80) #> 6 seas     -9.87 (0.19)     5.90 (1.06) cl_mu <- coef(model_elec)[\"cl\",\"mean\"] cl_sd <- sqrt(coef(model_elec)[\"cl\",\"var\"]) pnorm(cl_mu / cl_sd) #> [1] 0.2996708 cov_mix(model_elec, cor = TRUE) #>               cl        loc          wk         tod        seas #> cl    1.00000000 0.11846819  0.08690204 -0.05969293 -0.14077058 #> loc   0.11846819 1.00000000  0.80958767  0.12020817  0.01724159 #> wk    0.08690204 0.80958767  1.00000000  0.10642575 -0.02153803 #> tod  -0.05969293 0.12020817  0.10642575  1.00000000  0.53831733 #> seas -0.14077058 0.01724159 -0.02153803  0.53831733  1.00000000 plot(model_elec, type = \"mixture\")"},{"path":"https://loelschlaeger.de/RprobitB/articles/v04_modeling_heterogeneity.html","id":"estimating-latent-classes","dir":"Articles","previous_headings":"","what":"Estimating latent classes","title":"Modeling heterogeneity","text":"generally, {RprobitB} allows specify Gaussian mixture mixing distribution. particular, \\[ \\beta \\sim \\sum_{c=1}^C \\text{MVN} (b_c,\\Omega_c).\\] specification allows ) better approximation true underlying mixing distribution b) preference based classification deciders. estimate latent mixture, specify named list latent_classes following arguments submit estimation routine fit_model: C, fixed number (greater equal 1) latent classes, set 1 per default,3 weight_update, boolean, set TRUE weight-based update latent classes, see , dp_update, boolean, set TRUE Dirichlet process-based update latent classes, see , Cmax, maximum number latent classes, set 10 per default.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v04_modeling_heterogeneity.html","id":"weight-based-update-of-the-latent-classes","dir":"Articles","previous_headings":"Estimating latent classes","what":"Weight-based update of the latent classes","title":"Modeling heterogeneity","text":"following weight-based updating scheme analogue Bauer, Büscher, Batram (2019) executed within burn-period: remove class \\(c\\), \\(s_c<\\varepsilon_{\\text{min}}\\), .e. class weight \\(s_c\\) drops threshold \\(\\varepsilon_{\\text{min}}\\). case indicates class \\(c\\) negligible impact mixing distribution. split class \\(c\\) two classes \\(c_1\\) \\(c_2\\), \\(s_c>\\varepsilon_\\text{max}\\). case indicates class \\(c\\) high influence mixing distribution whose approximation can potentially improved increasing resolution directions high variance. Therefore, class means \\(b_{c_1}\\) \\(b_{c_2}\\) new classes \\(c_1\\) \\(c_2\\) shifted opposite directions class mean \\(b_c\\) old class \\(c\\) direction highest variance. join two classes \\(c_1\\) \\(c_2\\) one class \\(c\\), \\(\\lVert b_{c_1} - b_{c_2} \\rVert<\\varepsilon_{\\text{distmin}}\\), .e. euclidean distance class means \\(b_{c_1}\\) \\(b_{c_2}\\) drops threshold \\(\\varepsilon_{\\text{distmin}}\\). case indicates location redundancy repealed. parameters \\(c\\) assigned adding values \\(s\\) \\(c_1\\) \\(c_2\\) averaging values \\(b\\) \\(\\Omega\\). rules contain choices values \\(\\varepsilon_{\\text{min}}\\), \\(\\varepsilon_{\\text{max}}\\) \\(\\varepsilon_{\\text{distmin}}\\). adequate value \\(\\varepsilon_{\\text{distmin}}\\) depends scale parameters. Per default, {RprobitB} sets epsmin = 0.01, epsmax = 0.99, distmin = 0.1. values can adapted latent_class list.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v04_modeling_heterogeneity.html","id":"dirichlet-process-based-update-of-the-latent-classes","dir":"Articles","previous_headings":"Estimating latent classes","what":"Dirichlet process-based update of the latent classes","title":"Modeling heterogeneity","text":"alternative weight-based updating scheme determine correct number \\(C\\) latent classes, {RprobitB} implemented Dirichlet process.4 Dirichlet Process Bayesian nonparametric method, nonparametric means number model parameters can theoretically grow infinity. method allows add mixture components mixing distribution needed better approximation, see Neal (2000) documentation general case. literature offers many representations method, including Chinese Restaurant Process (Aldous 1985), stick-braking methapor (Sethuraman 1994), Polya Urn model (Blackwell MacQueen 1973). case, face situation find distribution \\(g\\) explains decider-specific coefficients \\((\\beta_n)_{n = 1,\\dots,N}\\), \\(g\\) supposed mixture unknown number \\(C\\) Gaussian densities, .e. \\(g = \\sum_{c = 1,\\dots,C} s_c \\text{MVN}(b_c, \\Omega_c)\\). Let \\(z_n \\\\{1,\\dots,C\\}\\) denote class membership \\(\\beta_n\\). priori, mixture weights \\((s_c)_c\\) given Dirichlet prior concentration parameter \\(\\delta/C\\), .e. \\((s_c)_c \\mid \\delta \\sim \\text{D}_C(\\delta/C,\\dots,\\delta/C)\\). Rasmussen (2000) shows \\[ \\Pr((z_n)_n\\mid \\delta) = \\frac{\\Gamma(\\delta)}{\\Gamma(N+\\delta)} \\prod_{c=1}^C \\frac{\\Gamma(m_c + \\delta/C)}{\\Gamma(\\delta/C)}, \\] \\(\\Gamma(\\cdot)\\) denotes gamma function \\(m_c = \\#\\{n:z_n = c\\}\\) number elements currently allocated class \\(c\\). Crucially, last equation independent class weights \\((s_c)_c\\), yet still depends finite number \\(C\\) latent classes. However, Li, Schofield, Gönen (2019) shows \\[ \\Pr(z_n = c \\mid z_{-n}, \\delta) = \\frac{m_{c,-n} + \\delta/C}{N-1+\\delta},\\] notation \\(-n\\) means excluding \\(n\\)th element. can let \\(C\\) approach infinity derive: \\[ \\Pr(z_n = c \\mid z_{-n}, \\delta) \\\\frac{m_{c,-n}}{N-1+\\delta}. \\] Note allocation probabilities sum 1, instead \\[ \\sum_{c = 1}^C \\frac{m_{c,-n}}{N-1+\\delta} = \\frac{N-1}{N-1+\\delta}. \\] difference 1 equals \\[ \\Pr(z_n \\neq z_m ~ \\forall ~ m \\neq n \\mid z_{-n}, \\delta) = \\frac{\\delta}{N-1+\\delta} \\] constitutes probability new cluster observation \\(n\\) created. Neal (2000) points probability proportional prior parameter \\(\\delta\\): greater value \\(\\delta\\) encourages creation new clusters, smaller value \\(\\delta\\) increases probability allocation already existing class. summary, Dirichlet process updates allocation \\(\\beta\\) coefficient vector one time, dependent allocations. number clusters can theoretically rise infinity, however, delete unoccupied clusters, \\(C\\) bounded \\(N\\). final step allocation update, update class means \\(b_c\\) covariance matrices \\(\\Omega_c\\) means posterior predictive distribution. mean covariance matrix new generated cluster drawn prior predictive distribution. corresponding formulas given Li, Schofield, Gönen (2019). Dirichlet process directly integrates existing Gibbs sampler. Given \\(\\beta\\) values, updated class means \\(b_c\\) class covariance matrices \\(\\Omega_c\\). Dirichlet process updating scheme implemented function update_classes_dp(). following, give small example bivariate case P_r = 2. sample true class means b_true class covariance matrices Omega_true C_true = 3 true latent classes. true (unbalanced) class sizes given vector N, z_true denotes true allocations. specify following prior parameters (definition see vignette model fitting): Initially, start C = 1 latent classes. class mean b set zero, covariance matrix Omega identity matrix: following call update_classes_dp() updates latent classes 100 iterations. Note specify arguments Cmax s_desc. former denotes maximum number latent classes. specification requirement Dirichlet process per se, rather implementation. Knowing maximum possible class number, can allocate required memory space, leads speed improvement. later can verify won’t exceed number Cmax = 10 latent classes point Dirichlet process. Setting s_desc = TRUE ensures classes ordered weights descending order ensure identifiability. Dirichlet process able infer true number C_true = 3 latent classes:","code":"set.seed(1) P_r <- 2 C_true <- 3 N <- c(100,70,30) (b_true <- matrix(replicate(C_true, rnorm(P_r)), nrow = P_r, ncol = C_true)) #>            [,1]       [,2]       [,3] #> [1,] -0.6264538 -0.8356286  0.3295078 #> [2,]  0.1836433  1.5952808 -0.8204684 (Omega_true <- matrix(replicate(C_true, rwishart(P_r + 1, 0.1*diag(P_r))$W, simplify = TRUE),                        nrow = P_r*P_r, ncol = C_true)) #>           [,1]        [,2]       [,3] #> [1,] 0.3093652  0.14358543  0.2734617 #> [2,] 0.1012729 -0.07444148 -0.1474941 #> [3,] 0.1012729 -0.07444148 -0.1474941 #> [4,] 0.2648235  0.05751780  0.2184029 beta <- c() for(c in 1:C_true) for(n in 1:N[c])   beta <- cbind(beta, rmvnorm(mu = b_true[,c,drop=F], Sigma = matrix(Omega_true[,c,drop=F], ncol = P_r))) z_true <- rep(1:3, times = N) delta <- 0.1 xi <- numeric(P_r) D <- diag(P_r) nu <- P_r + 2 Theta <- diag(P_r) z <- rep(1, ncol(beta)) C <- 1 b <- matrix(0, nrow = P_r, ncol = C) Omega <- matrix(rep(diag(P_r), C), nrow = P_r*P_r, ncol = C) for(r in 1:100){   dp <- RprobitB:::update_classes_dp(     Cmax = 10, beta, z, b, Omega, delta, xi, D, nu, Theta, s_desc = TRUE     )   z <- dp$z   b <- dp$b   Omega <- dp$Omega } par(mfrow = c(1,2)) plot(t(beta), xlab = bquote(beta[1]), ylab = bquote(beta[2]), pch = 19) RprobitB:::plot_class_allocation(beta, z, b, Omega, r = 100, perc = 0.95)"},{"path":"https://loelschlaeger.de/RprobitB/articles/v04_modeling_heterogeneity.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Modeling heterogeneity","text":"Aldous, D. J. 1985. “Exchangeability Related Topics,” Lecture notes math., 1117: 1–198. Bauer, D., S. Büscher, M. Batram. 2019. “Non-Parameteric Estiation Mixed Discrete Choice Models.” Second International Choice Modelling Conference Kobe. Blackwell, D., J. MacQueen. 1973. “Ferguson Distributions via Polya Urn Schemes.” Annals Statistics 1: 353–55. Burda, M., M. Harding, J. Hausman. 2008. “Bayesian Mixed Logit–Probit Model Multinomial Choice.” Journal Econometrics 147 (2). https://doi.org/10.1016/j.jeconom.2008.09.029. Croissant, Y. 2020. “Estimation Random Utility Models R: Mlogit Package.” Journal Statistical Software 95 (11). https://doi.org/10.18637/jss.v095.i11. Li, Y., E. Schofield, M. Gönen. 2019. “Tutorial Dirichlet Process Mixture Modeling.” Journal Mathematical Psychology 91. https://doi.org/10.1016/j.jmp.2019.04.004. Neal, R. M. 2000. “Markov Chain Sampling Methods Dirichlet Process Mixture Models.” Journal Computational Graphical Statistics 9 (2). https://doi.org/10.2307/1390653. Rasmussen, C. E. 2000. Infinite Gaussian Mixture Model. Vol. 12. MIT Press. Sethuraman, J. 1994. “Constructive Definition Dirichlet Priors.” Statistica Sinica 4 (2): 639–50. http://www.jstor.org/stable/24305538.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v05_choice_prediction.html","id":"reproducing-the-observed-choices","dir":"Articles","previous_headings":"","what":"Reproducing the observed choices","title":"Choice prediction","text":"{RprobitB} provides predict() method RprobitB_fit objects. Per default, method returns confusion matrix, gives overview -sample prediction performance: setting argument overview = FALSE, method instead returns predictions level individual choice occasions: Among three incorrect predictions shown , one decider id = 1 choice occasion idc = 8 outstanding. Alternative B chosen although model predicts probability 75% alternative . can use convenience function get_cov() extract characteristics particular choice situation: trip option 20€ cheaper 30 minutes faster, model outweighs better comfort class alternative B, recall estimated effects: misclassification can explained preferences differ average decider (choice behavior heterogeneity), unobserved factors influenced choice. Indeed, variance error term estimated high: Apart prediction accuracy, model performance can evaluated nuanced terms sensitivity specificity. following snippet exemplary shows visualize measures means receiver operating characteristic (ROC) curve (Fawcett 2006), using {plotROC} package (Sachs 2017). curve constructed plotting true positive fraction false positive fraction various cutoffs (n.cuts = 20). closer curve top-left corner, better binary classification.","code":"predict(model_train) #>     predicted #> true    A    B #>    A 1034  440 #>    B  450 1005 pred <- predict(model_train, overview = FALSE)  head(pred, n = 10) #>    id choiceid    A    B true predicted correct #> 1   1        1 0.92 0.08    A         A    TRUE #> 2   1        2 0.64 0.36    A         A    TRUE #> 3   1        3 0.79 0.21    A         A    TRUE #> 4   1        4 0.18 0.82    B         B    TRUE #> 5   1        5 0.55 0.45    B         A   FALSE #> 6   1        6 0.13 0.87    B         B    TRUE #> 7   1        7 0.54 0.46    B         A   FALSE #> 8   1        8 0.76 0.24    B         A   FALSE #> 9   1        9 0.55 0.45    A         A    TRUE #> 10  1       10 0.59 0.41    A         A    TRUE get_cov(model_train, id = 1, idc = 8) #>   id choiceid choice  price_A   time_A change_A comfort_A  price_B time_B #> 8  1        8      B 52.88904 1.916667        0         1 70.51872    2.5 #>   change_B comfort_B #> 8        0         0 coef(model_train) #>            Estimate   (sd) #> 1   price     -1.00 (0.00) #> 2    time    -25.89 (2.21) #> 3  change     -4.94 (0.88) #> 4 comfort    -14.45 (0.86) point_estimates(model_train)$Sigma #>          [,1] #> [1,] 655.5634 #> attr(,\"names\") #> [1] \"1,1\" library(plotROC) ggplot(data = pred, aes(m = A, d = ifelse(true == \"A\", 1, 0))) +    geom_roc(n.cuts = 20, labels = FALSE) +    style_roc(theme = theme_grey)"},{"path":"https://loelschlaeger.de/RprobitB/articles/v05_choice_prediction.html","id":"forecasting-choice-behavior","dir":"Articles","previous_headings":"","what":"Forecasting choice behavior","title":"Choice prediction","text":"predict() method additional data argument. Per default, data = NULL, results -sample case outlined . Alternatively, data can either RprobitB_data object (example test subsample derived train_test() function, see vignette choice data), data frame custom choice characteristics. demonstrate second case following. Assume train company wants anticipate effect price increase market share. model, increasing ticket price 100€ 110€ (ceteris paribus) draws 15% customers competitor increase prices. However, offering better comfort class compensates higher price even results gain 7% market share:","code":"predict(   model_train,    data = data.frame(\"price_A\" = c(100,110),                      \"price_B\" = c(100,100)),   overview = FALSE) #>   id choiceid    A    B prediction #> 1  1        1 0.50 0.50          A #> 2  2        1 0.35 0.65          B predict(   model_train,    data = data.frame(\"price_A\"   = c(100,110),                      \"comfort_A\" = c(1,0),                     \"price_B\"   = c(100,100),                     \"comfort_B\" = c(1,1)),   overview = FALSE) #>   id choiceid    A    B prediction #> 1  1        1 0.50 0.50          A #> 2  2        1 0.57 0.43          A"},{"path":"https://loelschlaeger.de/RprobitB/articles/v05_choice_prediction.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Choice prediction","text":"Fawcett, T. 2006. “Introduction Roc Analysis.” Pattern Recognition Letters 27 (8). https://doi.org/10.1016/j.patrec.2005.10.010. Sachs, M. C. 2017. “plotROC: Tool Plotting Roc Curves.” Journal Statistical Software, Code Snippets 79 (2): 1–19. https://doi.org/10.18637/jss.v079.c02.","code":""},{"path":"https://loelschlaeger.de/RprobitB/articles/v06_model_selection.html","id":"the-model_selection-function","dir":"Articles","previous_headings":"","what":"The model_selection() function","title":"Model selection","text":"{RprobitB} provides convenience function model_selection(), takes arbitrary number RprobitB_fit objects returns matrix model selection criteria: Specifying criteria optional. Per default, criteria = c(\"npar\", \"LL\", \"AIC\", \"BIC\").3 available model selection criteria explained following.","code":"model_selection(model_train, model_train_sparse,                  criteria = c(\"npar\", \"LL\", \"AIC\", \"BIC\", \"WAIC\", \"MMLL\", \"BF\", \"pred_acc\")) #>                          model_train model_train_sparse #> npar                               4                  1 #> LL                          -1727.70           -1865.86 #> AIC                          3463.41            3733.73 #> BIC                          3487.34            3739.71 #> WAIC                         3463.74            3733.87 #> se(WAIC)                        0.19               0.07 #> pWAIC                           4.37               1.13 #> MMLL                        -1731.13           -1867.26 #> BF(*,model_train)                  1             < 0.01 #> BF(*,model_train_sparse)       > 100                  1 #> pred_acc                      69.61%             63.40%"},{"path":"https://loelschlaeger.de/RprobitB/articles/v06_model_selection.html","id":"npar","dir":"Articles","previous_headings":"The model_selection() function","what":"npar","title":"Model selection","text":"\"npar\" yields number model parameters, computed npar() method: , model_train 4 parameters (coefficient price, time, change, comfort, respectively), model_train_sparse single price coefficient.","code":"npar(model_train, model_train_sparse) #> [1] 4 1"},{"path":"https://loelschlaeger.de/RprobitB/articles/v06_model_selection.html","id":"ll","dir":"Articles","previous_headings":"The model_selection() function","what":"LL","title":"Model selection","text":"\"LL\" included criteria, model_selection() returns model’s log-likelihood values. can also directly accessed via logLik() method:4","code":"logLik(model_train) #> [1] -1727.704 logLik(model_train_sparse) #> [1] -1865.863"},{"path":"https://loelschlaeger.de/RprobitB/articles/v06_model_selection.html","id":"aic","dir":"Articles","previous_headings":"The model_selection() function","what":"AIC","title":"Model selection","text":"Including \"AIC\" yields Akaike’s Information Criterion (Akaike 1974), computed \\[-2 \\cdot \\text{LL} + k \\cdot \\text{npar},\\] \\(\\text{LL}\\) model’s log-likelihood value, \\(k\\) penalty per parameter \\(k = 2\\) per default classical AIC, \\(\\text{npar}\\) number parameters fitted model. Alternatively, AIC() method also returns AIC values: AIC quantifies trade-- -fitting, smaller values preferred. , increase goodness fit justifies additional 3 parameters model_train.","code":"AIC(model_train, model_train_sparse, k = 2) #> [1] 3463.408 3733.725"},{"path":"https://loelschlaeger.de/RprobitB/articles/v06_model_selection.html","id":"bic","dir":"Articles","previous_headings":"The model_selection() function","what":"BIC","title":"Model selection","text":"Similar AIC, \"BIC\" yields Bayesian Information Criterion (Schwarz 1978), defined \\[-2 \\cdot \\text{LL} + \\log{(\\text{nobs})} \\cdot \\text{npar},\\] \\(\\text{LL}\\) model’s log-likelihood value, \\(\\text{nobs}\\) number data points (can accessed via nobs() method), \\(\\text{npar}\\) number parameters fitted model. interpretation analogue AIC. {RprobitB} also provided method BIC value:","code":"BIC(model_train, model_train_sparse) #> [1] 3487.338 3739.708"},{"path":"https://loelschlaeger.de/RprobitB/articles/v06_model_selection.html","id":"waic-with-sewaic-and-pwaic","dir":"Articles","previous_headings":"The model_selection() function","what":"WAIC (with se(WAIC) and pWAIC)","title":"Model selection","text":"WAIC short Widely Applicable (Watanabe-Akaike) Information Criterion (Watanabe Opper 2010). AIC BIC, smaller WAIC value better model. Including \"WAIC\" criteria yields WAIC value, standard error se(WAIC), effective number parameters pWAIC, see . WAIC defined \\[-2  \\cdot \\text{lppd} + 2\\cdot p_\\text{WAIC},\\] \\(\\text{lppd}\\) stands log pointwise predictive density \\(p_\\text{WAIC}\\) penalty term proportional variance posterior distribution sometimes called effective number parameters, see McElreath (2020) p. 220 reference. \\(\\text{lppd}\\) approximated follows. Let \\[p_{si} = \\Pr(y_i\\mid \\theta_s)\\] probability observation \\(y_i\\) (single choices) given \\(s\\)-th set \\(\\theta_s\\) parameter samples posterior. \\[\\text{lppd} = \\sum_i \\log \\left( S^{-1} \\sum_s p_{si} \\right).\\] penalty term computed sum variances log-probability observation: \\[p_\\text{WAIC} = \\sum_i \\mathbb{V}_{\\theta}  \\log (p_{si}) . \\] \\(\\text{WAIC}\\) standard error \\[\\sqrt{n \\cdot \\mathbb{V}_i \\left[-2 \\left(\\text{lppd} - \\mathbb{V}_{\\theta}  \\log (p_{si})  \\right)\\right]},\\] \\(n\\) number choices. computing WAIC  object, probabilities \\(p_{si}\\) must computed via compute_p_si() function:5 Afterwards, WAIC can accessed follows, number brackets standard error: can visualize convergence WAIC follows:   , approximations look satisfactory. WAIC value seem converged, use Gibbs samples increasing R fit_model() decreasing B Q via transform(), see vignette model fitting.","code":"model_train <- compute_p_si(model_train) WAIC(model_train) #> 3463.74 (0.19) WAIC(model_train_sparse) #> 3733.87 (0.07) plot(WAIC(model_train)) plot(WAIC(model_train_sparse))"},{"path":"https://loelschlaeger.de/RprobitB/articles/v06_model_selection.html","id":"mmll","dir":"Articles","previous_headings":"The model_selection() function","what":"MMLL","title":"Model selection","text":"\"MMLL\" criteria stands marginal model log-likelihood. model’s marginal likelihood \\(\\Pr(y\\mid M)\\) model \\(M\\) data \\(y\\) required computation Bayes factors, see . general, term closed form must approximated numerically. {RprobitB} uses posterior Gibbs samples derived mcmc() function approximate model’s marginal likelihood via posterior harmonic mean estimator (Newton Raftery 1994): Let \\(S\\) denote number available posterior samples \\(\\theta_1,\\dots,\\theta_S\\). , \\[\\Pr(y\\mid M) = \\left(\\mathbb{E}_\\text{posterior} 1/\\Pr(y\\mid \\theta,M) \\right)^{-1} \\approx \\left( \\frac{1}{S} \\sum_s 1/\\Pr(y\\mid \\theta_s,M) \\right) ^{-1} = \\tilde{\\Pr}(y\\mid M).\\] law large numbers, \\(\\tilde{\\Pr}(y\\mid M) \\\\Pr(y\\mid M)\\) almost surely \\(S \\\\infty\\). WAIC, computing MMLL relies probabilities \\(p_{si} = \\Pr(y_i\\mid \\theta_s)\\), must first computed via compute_p_si() function. Afterwards, mml() function can called RprobitB_fit object input. function returns RprobitB_fit object, marginal likelihood value saved entry \"mml\" marginal log-likelihood value attribute \"mmll\":6 Analogue WAIC value, computation MMLL approximation improves rising (posterior) sample size. convergence can verified visually via plot() method:7  two options improving approximation: WAIC, can use posterior samples. Alternatively, can combine posterior harmonic mean estimate prior arithmetic mean estimator (Hammersley Handscomb 1964): approach, \\(S\\) samples \\(\\theta_1,\\dots,\\theta_S\\) drawn model’s prior distribution. , \\[\\Pr(y\\mid M) = \\mathbb{E}_\\text{prior} \\Pr(y\\mid \\theta,M) \\approx \\frac{1}{S} \\sum_s \\Pr(y\\mid \\theta_s,M) = \\tilde{\\Pr}(y\\mid M).\\] , hols law large numbers, \\(\\tilde{\\Pr}(y\\mid M) \\\\Pr(y\\mid M)\\) almost surely \\(S \\\\infty\\). final approximation model’s marginal likelihood weighted sum posterior harmonic mean estimate prior arithmetic mean estimate, weights determined sample sizes. use prior arithmetic mean estimator, call mml() function specification number prior draws S set recompute = TRUE:8 Note prior arithmetic mean estimator works well prior posterior distribution similar shape strong overlap, Gronau et al. (2017) points . Otherwise, sampled prior values result likelihood value close zero, thereby contributing marginally approximation. case, large number S prior samples required.","code":"model_train <- mml(model_train) model_train$mml #> 9.72e-117 * exp(-1464) attr(model_train$mml, \"mmll\") #> [1] -1731.128 plot(model_train$mml, log = TRUE) model_train <- mml(model_train, S = 1000, recompute = TRUE)"},{"path":"https://loelschlaeger.de/RprobitB/articles/v06_model_selection.html","id":"bf","dir":"Articles","previous_headings":"The model_selection() function","what":"BF","title":"Model selection","text":"Bayes factor index relative posterior model plausibility one model another (Marin Robert 2014). Given data \\(\\texttt{y}\\) two models \\(\\texttt{mod0}\\) \\(\\texttt{mod1}\\), defined \\[ BF(\\texttt{mod0},\\texttt{mod1}) = \\frac{\\Pr(\\texttt{mod0} \\mid \\texttt{y})}{\\Pr(\\texttt{mod1} \\mid \\texttt{y})} = \\frac{\\Pr(\\texttt{y} \\mid \\texttt{mod0} )}{\\Pr(\\texttt{y} \\mid \\texttt{mod1})} / \\frac{\\Pr(\\texttt{mod0})}{\\Pr(\\texttt{mod1})}. \\] ratio \\(\\Pr(\\texttt{mod0}) / \\Pr(\\texttt{mod1})\\) expresses factor \\(\\texttt{mod0}\\) priori assumed correct model. Per default, {RprobitB} sets \\(\\Pr(\\texttt{mod0}) = \\Pr(\\texttt{mod1}) = 0.5\\). front part \\(\\Pr(\\texttt{y} \\mid \\texttt{mod0} ) / \\Pr(\\texttt{y} \\mid \\texttt{mod1})\\) ratio marginal model likelihoods. value \\(BF(\\texttt{mod0},\\texttt{mod1}) > 1\\) means model \\(\\texttt{mod0}\\) strongly supported data consideration \\(\\texttt{mod1}\\). Adding \"BF\" criteria argument model_selection yields Bayes factors. see decisive evidence (Jeffreys 1998) favor model_train.","code":"model_selection(model_train, model_train_sparse, criteria = c(\"BF\")) #>                          model_train model_train_sparse #> BF(*,model_train)                  1             < 0.01 #> BF(*,model_train_sparse)       > 100                  1"},{"path":"https://loelschlaeger.de/RprobitB/articles/v06_model_selection.html","id":"pred_acc","dir":"Articles","previous_headings":"The model_selection() function","what":"pred_acc","title":"Model selection","text":"Finally, adding \"pred_acc\" criteria argument model_selection() function returns share correctly predicted choices. output model_selection() (alternatively one following) deduce model_train correctly predicts 6% choices model_train_sparse:9","code":"pred_acc(model_train, model_train_sparse) #> [1] 0.6961420 0.6340048"},{"path":"https://loelschlaeger.de/RprobitB/articles/v06_model_selection.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model selection","text":"Akaike, H. 1974. “New Look Statistical Model Identification.” IEEE Transactions Automatic Control 19. https://doi.org/10.1109/TAC.1974.1100705. Gronau, Q. F., . Sarafoglou, D. Matzke, . Ly, U. Boehm, M. Marsman, D. S. Leslie, J. J. Forster, E. Wagenmakers, H. Steingroever. 2017. “Tutorial Bridge Sampling.” Journal Mathematical Psychology 81. https://doi.org/10.1016/j.jmp.2017.09.005. Hammersley, J. M., D. C. Handscomb. 1964. “General Principles Monte Carlo Method.” Springer Verlag. https://doi.org/10.1007/978-94-009-5819-7_5. Jeffreys, Harold. 1998. Theory Probability. OUP Oxford. Marin, J., C. Robert. 2014. Bayesian Essentials R. Springer Verlag. https://doi.org/10.1007/978-1-4614-8687-9. McElreath, R. 2020. Statistical Rethinking: Bayesian Course Examples R Stan. Chapman; Hall/CRC. https://doi.org/10.1201/9780429029608. Newton, M. ., . E. Raftery. 1994. “Approximate Bayesian Inference Weighted Likelihood Bootstrap.” Journal Royal Statistical Society: Series B (Methodological) 56 (1). https://doi.org/j.2517-6161.1994.tb01956.x. Schwarz, G. 1978. “Estimating Dimension Model.” Annals Statistics 6. Watanabe, S., M. Opper. 2010. “Asymptotic Equivalence Bayes Cross Validation Widely Applicable Information Criterion Singular Learning Theory.” Journal Machine Learning Research 11 (12).","code":""},{"path":"https://loelschlaeger.de/RprobitB/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lennart Oelschläger. Author, maintainer. Dietmar Bauer. Author. Sebastian Büscher. Contributor. Manuel Batram. Contributor.","code":""},{"path":"https://loelschlaeger.de/RprobitB/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Oelschläger L, Bauer D (2022). RprobitB: Bayesian Probit Choice Modeling. R package version 1.1.0, https://loelschlaeger.de/RprobitB/.","code":"@Manual{,   title = {RprobitB: Bayesian Probit Choice Modeling},   author = {Lennart Oelschläger and Dietmar Bauer},   year = {2022},   note = {R package version 1.1.0},   url = {https://loelschlaeger.de/RprobitB/}, }"},{"path":"https://loelschlaeger.de/RprobitB/index.html","id":"rprobitb-bayesian-probit-choice-modeling-","dir":"","previous_headings":"","what":"Probit models for discrete choice data","title":"Probit models for discrete choice data","text":"goal {RprobitB} explain choices made deciders among discrete set alternatives. Bayesian way. example, think tourists want book train trip holiday destination: knowledge prefer certain alternative another great value train companies, especially customer’s willingness pay say faster comfortable trip.","code":""},{"path":"https://loelschlaeger.de/RprobitB/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Probit models for discrete choice data","text":"can install released version {RprobitB} CRAN : development version GitHub :","code":"install.packages(\"RprobitB\") # install.packages(\"devtools\") devtools::install_github(\"loelschlaeger/RprobitB\")"},{"path":"https://loelschlaeger.de/RprobitB/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Probit models for discrete choice data","text":"package documented several vignettes, see .","code":""},{"path":"https://loelschlaeger.de/RprobitB/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Probit models for discrete choice data","text":"analyze data set 2929 stated choices 235 Dutch individuals deciding two virtual train trip options based price, travel time, level comfort, number changes. data saved {mlogit} package. transform travel time minutes hours travel price guilders euros: following lines fit probit model explains chosen trip alternatives (choice) price, time, number changes, level comfort (lower value higher comfort). normalization, first linear coefficient, price, fixed -1, allows interpret coefficients monetary values: estimated effects can visualized via:  results indicate deciders value one hour travel time 25€, additional change 5€, comfortable class 15€. Now assume train company wants anticipate effect price increase market share. model, increasing ticket price 100€ 110€ (ceteris paribus) draws 15% customers competitor increase prices: However, offering better comfort class (0 better 1) compensates higher price even results gain 7% market share: just tip iceberg: {RprobitB} offers tools modeling choice behavior heterogeneity, preference-based classification deciders, model comparison .","code":"data(\"Train\", package = \"mlogit\") Train$price_A <- Train$price_A / 100 * 2.20371 Train$price_B <- Train$price_B / 100 * 2.20371 Train$time_A <- Train$time_A / 60 Train$time_B <- Train$time_B / 60 str(Train) #> 'data.frame':    2929 obs. of  11 variables: #>  $ id       : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ choiceid : int  1 2 3 4 5 6 7 8 9 10 ... #>  $ choice   : Factor w/ 2 levels \"A\",\"B\": 1 1 1 2 2 2 2 2 1 1 ... #>  $ price_A  : num  52.9 52.9 52.9 88.1 52.9 ... #>  $ time_A   : num  2.5 2.5 1.92 2.17 2.5 ... #>  $ change_A : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ comfort_A: num  1 1 1 1 1 0 1 1 0 1 ... #>  $ price_B  : num  88.1 70.5 88.1 70.5 70.5 ... #>  $ time_B   : num  2.5 2.17 1.92 2.5 2.5 ... #>  $ change_B : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ comfort_B: num  1 1 0 0 0 0 1 0 1 0 ... form <- choice ~ price + time + change + comfort | 0 data <- prepare_data(form, Train) model <- fit_model(data, scale = list(\"parameter\" = \"a\", index = 1, value = -1)) plot(coef(model)) predict(   model,    data = data.frame(\"price_A\" = c(100,110),                      \"price_B\" = c(100,100)),   overview = FALSE) #>   id choiceid    A    B prediction #> 1  1        1 0.50 0.50          A #> 2  2        1 0.35 0.65          B predict(   model,    data = data.frame(\"price_A\"   = c(100,110),                      \"comfort_A\" = c(1,0),                     \"price_B\"   = c(100,100),                     \"comfort_B\" = c(1,1)),   overview = FALSE) #>   id choiceid    A    B prediction #> 1  1        1 0.50 0.50          A #> 2  2        1 0.57 0.43          A"},{"path":"https://loelschlaeger.de/RprobitB/reference/M.html","id":null,"dir":"Reference","previous_headings":"","what":"Matrix difference operator for ranked vectors — M","title":"Matrix difference operator for ranked vectors — M","text":"function creates difference operator matrix differencing ranked vector elements resulting vector negative.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/M.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matrix difference operator for ranked vectors — M","text":"","code":"M(ranking)"},{"path":"https://loelschlaeger.de/RprobitB/reference/M.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matrix difference operator for ranked vectors — M","text":"ranking numeric vector ranking decreasing order.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/M.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matrix difference operator for ranked vectors — M","text":"matrix dimension length(rank)-1 x length(rank).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/M.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matrix difference operator for ranked vectors — M","text":"","code":"x <- c(-1,5,10,2) ranking <- order(x, decreasing = TRUE) M(ranking) %*% x #>      [,1] #> [1,]   -5 #> [2,]   -3 #> [3,]   -3"},{"path":"https://loelschlaeger.de/RprobitB/reference/R_hat.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Gelman-Rubin statistic — R_hat","title":"Compute Gelman-Rubin statistic — R_hat","text":"function computes Gelman-Rubin statistic R_hat.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/R_hat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Gelman-Rubin statistic — R_hat","text":"","code":"R_hat(samples, parts = 2)"},{"path":"https://loelschlaeger.de/RprobitB/reference/R_hat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Gelman-Rubin statistic — R_hat","text":"samples vector matrix samples Markov chain, e.g. Gibbs samples. samples matrix, column gives samples separate run. parts number parts divide chain sub-chains.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/R_hat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Gelman-Rubin statistic — R_hat","text":"numeric value, Gelman-Rubin statistic.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/R_hat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Gelman-Rubin statistic — R_hat","text":"https://bookdown.org/rdpeng/advstatcomp/monitoring-convergence.html","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/R_hat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Gelman-Rubin statistic — R_hat","text":"","code":"no_chains <- 2 length_chains <- 1e3 samples <- matrix(NA_real_, length_chains, no_chains) samples[1, ] <- 1 Gamma <- matrix(c(0.8, 0.1, 0.2, 0.9), 2, 2) for (c in 1:no_chains) {   for (t in 2:length_chains) {     samples[t, c] <- sample(1:2, 1, prob = Gamma[samples[t - 1, c], ])   } } R_hat(samples) #> [1] 1.023062"},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB.html","id":null,"dir":"Reference","previous_headings":"","what":"RprobitB: A package for Bayes estimation of probit models — RprobitB","title":"RprobitB: A package for Bayes estimation of probit models — RprobitB","text":"package provides tools Bayes estimation probit models.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create object of class RprobitB_data — RprobitB_data","title":"Create object of class RprobitB_data — RprobitB_data","text":"function constructs object class RprobitB_data.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create object of class RprobitB_data — RprobitB_data","text":"","code":"RprobitB_data(   data,   choice_data,   N,   T,   J,   P_f,   P_r,   alternatives,   ordered,   ranked,   base,   form,   re,   ASC,   effects,   standardize,   simulated,   choice_available,   true_parameter,   res_var_names )"},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create object of class RprobitB_data — RprobitB_data","text":"data list choice data. list N elements. element list two elements, X y, covariates decisions decision maker. precisely, X list T elements, element matrix dimension Jx(P_f+P_r) contains characteristics one choice occasion. y vector length T contains labels chosen alternatives. choice_data data.frame choice data wide format, .e. row represents one choice occasion. N number (greater equal 1) decision makers. T number (greater equal 1) choice occasions vector choice occasions length N (.e. decision maker specific number). Per default, T = 1. J number (greater equal 2) choice alternatives. P_f number covariates connected fixed coefficient (can 0). P_r number covariates connected random coefficient (can 0). alternatives character vector names choice alternatives. specified, choice set defined observed choices. ordered = TRUE, alternatives assumed specified alternatives ordered worst best. ordered boolean, FALSE per default. TRUE, choice set alternatives assumed ordered worst best. ranked TBA base character, name base alternative covariates alternative specific (.e. type 2 covariates ASCs). Ignored set NULL model alternative specific covariates (e.g. ordered probit model). Per default, base last element alternatives. form formula object used specify model equation. structure choice ~ | B | C, choice name dependent variable (choices), names alternative choice situation specific covariates coefficient constant across alternatives, B names choice situation specific covariates alternative specific coefficients, C names alternative choice situation specific covariates alternative specific coefficients. Multiple covariates (one type) separated + sign. default, alternative specific constants (ASCs) added model. can removed adding +0 second spot. ordered probit model (ordered = TRUE), formula object simple structure choice ~ . ASCs estimated. re character (vector) covariates form random effects. re = NULL (default), random effects. random effects ASCs, include \"ASC\" re. ASC boolean, determining whether model ASCs. effects data frame effect names booleans indicating whether connected random effects. standardize character vector names covariates get standardized. Covariates type 1 3 addressed <covariate>_<alternative>. standardize = \"\", covariates get standardized. simulated boolean, TRUE data simulated, otherwise data empirical. choice_available boolean, TRUE data contains observed choices. true_parameter object class RprobitB_parameters. res_var_names names list reserved variable names choice_data.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create object of class RprobitB_data — RprobitB_data","text":"object class RprobitB_data arguments function elements.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Create object of class RprobitB_fit. — RprobitB_fit","title":"Create object of class RprobitB_fit. — RprobitB_fit","text":"function creates object class RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create object of class RprobitB_fit. — RprobitB_fit","text":"","code":"RprobitB_fit(   data,   scale,   level,   normalization,   R,   B,   Q,   latent_classes,   prior,   gibbs_samples,   class_sequence,   comp_time )"},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create object of class RprobitB_fit. — RprobitB_fit","text":"data object class RprobitB_data. scale character determines utility scale. form <parameter> := <value>, <parameter> either name fixed effect Sigma_<j>,<j> <j>th diagonal element Sigma, <value> value fixed parameter. normalization object class RprobitB_normalization. R number iterations Gibbs sampler. B length burn-period, .e. non-negative number samples discarded. Q thinning factor Gibbs samples, .e. every Qth sample kept. latent_classes Either NULL (latent classes) list parameters specifying number latent classes updating scheme: C: fixed number (greater equal 1) latent classes, set 1 per default. either weight_update = TRUE dp_update = TRUE (.e. classes updated), C equals initial number latent classes. weight_update: boolean, set TRUE weight-based update latent classes. See ... details. dp_update: boolean, set TRUE update latent classes based Dirichlet process. See ... details. Cmax: maximum number latent classes. buffer: number iterations wait next weight-based update latent classes. epsmin: threshold weight (0 1) removing latent class weight-based updating scheme. epsmax: threshold weight (0 1) splitting latent class weight-based updating scheme. distmin: (non-negative) threshold class mean difference joining two latent classes weight-based updating scheme. prior named list parameters prior distributions. See documentation check_prior details parameters can specified. gibbs_samples object class RprobitB_gibbs_samples. class_sequence sequence class numbers Gibbs sampling length R. comp_time time spent Gibbs sampling.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create object of class RprobitB_fit. — RprobitB_fit","text":"object class RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_gibbs_samples_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Create object of class RprobitB_gibbs_samples_statistics — RprobitB_gibbs_samples_statistics","title":"Create object of class RprobitB_gibbs_samples_statistics — RprobitB_gibbs_samples_statistics","text":"function creates object class RprobitB_gibbs_samples_statistics.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_gibbs_samples_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create object of class RprobitB_gibbs_samples_statistics — RprobitB_gibbs_samples_statistics","text":"","code":"RprobitB_gibbs_samples_statistics(gibbs_samples, FUN = list(mean = mean))"},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_gibbs_samples_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create object of class RprobitB_gibbs_samples_statistics — RprobitB_gibbs_samples_statistics","text":"gibbs_samples object class RprobitB_gibbs_samples, generally located object gibbs_samples RprobitB_model object. FUN (preferably named) list functions compute parameter statistics Gibbs samples, example mean mean, sd standard deviation, min minimum, max maximum, median median, function(x) quantile(x, p) pth quantile, R_hat Gelman-Rubin statistic.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_gibbs_samples_statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create object of class RprobitB_gibbs_samples_statistics — RprobitB_gibbs_samples_statistics","text":"object class RprobitB_gibbs_samples_statistics, list statistics gibbs_samples obtained applying elements FUN.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_latent_classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Create object of class RprobitB_latent_classes — RprobitB_latent_classes","title":"Create object of class RprobitB_latent_classes — RprobitB_latent_classes","text":"function creates object class RprobitB_latent_classes defines number latent classes updating scheme. RprobitB_latent_classes object generated function relevance model possesses least one random coefficient, .e. P_r>0.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_latent_classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create object of class RprobitB_latent_classes — RprobitB_latent_classes","text":"","code":"RprobitB_latent_classes(latent_classes = NULL)"},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_latent_classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create object of class RprobitB_latent_classes — RprobitB_latent_classes","text":"latent_classes Either NULL (latent classes) list parameters specifying number latent classes updating scheme: C: fixed number (greater equal 1) latent classes, set 1 per default. either weight_update = TRUE dp_update = TRUE (.e. classes updated), C equals initial number latent classes. weight_update: boolean, set TRUE weight-based update latent classes. See ... details. dp_update: boolean, set TRUE update latent classes based Dirichlet process. See ... details. Cmax: maximum number latent classes. buffer: number iterations wait next weight-based update latent classes. epsmin: threshold weight (0 1) removing latent class weight-based updating scheme. epsmax: threshold weight (0 1) splitting latent class weight-based updating scheme. distmin: (non-negative) threshold class mean difference joining two latent classes weight-based updating scheme.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_latent_classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create object of class RprobitB_latent_classes — RprobitB_latent_classes","text":"object class RprobitB_latent_classes.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_latent_classes.html","id":"why-update-latent-classes-","dir":"Reference","previous_headings":"","what":"Why update latent classes?","title":"Create object of class RprobitB_latent_classes — RprobitB_latent_classes","text":"order specify number latent classes estimation.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_latent_classes.html","id":"what-options-to-update-latent-classes-exist-","dir":"Reference","previous_headings":"","what":"What options to update latent classes exist?","title":"Create object of class RprobitB_latent_classes — RprobitB_latent_classes","text":"Currently two updating schemes implemented, weight-based via Dirichlet process, see vignette modeling heterogeneity.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_latent_classes.html","id":"what-is-the-default-behavior-","dir":"Reference","previous_headings":"","what":"What is the default behavior?","title":"Create object of class RprobitB_latent_classes — RprobitB_latent_classes","text":"One latent class without updates specified per default. Print RprobitB_latent_classes-object see summary relevant (default) parameter settings.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_latent_classes.html","id":"why-is-cmax-required-","dir":"Reference","previous_headings":"","what":"Why is Cmax required?","title":"Create object of class RprobitB_latent_classes — RprobitB_latent_classes","text":"implementation requires upper bound number latent classes saving Gibbs samples. However, restriction since number latent classes bounded number deciders case. plot method visualizing sequence class numbers estimation can used check Cmax reached, see plot.RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_latent_classes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create object of class RprobitB_latent_classes — RprobitB_latent_classes","text":"","code":"### default setting RprobitB:::RprobitB_latent_classes() #> Latent classes #> C = 1   ### setting for a fixed number of two latent classes RprobitB:::RprobitB_latent_classes(list(C = 2)) #> Latent classes #> C = 2   ### setting for weight-based on Dirichlet process-based updates RprobitB:::RprobitB_latent_classes(   list(\"weight_update\" = TRUE, \"dp_update\" = TRUE) ) #> Latent classes #> DP-based update: FALSE  #> Weight-based update: TRUE  #> Initial classes: 1  #> Maximum classes: 10  #> Updating buffer: 100  #> Minimum class weight: 0.01  #> Maximum class weight: 0.99  #> Mimumum class distance: 0.1"},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_normalization.html","id":null,"dir":"Reference","previous_headings":"","what":"Create object of class RprobitB_normalization — RprobitB_normalization","title":"Create object of class RprobitB_normalization — RprobitB_normalization","text":"function creates object class RprobitB_normalization, determines utility scale level.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_normalization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create object of class RprobitB_normalization — RprobitB_normalization","text":"","code":"RprobitB_normalization(   level,   scale = \"Sigma_1,1 := 1\",   form,   re = NULL,   alternatives,   base,   ordered = FALSE )"},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_normalization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create object of class RprobitB_normalization — RprobitB_normalization","text":"level alternative name respect utility differences computed. Currently, differences respect last alternative can computed. scale character determines utility scale. form <parameter> := <value>, <parameter> either name fixed effect Sigma_<j>,<j> <j>th diagonal element Sigma, <value> value fixed parameter. form formula object used specify model equation. structure choice ~ | B | C, choice name dependent variable (choices), names alternative choice situation specific covariates coefficient constant across alternatives, B names choice situation specific covariates alternative specific coefficients, C names alternative choice situation specific covariates alternative specific coefficients. Multiple covariates (one type) separated + sign. default, alternative specific constants (ASCs) added model. can removed adding +0 second spot. ordered probit model (ordered = TRUE), formula object simple structure choice ~ . ASCs estimated. re character (vector) covariates form random effects. re = NULL (default), random effects. random effects ASCs, include \"ASC\" re. alternatives character vector names choice alternatives. specified, choice set defined observed choices. ordered = TRUE, alternatives assumed specified alternatives ordered worst best. base character, name base alternative covariates alternative specific (.e. type 2 covariates ASCs). Ignored set NULL model alternative specific covariates (e.g. ordered probit model). Per default, base last element alternatives. ordered boolean, FALSE per default. TRUE, choice set alternatives assumed ordered worst best.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_normalization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create object of class RprobitB_normalization — RprobitB_normalization","text":"object class RprobitB_normalization, list level, list elements level (number alternative specified input level) name (name alternative, .e. input level), alternatively NA ordered probit case, scale, list elements parameter (either \"s\" element Sigma \"\"element alpha), parameter index, fixed value. parameter = \"\", also name fixed effect.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_normalization.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create object of class RprobitB_normalization — RprobitB_normalization","text":"choice model normalized respect utility level scale. level normalization, RprobitB takes utility differences respect one alternative. ordered model one utility modeled, RprobitB fixes first utility threshold 0. scale normalization, RprobitB fixes one model parameter. Per default, first error-term variance fixed 1. specified via scale = \"Sigma_1,1 := 1\". Alternatively, error-term variance non-random coefficient can fixed.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_normalization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create object of class RprobitB_normalization — RprobitB_normalization","text":"","code":"RprobitB:::RprobitB_normalization(   level = \"B\",   scale = \"price := -1\",   form = choice ~ price + time + comfort + change | 1,   re = \"time\",   alternatives = c(\"A\", \"B\"),   base = \"A\" ) #> Level: Utility differences with respect to alternative 'B'. #> Scale: Coefficient of effect 'price' (alpha_1) fixed to -1."},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Define probit model parameter — RprobitB_parameter","title":"Define probit model parameter — RprobitB_parameter","text":"function creates object class RprobitB_parameter, contains parameters probit model. sample = TRUE, missing parameters sampled. parameters checked values P_f, P_r, J, N.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define probit model parameter — RprobitB_parameter","text":"","code":"RprobitB_parameter(   P_f,   P_r,   J,   N,   ordered = FALSE,   alpha = NULL,   C = NULL,   s = NULL,   b = NULL,   Omega = NULL,   Sigma = NULL,   Sigma_full = NULL,   beta = NULL,   z = NULL,   d = NULL,   seed = NULL,   sample = TRUE )"},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define probit model parameter — RprobitB_parameter","text":"P_f number covariates connected fixed coefficient (can 0). P_r number covariates connected random coefficient (can 0). J number (greater equal 2) choice alternatives. N number (greater equal 1) decision makers. ordered boolean, FALSE per default. TRUE, choice set alternatives assumed ordered worst best. alpha fixed coefficient vector length P_f. Set NA P_f = 0. C number (greater equal 1) latent classes decision makers. Set NA P_r = 0. Otherwise, C = 1 per default. s vector class weights length C. Set NA P_r = 0. identifiability, vector must non-ascending. b matrix class means columns dimension P_r x C. Set NA P_r = 0. Omega matrix class covariance matrices columns dimension P_r*P_r x C. Set NA P_r = 0. Sigma differenced error term covariance matrix dimension J-1 x J-1 respect alternative J. case ordered = TRUE, numeric, single error term variance. Sigma_full error term covariance matrix dimension J x J. Internally, Sigma_full gets differenced respect alternative J, becomes identified covariance matrix dimension J-1 x J-1. Sigma_full ignored Sigma specified ordered = TRUE. beta matrix decision-maker specific coefficient vectors dimension P_r x N. Set NA P_r = 0. z vector allocation variables length N. Set NA P_r = 0. d numeric vector logarithmic increases utility thresholds ordered probit case (ordered = TRUE) length J-2. seed Set seed sampling missing parameters. sample boolean, TRUE (default) missing parameters get sampled.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define probit model parameter — RprobitB_parameter","text":"object class RprobitB_parameter, .e. named list model parameters alpha, C, s, b, Omega, Sigma, Sigma_full, beta, z.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/RprobitB_parameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define probit model parameter — RprobitB_parameter","text":"","code":"RprobitB_parameter(P_f = 1, P_r = 2, J = 3, N = 10) #> alpha : 2.9 #>  #> C : 1 #>  #> s : 1 #>  #> b : 2 x 1 matrix of doubles  #>  #>      [,1] #> [1,] -1.2 #> [2,]  2.4 #>  #>  #> Omega : 4 x 1 matrix of doubles  #>  #>            [,1] #> [1,]  1.6118453 #> [2,] -0.6384574 #> [3,] -0.6384574 #> [4,]  2.5679787 #>  #>  #> Sigma : 2 x 2 matrix of doubles  #>  #>           [,1]     [,2] #> [1,] 11.036268 2.401671 #> [2,]  2.401671 2.135436 #>  #>  #> Sigma_full : 3 x 3 matrix of doubles  #>  #>            [,1]        [,2]        [,3] #> [1,]  7.8614381  0.51255794 -1.36761438 #> [2,]  0.5125579  1.53204015 -0.08189755 #> [3,] -1.3676144 -0.08189755  0.43960120 #>  #>  #> beta : 2 x 10 matrix of doubles  #>  #>        [,1]   [,2]   [,3] ...   [,10] #> [1,] 0.9820 0.4434 0.8024 ... -1.2770 #> [2,] 1.3327 0.4950 2.6549 ...  3.3514 #>  #>  #> z : integer vector of length 10  #>  #> 1 1 1 ... 1 #>  #> d : NA #>"},{"path":"https://loelschlaeger.de/RprobitB/reference/WAIC.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute WAIC value — WAIC","title":"Compute WAIC value — WAIC","text":"function computes WAIC value RprobitB_fit object.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/WAIC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute WAIC value — WAIC","text":"","code":"WAIC(x)"},{"path":"https://loelschlaeger.de/RprobitB/reference/WAIC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute WAIC value — WAIC","text":"x object class RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/WAIC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute WAIC value — WAIC","text":"numeric, WAIC value, following attributes: se_waic, standard error WAIC value, lppd, log pointwise predictive density, p_waic, effective number parameters, p_waic_vec, vector summands p_waic, p_si, output compute_p_si.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/WAIC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute WAIC value — WAIC","text":"WAIC short Widely Applicable (Watanabe-Akaike) Information Criterion. AIC BIC, smaller WAIC value better model. definition $$\\text{WAIC} = -2 \\cdot \\text{lppd} + 2 \\cdot  p_\\text{WAIC},$$ \\(\\text{lppd}\\) stands log pointwise predictive density \\(p_\\text{WAIC}\\) penalty term proportional variance posterior distribution sometimes called effective number parameters. \\(\\text{lppd}\\) approximated follows. Let $$p_{} = \\Pr(y_i\\mid \\theta_s)$$ probability observation \\(y_i\\) given \\(s\\)th set \\(\\theta_s\\) parameter samples posterior. $$\\text{lppd} = \\sum_i \\log S^{-1} \\sum_s p_{si}.$$ penalty term computed sum variances log-probability observation: $$p_\\text{WAIC} = \\sum_i \\mathbb{V}_{\\theta} \\left[ \\log p_{si} \\right].$$ \\(\\text{WAIC}\\) standard error \\(\\text{SE}\\) $$\\text{SE} = \\sqrt{n \\cdot \\mathbb{V}_i \\left[-2 \\left(\\text{lppd} - \\mathbb{V}_{\\theta} \\left[ \\log p_{si} \\right] \\right)\\right]},$$ \\(n\\) number choices.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/WAIC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute WAIC value — WAIC","text":"","code":"data(\"model_train\", package = \"RprobitB\") x <- WAIC(model_train) print(x) #> 3463.74 (0.19)  if (FALSE) { ### plot convergence plot(x) }"},{"path":"https://loelschlaeger.de/RprobitB/reference/as_cov_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-label alternative specific covariates — as_cov_names","title":"Re-label alternative specific covariates — as_cov_names","text":"RprobitB, alternative specific covariates must named format \"<covariate>_<alternative>\". convenience function generates format given choice_data set.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/as_cov_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-label alternative specific covariates — as_cov_names","text":"","code":"as_cov_names(choice_data, cov, alternatives)"},{"path":"https://loelschlaeger.de/RprobitB/reference/as_cov_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-label alternative specific covariates — as_cov_names","text":"choice_data data.frame choice data wide format, .e. row represents one choice occasion. cov character vector names alternative specific covariates choice_data. alternatives (character numeric) vector alternative names.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/as_cov_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-label alternative specific covariates — as_cov_names","text":"choice_data input updated column names.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/as_cov_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Re-label alternative specific covariates — as_cov_names","text":"","code":"data(\"Electricity\", package = \"mlogit\") cov <- c(\"pf\",\"cl\",\"loc\",\"wk\",\"tod\",\"seas\") alternatives <- 1:4 colnames(Electricity) #>  [1] \"choice\" \"id\"     \"pf1\"    \"pf2\"    \"pf3\"    \"pf4\"    \"cl1\"    \"cl2\"    #>  [9] \"cl3\"    \"cl4\"    \"loc1\"   \"loc2\"   \"loc3\"   \"loc4\"   \"wk1\"    \"wk2\"    #> [17] \"wk3\"    \"wk4\"    \"tod1\"   \"tod2\"   \"tod3\"   \"tod4\"   \"seas1\"  \"seas2\"  #> [25] \"seas3\"  \"seas4\"  Electricity <- as_cov_names(Electricity, cov, alternatives) colnames(Electricity) #>  [1] \"choice\" \"id\"     \"pf_1\"   \"pf_2\"   \"pf_3\"   \"pf_4\"   \"cl_1\"   \"cl_2\"   #>  [9] \"cl_3\"   \"cl_4\"   \"loc_1\"  \"loc_2\"  \"loc_3\"  \"loc_4\"  \"wk_1\"   \"wk_2\"   #> [17] \"wk_3\"   \"wk_4\"   \"tod_1\"  \"tod_2\"  \"tod_3\"  \"tod_4\"  \"seas_1\" \"seas_2\" #> [25] \"seas_3\" \"seas_4\""},{"path":"https://loelschlaeger.de/RprobitB/reference/check_form.html","id":null,"dir":"Reference","previous_headings":"","what":"Check model formula — check_form","title":"Check model formula — check_form","text":"function checks input form.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/check_form.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check model formula — check_form","text":"","code":"check_form(form, re = NULL, ordered = FALSE)"},{"path":"https://loelschlaeger.de/RprobitB/reference/check_form.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check model formula — check_form","text":"form formula object used specify model equation. structure choice ~ | B | C, choice name dependent variable (choices), names alternative choice situation specific covariates coefficient constant across alternatives, B names choice situation specific covariates alternative specific coefficients, C names alternative choice situation specific covariates alternative specific coefficients. Multiple covariates (one type) separated + sign. default, alternative specific constants (ASCs) added model. can removed adding +0 second spot. ordered probit model (ordered = TRUE), formula object simple structure choice ~ . ASCs estimated. re character (vector) covariates form random effects. re = NULL (default), random effects. random effects ASCs, include \"ASC\" re. ordered boolean, FALSE per default. TRUE, choice set alternatives assumed ordered worst best.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/check_form.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check model formula — check_form","text":"list contains following elements: input form. name choice dependent variable form. input re. list vars three character vectors covariate names three covariate types. boolean ASC, determining whether model ASCs.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/reference/check_form.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check model formula — check_form","text":"","code":"form <- choice ~ price + time + comfort + change re <- c(\"price\", \"time\") RprobitB:::check_form(form = form, re = re) #> $form #> choice ~ price + time + comfort + change #> <environment: 0x7f9f9b4c4c00> #>  #> $choice #> [1] \"choice\" #>  #> $re #> [1] \"price\" \"time\"  #>  #> $vars #> $vars[[1]] #> [1] \"price\"   \"time\"    \"comfort\" \"change\"  #>  #> $vars[[2]] #> character(0) #>  #> $vars[[3]] #> character(0) #>  #>  #> $ASC #> [1] TRUE #>"},{"path":"https://loelschlaeger.de/RprobitB/reference/check_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Check prior parameters — check_prior","title":"Check prior parameters — check_prior","text":"function checks compatibility submitted parameters prior distributions sets missing values default values.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/check_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check prior parameters — check_prior","text":"","code":"check_prior(   P_f,   P_r,   J,   ordered = FALSE,   eta = numeric(P_f),   Psi = diag(P_f),   delta = 1,   xi = numeric(P_r),   D = diag(P_r),   nu = P_r + 2,   Theta = diag(P_r),   kappa = if (ordered) 4 else (J + 1),   E = if (ordered) diag(1) else diag(J - 1),   zeta = numeric(J - 2),   Z = diag(J - 2) )"},{"path":"https://loelschlaeger.de/RprobitB/reference/check_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check prior parameters — check_prior","text":"P_f number covariates connected fixed coefficient (can 0). P_r number covariates connected random coefficient (can 0). J number (greater equal 2) choice alternatives. ordered boolean, FALSE per default. TRUE, choice set alternatives assumed ordered worst best. eta mean vector length P_f normal prior alpha. Per default, eta = numeric(P_f). Psi covariance matrix dimension P_f x P_f normal prior alpha. Per default, Psi = diag(P_f). delta numeric concentration parameter vector rep(delta,C) Dirichlet prior s. Per default, delta = 1. case Dirichlet process-based updates latent classes, delta = 0.1 per default. xi mean vector length P_r normal prior b_c. Per default, xi = numeric(P_r). D covariance matrix dimension P_r x P_r normal prior b_c. Per default, D = diag(P_r). nu degrees freedom (natural number greater P_r) Inverse Wishart prior Omega_c. Per default, nu = P_r + 2. Theta scale matrix dimension P_r x P_r Inverse Wishart prior Omega_c. Per default, Theta = diag(P_r). kappa degrees freedom (natural number greater J-1) Inverse Wishart prior Sigma. Per default, kappa = J + 1. E scale matrix dimension J-1 x J-1 Inverse Wishart prior Sigma. Per default, E = diag(J - 1). zeta mean vector length J - 2 normal prior logarithmic increments d utility thresholds ordered probit model. Per default, zeta = numeric(J - 2). Z covariance matrix dimension J-2 x J-2 normal prior logarithmic increments d utility thresholds ordered probit model. Per default, Z = diag(J - 2).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/check_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check prior parameters — check_prior","text":"object class RprobitB_prior, list containing prior parameters. Parameters relevant model configuration set NA.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/check_prior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check prior parameters — check_prior","text":"priori, assume model parameters follow distributions: \\(\\alpha \\sim N(\\eta, \\Psi)\\) \\(s \\sim Dir(\\delta)\\) \\(b_c \\sim N(\\xi, D)\\) classes \\(c\\) \\(\\Omega_c \\sim IW(\\nu,\\Theta)\\) classes \\(c\\) \\(\\Sigma \\sim IW(\\kappa,E)\\) \\(d \\sim N(\\zeta, Z)\\) \\(N\\) denotes normal, \\(Dir\\) Dirichlet, \\(IW\\) Inverted Wishart distribution.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/check_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check prior parameters — check_prior","text":"","code":"check_prior(P_f = 1, P_r = 2, J = 3, ordered = TRUE) #> $eta #> [1] 0 #>  #> $Psi #>      [,1] #> [1,]    1 #>  #> $delta #> [1] 1 #>  #> $xi #> [1] 0 0 #>  #> $D #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    1 #>  #> $nu #> [1] 4 #>  #> $Theta #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    1 #>  #> $kappa #> [1] 4 #>  #> $E #>      [,1] #> [1,]    1 #>  #> $zeta #> [1] 0 #>  #> $Z #>      [,1] #> [1,]    1 #>  #> attr(,\"class\") #> [1] \"RprobitB_prior\" \"list\""},{"path":"https://loelschlaeger.de/RprobitB/reference/choice_berserk.html","id":null,"dir":"Reference","previous_headings":"","what":"Data of berserking choice — choice_berserk","title":"Data of berserking choice — choice_berserk","text":"dataset includes binary 'berserking' choice participants yearly bullet arena 2022 online chess platform https://lichess.org. Berserking choice player beginning game: player clicks 'Berserk button', lose half clock time, win worth one extra tournament point.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/choice_berserk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data of berserking choice — choice_berserk","text":"","code":"data(choice_berserk)"},{"path":"https://loelschlaeger.de/RprobitB/reference/choice_berserk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data of berserking choice — choice_berserk","text":"data frame containing berserking choices 6174 chess players 126902 online bullet (1+0) games. consists following columns: player_id, unique lichess username chess player game_id, unique lichess identification game berserk, 1 player berserked 0 , white, 1 player white pieces 0 rating, player's lichess bullet rating start game rating_diff, rating difference opponent lost, 1 player lost game (hence lost streak) 0 min_rem, number minutes left tournament streak, 1 player streak (see details) 0 ","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/choice_berserk.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data of berserking choice — choice_berserk","text":"data obtained via lichess API https://lichess.org/api tournament id 'RibHfoX6' 2022-03-29.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/choice_berserk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data of berserking choice — choice_berserk","text":"'berserk' feature online chess platform https://lichess.org. game starts, player can click button, lose half clock time, win worth one extra tournament point. considered tournament following characteristics: tournament startet 2022-01-10 17:00:25 lasted 240 minutes. time control 1 minute per player per game (bullet format). players automatically immediately paired game finished, -called 'arena tournament' modus. players can pause participation time. win base score 2 points, draw 1 point, loss worth points. player wins two games consecutively, start double point streak, means following games continue worth double points fail win game.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/choice_berserk.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data of berserking choice — choice_berserk","text":"See https://lichess.org/tournament/help?system=arena information tournament format.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/choice_chess_opening.html","id":null,"dir":"Reference","previous_headings":"","what":"Data of chess opening choice — choice_chess_opening","title":"Data of chess opening choice — choice_chess_opening","text":"dataset includes opening choices 37229 chess games.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/choice_chess_opening.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data of chess opening choice — choice_chess_opening","text":"","code":"data(choice_chess_opening)"},{"path":"https://loelschlaeger.de/RprobitB/reference/choice_chess_opening.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data of chess opening choice — choice_chess_opening","text":"data frame following columns: fideid_w, FIDE identifier White player fideid_b, FIDE identifier Black player w1, first move White player b1, first move Black player sex_w, gender White player (0 male 1 female) sex_b, gender Black player (0 male 1 female) byear_w, birth year White player byear_b, birth year Black player rating_w, FIDE rating White player rating_b, FIDE rating Black player date, date chess game result, result chess game game, full notation chess game","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/choice_chess_opening.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data of chess opening choice — choice_chess_opening","text":"opening moves scraped 'Week Chess Archive' https://theweekinchess.com/twic issues 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428. player's metadata (fideid, sex, byear, rating) added matching pairings names official FIDE rating list http://ratings.fide.com 2022-03-28. Ambiguous matches dropped. Chess games blitz rapid time control ignored.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/choice_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute choice probabilities — choice_probabilities","title":"Compute choice probabilities — choice_probabilities","text":"function returns choice probabilities RprobitB_fit object.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/choice_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute choice probabilities — choice_probabilities","text":"","code":"choice_probabilities(x, data = NULL, par_set = mean)"},{"path":"https://loelschlaeger.de/RprobitB/reference/choice_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute choice probabilities — choice_probabilities","text":"x object class RprobitB_fit. data Either NULL object class RprobitB_data. former case, choice probabilities computed data used model fitting. Alternatively, new data set can provided. par_set Specifying parameter set calculation either function computes posterior point estimate (default mean()), \"true\" select true parameter set, object class RprobitB_parameter.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/choice_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute choice probabilities — choice_probabilities","text":"data frame choice probabilities choice situations rows alternatives columns. first two columns decider identifier \"id\" choice situation identifier \"idc\".","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/choice_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute choice probabilities — choice_probabilities","text":"","code":"data <- simulate_choices(form = choice ~ covariate, N = 10, T = 10, J = 2) x <- fit_model(data) #> Computing sufficient statistics - 0 of 4   #> Computing sufficient statistics - 1 of 4   #> Computing sufficient statistics - 2 of 4   #> Computing sufficient statistics - 3 of 4   #> Computing sufficient statistics - 4 of 4   #> MCMC iteration - 1 of 1000   #> MCMC iteration - 10 of 1000   #> MCMC iteration - 20 of 1000   #> MCMC iteration - 30 of 1000   #> MCMC iteration - 40 of 1000   #> MCMC iteration - 50 of 1000   #> MCMC iteration - 60 of 1000   #> MCMC iteration - 70 of 1000   #> MCMC iteration - 80 of 1000   #> MCMC iteration - 90 of 1000   #> MCMC iteration - 100 of 1000   #> MCMC iteration - 110 of 1000   #> MCMC iteration - 120 of 1000   #> MCMC iteration - 130 of 1000   #> MCMC iteration - 140 of 1000   #> MCMC iteration - 150 of 1000   #> MCMC iteration - 160 of 1000   #> MCMC iteration - 170 of 1000   #> MCMC iteration - 180 of 1000   #> MCMC iteration - 190 of 1000   #> MCMC iteration - 200 of 1000   #> MCMC iteration - 210 of 1000   #> MCMC iteration - 220 of 1000   #> MCMC iteration - 230 of 1000   #> MCMC iteration - 240 of 1000   #> MCMC iteration - 250 of 1000   #> MCMC iteration - 260 of 1000   #> MCMC iteration - 270 of 1000   #> MCMC iteration - 280 of 1000   #> MCMC iteration - 290 of 1000   #> MCMC iteration - 300 of 1000   #> MCMC iteration - 310 of 1000   #> MCMC iteration - 320 of 1000   #> MCMC iteration - 330 of 1000   #> MCMC iteration - 340 of 1000   #> MCMC iteration - 350 of 1000   #> MCMC iteration - 360 of 1000   #> MCMC iteration - 370 of 1000   #> MCMC iteration - 380 of 1000   #> MCMC iteration - 390 of 1000   #> MCMC iteration - 400 of 1000   #> MCMC iteration - 410 of 1000   #> MCMC iteration - 420 of 1000   #> MCMC iteration - 430 of 1000   #> MCMC iteration - 440 of 1000   #> MCMC iteration - 450 of 1000   #> MCMC iteration - 460 of 1000   #> MCMC iteration - 470 of 1000   #> MCMC iteration - 480 of 1000   #> MCMC iteration - 490 of 1000   #> MCMC iteration - 500 of 1000   #> MCMC iteration - 510 of 1000   #> MCMC iteration - 520 of 1000   #> MCMC iteration - 530 of 1000   #> MCMC iteration - 540 of 1000   #> MCMC iteration - 550 of 1000   #> MCMC iteration - 560 of 1000   #> MCMC iteration - 570 of 1000   #> MCMC iteration - 580 of 1000   #> MCMC iteration - 590 of 1000   #> MCMC iteration - 600 of 1000   #> MCMC iteration - 610 of 1000   #> MCMC iteration - 620 of 1000   #> MCMC iteration - 630 of 1000   #> MCMC iteration - 640 of 1000   #> MCMC iteration - 650 of 1000   #> MCMC iteration - 660 of 1000   #> MCMC iteration - 670 of 1000   #> MCMC iteration - 680 of 1000   #> MCMC iteration - 690 of 1000   #> MCMC iteration - 700 of 1000   #> MCMC iteration - 710 of 1000   #> MCMC iteration - 720 of 1000   #> MCMC iteration - 730 of 1000   #> MCMC iteration - 740 of 1000   #> MCMC iteration - 750 of 1000   #> MCMC iteration - 760 of 1000   #> MCMC iteration - 770 of 1000   #> MCMC iteration - 780 of 1000   #> MCMC iteration - 790 of 1000   #> MCMC iteration - 800 of 1000   #> MCMC iteration - 810 of 1000   #> MCMC iteration - 820 of 1000   #> MCMC iteration - 830 of 1000   #> MCMC iteration - 840 of 1000   #> MCMC iteration - 850 of 1000   #> MCMC iteration - 860 of 1000   #> MCMC iteration - 870 of 1000   #> MCMC iteration - 880 of 1000   #> MCMC iteration - 890 of 1000   #> MCMC iteration - 900 of 1000   #> MCMC iteration - 910 of 1000   #> MCMC iteration - 920 of 1000   #> MCMC iteration - 930 of 1000   #> MCMC iteration - 940 of 1000   #> MCMC iteration - 950 of 1000   #> MCMC iteration - 960 of 1000   #> MCMC iteration - 970 of 1000   #> MCMC iteration - 980 of 1000   #> MCMC iteration - 990 of 1000   #> MCMC iteration - 1000 of 1000   #> Computing log-likelihood choice_probabilities(x) #>     id idc         A          B #> 1    1   1 0.8926961 0.10730392 #> 2    1   2 0.8697749 0.13022508 #> 3    1   3 0.8527544 0.14724555 #> 4    1   4 0.9553648 0.04463518 #> 5    1   5 0.9455918 0.05440821 #> 6    1   6 0.8684520 0.13154798 #> 7    1   7 0.9384170 0.06158300 #> 8    1   8 0.9376789 0.06232108 #> 9    1   9 0.8705108 0.12948923 #> 10   1  10 0.8565608 0.14343924 #> 11   2   1 0.7279352 0.27206477 #> 12   2   2 0.9314129 0.06858710 #> 13   2   3 0.9550501 0.04494990 #> 14   2   4 0.9750405 0.02495951 #> 15   2   5 0.8696282 0.13037180 #> 16   2   6 0.8941981 0.10580187 #> 17   2   7 0.8899189 0.11008108 #> 18   2   8 0.9617789 0.03822113 #> 19   2   9 0.8625166 0.13748337 #> 20   2  10 0.7707261 0.22927388 #> 21   3   1 0.8980949 0.10190507 #> 22   3   2 0.9539458 0.04605417 #> 23   3   3 0.6969952 0.30300480 #> 24   3   4 0.8711711 0.12882886 #> 25   3   5 0.9164518 0.08354822 #> 26   3   6 0.9270061 0.07299389 #> 27   3   7 0.9475348 0.05246522 #> 28   3   8 0.9048294 0.09517062 #> 29   3   9 0.7586473 0.24135267 #> 30   3  10 0.8225598 0.17744020 #> 31   4   1 0.9024692 0.09753085 #> 32   4   2 0.7609726 0.23902742 #> 33   4   3 0.8788950 0.12110501 #> 34   4   4 0.8619060 0.13809403 #> 35   4   5 0.8191215 0.18087849 #> 36   4   6 0.8596411 0.14035887 #> 37   4   7 0.7938147 0.20618529 #> 38   4   8 0.8992170 0.10078301 #> 39   4   9 0.9169281 0.08307186 #> 40   4  10 0.9155567 0.08444333 #> 41   5   1 0.8660351 0.13396492 #> 42   5   2 0.8202179 0.17978213 #> 43   5   3 0.9084835 0.09151654 #> 44   5   4 0.9322482 0.06775184 #> 45   5   5 0.8801689 0.11983105 #> 46   5   6 0.8350191 0.16498088 #> 47   5   7 0.9235542 0.07644575 #> 48   5   8 0.8786129 0.12138712 #> 49   5   9 0.8851628 0.11483719 #> 50   5  10 0.7942424 0.20575762 #> 51   6   1 0.8973914 0.10260862 #> 52   6   2 0.9371438 0.06285622 #> 53   6   3 0.8484750 0.15152497 #> 54   6   4 0.8688129 0.13118712 #> 55   6   5 0.8803665 0.11963349 #> 56   6   6 0.8631173 0.13688272 #> 57   6   7 0.8012799 0.19872007 #> 58   6   8 0.8529060 0.14709404 #> 59   6   9 0.8174100 0.18258998 #> 60   6  10 0.7722934 0.22770663 #> 61   7   1 0.9059897 0.09401034 #> 62   7   2 0.8264436 0.17355644 #> 63   7   3 0.9190184 0.08098162 #> 64   7   4 0.8862742 0.11372580 #> 65   7   5 0.8366373 0.16336268 #> 66   7   6 0.9225120 0.07748800 #> 67   7   7 0.8790120 0.12098803 #> 68   7   8 0.7717367 0.22826333 #> 69   7   9 0.9023407 0.09765926 #> 70   7  10 0.8989583 0.10104170 #> 71   8   1 0.7491997 0.25080033 #> 72   8   2 0.8795624 0.12043762 #> 73   8   3 0.9268663 0.07313365 #> 74   8   4 0.8735723 0.12642765 #> 75   8   5 0.9237167 0.07628328 #> 76   8   6 0.7878325 0.21216751 #> 77   8   7 0.8990106 0.10098936 #> 78   8   8 0.7316102 0.26838984 #> 79   8   9 0.8270428 0.17295716 #> 80   8  10 0.9359437 0.06405629 #> 81   9   1 0.9133619 0.08663809 #> 82   9   2 0.7751809 0.22481908 #> 83   9   3 0.8028734 0.19712664 #> 84   9   4 0.8796183 0.12038171 #> 85   9   5 0.8680914 0.13190856 #> 86   9   6 0.8835268 0.11647320 #> 87   9   7 0.8553996 0.14460038 #> 88   9   8 0.7882846 0.21171537 #> 89   9   9 0.9369909 0.06300910 #> 90   9  10 0.8783541 0.12164587 #> 91  10   1 0.7766358 0.22336425 #> 92  10   2 0.9112276 0.08877239 #> 93  10   3 0.8160917 0.18390829 #> 94  10   4 0.7608823 0.23911767 #> 95  10   5 0.8047029 0.19529715 #> 96  10   6 0.8315698 0.16843019 #> 97  10   7 0.8836347 0.11636529 #> 98  10   8 0.9296747 0.07032530 #> 99  10   9 0.9294009 0.07059910 #> 100 10  10 0.8057214 0.19427857"},{"path":"https://loelschlaeger.de/RprobitB/reference/classification.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify deciders preference-based — classification","title":"Classify deciders preference-based — classification","text":"function classifies deciders based allocation components mixing distribution.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/classification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify deciders preference-based — classification","text":"","code":"classification(x, add_true = FALSE)"},{"path":"https://loelschlaeger.de/RprobitB/reference/classification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify deciders preference-based — classification","text":"x object class RprobitB_fit. add_true Set TRUE add true class memberships output (available).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/classification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify deciders preference-based — classification","text":"data frame. row names decider ids. first C columns contain relative frequencies deciders allocated C classes. Next, column est contains estimated class decider based highest allocation frequency. add_true, next column true contains true class memberships.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/classification.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classify deciders preference-based — classification","text":"function can used model least one random effect (.e. P_r >= 1) least two latent classes (.e. C >= 2). case, let \\(z_1,\\dots,z_N\\) denote class allocations \\(N\\) deciders based estimated mixed coefficients \\(\\beta = (\\beta_1,\\dots,\\beta_N)\\). Independently decider \\(n\\), conditional probability \\(\\Pr(z_n = c \\mid s,\\beta_n,b,\\Omega)\\) \\(\\beta_n\\) allocated class \\(c\\) \\(c=1,\\dots,C\\) depends class allocation vector \\(s\\), class means \\(b=(b_c)_c\\) class covariance matrices \\(Omega=(Omega_c)_c\\) proportional $$s_c \\phi(\\beta_n \\mid b_c,Omega_c).$$ function displays relative frequencies decider allocated classes Gibbs sampling. thinned samples burn-period considered.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/reference/coef.RprobitB_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract model effects — coef.RprobitB_fit","title":"Extract model effects — coef.RprobitB_fit","text":"function extracts estimated model effects.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/coef.RprobitB_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract model effects — coef.RprobitB_fit","text":"","code":"# S3 method for RprobitB_fit coef(object, ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/coef.RprobitB_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract model effects — coef.RprobitB_fit","text":"object object class RprobitB_fit. ... Ignored.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/coef.RprobitB_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract model effects — coef.RprobitB_fit","text":"object class RprobitB_coef.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/compute_choice_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute probit choice probabilities — compute_choice_probabilities","title":"Compute probit choice probabilities — compute_choice_probabilities","text":"helper function choice_probabilities computes probit choice probabilities single choice situation J alternatives.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/compute_choice_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute probit choice probabilities — compute_choice_probabilities","text":"","code":"compute_choice_probabilities(X, alternatives, parameter, ordered = FALSE)"},{"path":"https://loelschlaeger.de/RprobitB/reference/compute_choice_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute probit choice probabilities — compute_choice_probabilities","text":"X matrix covariates J rows P_f + P_r columns, first P_f columns connected fixed coefficients last P_r columns connected random coefficients. alternatives vector unique integers 1 J, indicating alternatives choice probabilities computed. parameter object class RprobitB_parameter. ordered boolean, FALSE per default. TRUE, choice set alternatives assumed ordered worst best.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/compute_choice_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute probit choice probabilities — compute_choice_probabilities","text":"probability vector length length(alternatives).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/compute_p_si.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute choice probabilities at posterior samples — compute_p_si","title":"Compute choice probabilities at posterior samples — compute_p_si","text":"function computes probability observed choice (normalized, burned thinned) samples posterior. probabilities required compute WAIC marginal model likelihood mml.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/compute_p_si.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute choice probabilities at posterior samples — compute_p_si","text":"","code":"compute_p_si(x, ncores = parallel::detectCores() - 1, recompute = FALSE)"},{"path":"https://loelschlaeger.de/RprobitB/reference/compute_p_si.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute choice probabilities at posterior samples — compute_p_si","text":"x object class RprobitB_fit. ncores function parallelized, set number cores . recompute Set TRUE recompute probabilities.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/compute_p_si.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute choice probabilities at posterior samples — compute_p_si","text":"object x, including object p_si, matrix probabilities, observations rows posterior samples columns.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/compute_p_si.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute choice probabilities at posterior samples — compute_p_si","text":"","code":"# \\donttest{ ### takes ~5 min computation time data(\"model_train\", package = \"RprobitB\") model_train <- compute_p_si(model_train, ncores = 1, recompute = TRUE) # }"},{"path":"https://loelschlaeger.de/RprobitB/reference/cov_mix.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract estimated covariance matrix of mixing distribution — cov_mix","title":"Extract estimated covariance matrix of mixing distribution — cov_mix","text":"convenience function returns estimated covariance matrix mixing distribution.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/cov_mix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract estimated covariance matrix of mixing distribution — cov_mix","text":"","code":"cov_mix(x, cor = FALSE)"},{"path":"https://loelschlaeger.de/RprobitB/reference/cov_mix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract estimated covariance matrix of mixing distribution — cov_mix","text":"x object class RprobitB_fit. cor TRUE, returns correlation matrix instead.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/cov_mix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract estimated covariance matrix of mixing distribution — cov_mix","text":"estimated covariance matrix mixing distribution. case multiple classes, list matrices class.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_Omega.html","id":null,"dir":"Reference","previous_headings":"","what":"Create labels for Omega — create_labels_Omega","title":"Create labels for Omega — create_labels_Omega","text":"function creates labels model parameter Omega.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_Omega.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create labels for Omega — create_labels_Omega","text":"","code":"create_labels_Omega(P_r, C, cov_sym)"},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_Omega.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create labels for Omega — create_labels_Omega","text":"P_r number covariates connected random coefficient (can 0). cov_sym Set TRUE labels symmetric covariance elements.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_Omega.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create labels for Omega — create_labels_Omega","text":"vector labels model parameter Omega length P_r^2 * C P_r > 0 cov_sym = TRUE length P_r*(P_r+1)/2*C cov_sym = FALSE NULL otherwise.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_Omega.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create labels for Omega — create_labels_Omega","text":"labels form \"c.p1,p2\", c latent class number p1,p2 indeces two random coefficients.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_Omega.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create labels for Omega — create_labels_Omega","text":"","code":"RprobitB:::create_labels_Omega(2, 3, cov_sym = TRUE) #>  [1] \"1.1,1\" \"1.1,2\" \"1.2,1\" \"1.2,2\" \"2.1,1\" \"2.1,2\" \"2.2,1\" \"2.2,2\" \"3.1,1\" #> [10] \"3.1,2\" \"3.2,1\" \"3.2,2\" RprobitB:::create_labels_Omega(2, 3, cov_sym = FALSE) #> [1] \"1.1,1\" \"1.1,2\" \"1.2,2\" \"2.1,1\" \"2.1,2\" \"2.2,2\" \"3.1,1\" \"3.1,2\" \"3.2,2\""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_Sigma.html","id":null,"dir":"Reference","previous_headings":"","what":"Create labels for Sigma — create_labels_Sigma","title":"Create labels for Sigma — create_labels_Sigma","text":"function creates labels model parameter Sigma.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_Sigma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create labels for Sigma — create_labels_Sigma","text":"","code":"create_labels_Sigma(J, cov_sym, ordered = FALSE)"},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_Sigma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create labels for Sigma — create_labels_Sigma","text":"J number (greater equal 2) choice alternatives. cov_sym Set TRUE labels symmetric covariance elements. ordered boolean, FALSE per default. TRUE, choice set alternatives assumed ordered worst best.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_Sigma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create labels for Sigma — create_labels_Sigma","text":"vector labels model parameter Sigma length (J-1)^2 cov_sym = TRUE length J*(J-1)/2 cov_sym = FALSE. ordered = TRUE, Sigma one element.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_Sigma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create labels for Sigma — create_labels_Sigma","text":"labels form \"j1,j2\", j1,j2 indices two alternatives j1 j2.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_Sigma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create labels for Sigma — create_labels_Sigma","text":"","code":"RprobitB:::create_labels_Sigma(3, cov_sym = TRUE) #> [1] \"1,1\" \"1,2\" \"2,1\" \"2,2\" RprobitB:::create_labels_Sigma(4, cov_sym = FALSE) #> [1] \"1,1\" \"1,2\" \"1,3\" \"2,2\" \"2,3\" \"3,3\" RprobitB:::create_labels_Sigma(4, ordered = TRUE) #> [1] \"1,1\""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_alpha.html","id":null,"dir":"Reference","previous_headings":"","what":"Create labels for alpha — create_labels_alpha","title":"Create labels for alpha — create_labels_alpha","text":"function creates labels model parameter alpha.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_alpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create labels for alpha — create_labels_alpha","text":"","code":"create_labels_alpha(P_f)"},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_alpha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create labels for alpha — create_labels_alpha","text":"P_f number covariates connected fixed coefficient (can 0).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_alpha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create labels for alpha — create_labels_alpha","text":"vector labels model parameter alpha length P_f P_f > 0 NULL otherwise.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_alpha.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create labels for alpha — create_labels_alpha","text":"","code":"RprobitB:::create_labels_alpha(P_f = 3) #> [1] \"1\" \"2\" \"3\""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_b.html","id":null,"dir":"Reference","previous_headings":"","what":"Create labels for b — create_labels_b","title":"Create labels for b — create_labels_b","text":"function creates labels model parameter b.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_b.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create labels for b — create_labels_b","text":"","code":"create_labels_b(P_r, C)"},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_b.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create labels for b — create_labels_b","text":"P_r number covariates connected random coefficient (can 0).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_b.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create labels for b — create_labels_b","text":"vector labels model parameter b length P_r * C P_r > 0 NULL otherwise.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_b.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create labels for b — create_labels_b","text":"labels form \"c.p\", c latent class number p index random coefficient.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_b.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create labels for b — create_labels_b","text":"","code":"RprobitB:::create_labels_b(2,3) #> [1] \"1.1\" \"1.2\" \"2.1\" \"2.2\" \"3.1\" \"3.2\""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_d.html","id":null,"dir":"Reference","previous_headings":"","what":"Create labels for d — create_labels_d","title":"Create labels for d — create_labels_d","text":"function creates labels model parameter d.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create labels for d — create_labels_d","text":"","code":"create_labels_d(J, ordered)"},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create labels for d — create_labels_d","text":"J number (greater equal 2) choice alternatives. ordered boolean, FALSE per default. TRUE, choice set alternatives assumed ordered worst best.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create labels for d — create_labels_d","text":"vector labels model parameter d length J - 2 ordered = TRUE NULL otherwise.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create labels for d — create_labels_d","text":"Note J must greater equal 3 ordered probit model.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create labels for d — create_labels_d","text":"","code":"RprobitB:::create_labels_d(5, TRUE) #> [1] \"1\" \"2\" \"3\""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_s.html","id":null,"dir":"Reference","previous_headings":"","what":"Create labels for s — create_labels_s","title":"Create labels for s — create_labels_s","text":"function creates labels model parameter s.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_s.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create labels for s — create_labels_s","text":"","code":"create_labels_s(P_r, C)"},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_s.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create labels for s — create_labels_s","text":"P_r number covariates connected random coefficient (can 0).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_s.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create labels for s — create_labels_s","text":"vector labels model parameter s length C P_r > 0 NULL otherwise.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_labels_s.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create labels for s — create_labels_s","text":"","code":"RprobitB:::create_labels_s(1,3) #> [1] \"1\" \"2\" \"3\""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_lagged_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Create lagged choice covariates — create_lagged_cov","title":"Create lagged choice covariates — create_lagged_cov","text":"function creates lagged choice covariates data.frame choice_data, assumed sorted choice occasions.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_lagged_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create lagged choice covariates — create_lagged_cov","text":"","code":"create_lagged_cov(choice_data, column, k = 1, id = \"id\")"},{"path":"https://loelschlaeger.de/RprobitB/reference/create_lagged_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create lagged choice covariates — create_lagged_cov","text":"choice_data data.frame choice data wide format, .e. row represents one choice occasion. column character, column name choice_data, .e. covariate name. Can vector. k positive number, number lags (units observations), see details. Can vector. default k = 1. id character, name column choice_data contains unique identifier decision maker. default \"id\".","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_lagged_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create lagged choice covariates — create_lagged_cov","text":"input choice_data additional columns named column.k element column number k containing lagged covariates.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/create_lagged_cov.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create lagged choice covariates — create_lagged_cov","text":"Say choice_data contains column column. , function call returns input choice_data includes new column named column.k. column contains decider (based id) choice occasion covariate faced k choice occasions. data point available, set NA. particular, first k values column.k NA (initial condition problem).","code":"create_lagged_cov(choice_data, column, k, id)"},{"path":"https://loelschlaeger.de/RprobitB/reference/create_lagged_cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create lagged choice covariates — create_lagged_cov","text":"","code":"# \\donttest{ choice_data <- create_lagged_cov(   choice_data = choice_berserk,   column = \"lost\",   k = 1,   id = \"player_id\" ) # }"},{"path":"https://loelschlaeger.de/RprobitB/reference/d_to_gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform threshold increments to thresholds — d_to_gamma","title":"Transform threshold increments to thresholds — d_to_gamma","text":"helper function transforms threshold increments d thresholds gamma.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/d_to_gamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform threshold increments to thresholds — d_to_gamma","text":"","code":"d_to_gamma(d)"},{"path":"https://loelschlaeger.de/RprobitB/reference/d_to_gamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform threshold increments to thresholds — d_to_gamma","text":"d numeric vector threshold increments.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/d_to_gamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform threshold increments to thresholds — d_to_gamma","text":"numeric vector thresholds.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/d_to_gamma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform threshold increments to thresholds — d_to_gamma","text":"threshold vector gamma computed threshold increments d c(-100,0,cumsum(exp(d)),100), bounds -100 100 exist numerical reasons first threshold fixed 0 identification.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/d_to_gamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform threshold increments to thresholds — d_to_gamma","text":"","code":"d_to_gamma(c(0,0,0)) #>      [,1] #> [1,] -100 #> [2,]    0 #> [3,]    1 #> [4,]    2 #> [5,]    3 #> [6,]  100"},{"path":"https://loelschlaeger.de/RprobitB/reference/delta.html","id":null,"dir":"Reference","previous_headings":"","what":"Matrix difference operator — delta","title":"Matrix difference operator — delta","text":"function creates difference operator matrix delta subtracting matrix row matrix rows.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/delta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matrix difference operator — delta","text":"","code":"delta(J, i)"},{"path":"https://loelschlaeger.de/RprobitB/reference/delta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matrix difference operator — delta","text":"J number matrix rows. row number respect differences computed.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/delta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matrix difference operator — delta","text":"matrix J-1 rows.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/delta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Matrix difference operator — delta","text":"Given matrix x J rows, delta(,J) %*% x computes differences respect row .","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/delta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matrix difference operator — delta","text":"","code":"J <- 2 x <- matrix(1, nrow = J, ncol = 2) RprobitB:::delta(J, 1) %*% x #>      [,1] [,2] #> [1,]    0    0"},{"path":"https://loelschlaeger.de/RprobitB/reference/dmvnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Density of multivariate normal distribution — dmvnorm","title":"Density of multivariate normal distribution — dmvnorm","text":"function computes density multivariate normal distribution.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/dmvnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density of multivariate normal distribution — dmvnorm","text":"","code":"dmvnorm(x, mean, Sigma, log = FALSE)"},{"path":"https://loelschlaeger.de/RprobitB/reference/dmvnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density of multivariate normal distribution — dmvnorm","text":"x quantile vector length n. mean mean vector length n. Sigma covariance matrix dimension n x n. log boolean, TRUE logarithm density value returned.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/dmvnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density of multivariate normal distribution — dmvnorm","text":"density value.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/dmvnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Density of multivariate normal distribution — dmvnorm","text":"","code":"x = c(0,0) mean = c(0,0) Sigma = diag(2) dmvnorm(x = x, mean = mean, Sigma = Sigma) #> [1] 0.1591549 dmvnorm(x = x, mean = mean, Sigma = Sigma, log = TRUE) #> [1] -1.837877"},{"path":"https://loelschlaeger.de/RprobitB/reference/draw_from_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from prior distributions — draw_from_prior","title":"Sample from prior distributions — draw_from_prior","text":"function returns sample parameter's prior distribution.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/draw_from_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from prior distributions — draw_from_prior","text":"","code":"draw_from_prior(prior, C = 1)"},{"path":"https://loelschlaeger.de/RprobitB/reference/draw_from_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from prior distributions — draw_from_prior","text":"prior object class RprobitB_prior, output check_prior. C number latent classes.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/draw_from_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from prior distributions — draw_from_prior","text":"list draws alpha, s, b, Omega, Sigma (specified model).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/draw_from_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample from prior distributions — draw_from_prior","text":"","code":"prior <- check_prior(P_f = 1, P_r = 2, J = 3) RprobitB:::draw_from_prior(prior, C = 2) #> $alpha #>          [,1] #> [1,] 1.269113 #>  #> $s #> [1] 0.723515 0.276485 #>  #> $b #>            [,1]        [,2] #> [1,] -1.4414950  1.47911118 #> [2,]  0.8072289 -0.05810544 #>  #> $Omega #>           [,1]      [,2] #> [1,] 0.3362401 1.2662354 #> [2,] 0.2196975 0.4905657 #> [3,] 0.2196975 0.4905657 #> [4,] 0.7681211 0.3428829 #>  #> $Sigma #>            [,1]       [,2] #> [1,]  0.2440007 -0.1369479 #> [2,] -0.1369479  1.4193238 #>"},{"path":"https://loelschlaeger.de/RprobitB/reference/euc_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Euclidean distance — euc_dist","title":"Euclidean distance — euc_dist","text":"function computes euclidean distance two vectors.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/euc_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Euclidean distance — euc_dist","text":"","code":"euc_dist(a, b)"},{"path":"https://loelschlaeger.de/RprobitB/reference/euc_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Euclidean distance — euc_dist","text":"numeric vector. b Another numeric vector length .","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/euc_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Euclidean distance — euc_dist","text":"euclidean distance.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/filter_gibbs_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Gibbs samples — filter_gibbs_samples","title":"Filter Gibbs samples — filter_gibbs_samples","text":"helper function filters Gibbs samples.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/filter_gibbs_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Gibbs samples — filter_gibbs_samples","text":"","code":"filter_gibbs_samples(   x,   P_f,   P_r,   J,   C,   cov_sym,   ordered = FALSE,   keep_par = c(\"s\", \"alpha\", \"b\", \"Omega\", \"Sigma\", \"d\"),   drop_par = NULL )"},{"path":"https://loelschlaeger.de/RprobitB/reference/filter_gibbs_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Gibbs samples — filter_gibbs_samples","text":"x object class RprobitB_gibbs_samples. P_f number covariates connected fixed coefficient (can 0). P_r number covariates connected random coefficient (can 0). J number (greater equal 2) choice alternatives. cov_sym Set TRUE labels symmetric covariance elements. ordered boolean, FALSE per default. TRUE, choice set alternatives assumed ordered worst best. keep_par vector parameter names kept. drop_par vector parameter names get dropped.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/filter_gibbs_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Gibbs samples — filter_gibbs_samples","text":"object class RprobitB_gibbs_samples filtered labels parameter_labels.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/fit_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit probit model to choice data — fit_model","title":"Fit probit model to choice data — fit_model","text":"function performs Markov chain Monte Carlo simulation fitting different types probit models (binary, multivariate, mixed, latent class, ordered, ranked) discrete choice data.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/fit_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit probit model to choice data — fit_model","text":"","code":"fit_model(   data,   scale = \"Sigma_1,1 := 1\",   R = 1000,   B = R/2,   Q = 1,   print_progress = getOption(\"RprobitB_progress\"),   prior = NULL,   latent_classes = NULL,   seed = NULL,   fixed_parameter = list() )"},{"path":"https://loelschlaeger.de/RprobitB/reference/fit_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit probit model to choice data — fit_model","text":"data object class RprobitB_data. scale character determines utility scale. form <parameter> := <value>, <parameter> either name fixed effect Sigma_<j>,<j> <j>th diagonal element Sigma, <value> value fixed parameter. R number iterations Gibbs sampler. B length burn-period, .e. non-negative number samples discarded. Q thinning factor Gibbs samples, .e. every Qth sample kept. print_progress boolean, determining whether print Gibbs sampler progress estimated remaining computation time. prior named list parameters prior distributions. See documentation check_prior details parameters can specified. latent_classes Either NULL (latent classes) list parameters specifying number latent classes updating scheme: C: fixed number (greater equal 1) latent classes, set 1 per default. either weight_update = TRUE dp_update = TRUE (.e. classes updated), C equals initial number latent classes. weight_update: boolean, set TRUE weight-based update latent classes. See ... details. dp_update: boolean, set TRUE update latent classes based Dirichlet process. See ... details. Cmax: maximum number latent classes. buffer: number iterations wait next weight-based update latent classes. epsmin: threshold weight (0 1) removing latent class weight-based updating scheme. epsmax: threshold weight (0 1) splitting latent class weight-based updating scheme. distmin: (non-negative) threshold class mean difference joining two latent classes weight-based updating scheme. seed Set seed Gibbs sampling. fixed_parameter Optionally specify named list fixed parameter values alpha, C, s, b, Omega, Sigma, Sigma_full, beta, z, d simulation. See vignette model definition definitions variables.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/fit_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit probit model to choice data — fit_model","text":"object class RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/fit_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit probit model to choice data — fit_model","text":"See vignette model fitting details.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/reference/fit_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit probit model to choice data — fit_model","text":"","code":"data <- simulate_choices(   form = choice ~ var | 0, N = 100, T = 10, J = 3, seed = 1 ) model <- fit_model(data = data, R = 1000, seed = 1) #> Computing sufficient statistics - 0 of 4   #> Computing sufficient statistics - 1 of 4   #> Computing sufficient statistics - 2 of 4   #> Computing sufficient statistics - 3 of 4   #> Computing sufficient statistics - 4 of 4   #> MCMC iteration - 1 of 1000   #> MCMC iteration - 10 of 1000   #> MCMC iteration - 20 of 1000   #> MCMC iteration - 30 of 1000   #> MCMC iteration - 40 of 1000   #> MCMC iteration - 50 of 1000   #> MCMC iteration - 60 of 1000   #> MCMC iteration - 70 of 1000   #> MCMC iteration - 80 of 1000   #> MCMC iteration - 90 of 1000   #> MCMC iteration - 100 of 1000   #> MCMC iteration - 110 of 1000   #> MCMC iteration - 120 of 1000   #> MCMC iteration - 130 of 1000   #> MCMC iteration - 140 of 1000   #> MCMC iteration - 150 of 1000   #> MCMC iteration - 160 of 1000   #> MCMC iteration - 170 of 1000   #> MCMC iteration - 180 of 1000   #> MCMC iteration - 190 of 1000   #> MCMC iteration - 200 of 1000   #> MCMC iteration - 210 of 1000   #> MCMC iteration - 220 of 1000   #> MCMC iteration - 230 of 1000   #> MCMC iteration - 240 of 1000   #> MCMC iteration - 250 of 1000   #> MCMC iteration - 260 of 1000   #> MCMC iteration - 270 of 1000   #> MCMC iteration - 280 of 1000   #> MCMC iteration - 290 of 1000   #> MCMC iteration - 300 of 1000   #> MCMC iteration - 310 of 1000   #> MCMC iteration - 320 of 1000   #> MCMC iteration - 330 of 1000   #> MCMC iteration - 340 of 1000   #> MCMC iteration - 350 of 1000   #> MCMC iteration - 360 of 1000   #> MCMC iteration - 370 of 1000   #> MCMC iteration - 380 of 1000   #> MCMC iteration - 390 of 1000   #> MCMC iteration - 400 of 1000   #> MCMC iteration - 410 of 1000   #> MCMC iteration - 420 of 1000   #> MCMC iteration - 430 of 1000   #> MCMC iteration - 440 of 1000   #> MCMC iteration - 450 of 1000   #> MCMC iteration - 460 of 1000   #> MCMC iteration - 470 of 1000   #> MCMC iteration - 480 of 1000   #> MCMC iteration - 490 of 1000   #> MCMC iteration - 500 of 1000   #> MCMC iteration - 510 of 1000   #> MCMC iteration - 520 of 1000   #> MCMC iteration - 530 of 1000   #> MCMC iteration - 540 of 1000   #> MCMC iteration - 550 of 1000   #> MCMC iteration - 560 of 1000   #> MCMC iteration - 570 of 1000   #> MCMC iteration - 580 of 1000   #> MCMC iteration - 590 of 1000   #> MCMC iteration - 600 of 1000   #> MCMC iteration - 610 of 1000   #> MCMC iteration - 620 of 1000   #> MCMC iteration - 630 of 1000   #> MCMC iteration - 640 of 1000   #> MCMC iteration - 650 of 1000   #> MCMC iteration - 660 of 1000   #> MCMC iteration - 670 of 1000   #> MCMC iteration - 680 of 1000   #> MCMC iteration - 690 of 1000   #> MCMC iteration - 700 of 1000   #> MCMC iteration - 710 of 1000   #> MCMC iteration - 720 of 1000   #> MCMC iteration - 730 of 1000   #> MCMC iteration - 740 of 1000   #> MCMC iteration - 750 of 1000   #> MCMC iteration - 760 of 1000   #> MCMC iteration - 770 of 1000   #> MCMC iteration - 780 of 1000   #> MCMC iteration - 790 of 1000   #> MCMC iteration - 800 of 1000   #> MCMC iteration - 810 of 1000   #> MCMC iteration - 820 of 1000   #> MCMC iteration - 830 of 1000   #> MCMC iteration - 840 of 1000   #> MCMC iteration - 850 of 1000   #> MCMC iteration - 860 of 1000   #> MCMC iteration - 870 of 1000   #> MCMC iteration - 880 of 1000   #> MCMC iteration - 890 of 1000   #> MCMC iteration - 900 of 1000   #> MCMC iteration - 910 of 1000   #> MCMC iteration - 920 of 1000   #> MCMC iteration - 930 of 1000   #> MCMC iteration - 940 of 1000   #> MCMC iteration - 950 of 1000   #> MCMC iteration - 960 of 1000   #> MCMC iteration - 970 of 1000   #> MCMC iteration - 980 of 1000   #> MCMC iteration - 990 of 1000   #> MCMC iteration - 1000 of 1000   #> Computing log-likelihood summary(model) #> Probit model #> Formula: choice ~ var | 0  #> R: 1000, B: 500, Q: 1 #> Level: Utility differences with respect to alternative 'C'. #> Scale: Coefficient of the 1. error term variance fixed to 1. #>  #> Gibbs sample statistics #>           true    mean      sd      R^ #>  alpha #>                                        #>      1   -0.94   -0.85    0.06    1.16 #>  #>  Sigma #>                                        #>    1,1    1.00    1.00    0.00    1.00 #>    1,2   -0.42   -0.30    0.06    2.15 #>    2,2    0.27    0.19    0.04    1.62"},{"path":"https://loelschlaeger.de/RprobitB/reference/get_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract covariates of choice occasion — get_cov","title":"Extract covariates of choice occasion — get_cov","text":"convenience function returns covariates choices specific choice occasions.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/get_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract covariates of choice occasion — get_cov","text":"","code":"get_cov(x, id, idc, idc_label)"},{"path":"https://loelschlaeger.de/RprobitB/reference/get_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract covariates of choice occasion — get_cov","text":"x Either object class RprobitB_data RprobitB_fit. id numeric (vector), specifies decider(s). idc numeric (vector), specifies choice occasion(s). idc_label name column contains choice occasion identifier.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/get_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract covariates of choice occasion — get_cov","text":"subset choice_data data frame specified prepare_data().","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/get_cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract covariates of choice occasion — get_cov","text":"","code":"data(\"model_train\", package = \"RprobitB\") get_cov(model_train, id = 1:2, idc = 1:2, idc_label = \"choiceid\") #>    id choiceid choice  price_A time_A change_A comfort_A  price_B   time_B #> 1   1        1      A 52.88904   2.50        0         1 88.14840 2.500000 #> 2   1        2      A 52.88904   2.50        0         1 70.51872 2.166667 #> 11  2        1      A 65.56037   1.80        0         0 77.12985 2.016667 #> 12  2        2      A 65.56037   1.55        0         1 77.12985 1.550000 #>    change_B comfort_B #> 1         0         1 #> 2         0         1 #> 11        0         1 #> 12        0         0"},{"path":"https://loelschlaeger.de/RprobitB/reference/gibbs_sampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov chain Monte Carlo simulation for the probit model — gibbs_sampling","title":"Markov chain Monte Carlo simulation for the probit model — gibbs_sampling","text":"function draws posterior distribution probit model via Markov chain Monte Carlo simulation-","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/gibbs_sampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov chain Monte Carlo simulation for the probit model — gibbs_sampling","text":"","code":"gibbs_sampling(   sufficient_statistics,   prior,   latent_classes,   fixed_parameter,   init,   R,   B,   print_progress,   ordered,   ranked )"},{"path":"https://loelschlaeger.de/RprobitB/reference/gibbs_sampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov chain Monte Carlo simulation for the probit model — gibbs_sampling","text":"sufficient_statistics output sufficient_statistics. prior named list parameters prior distributions. See documentation check_prior details parameters can specified. latent_classes Either NULL (latent classes) list parameters specifying number latent classes updating scheme: C: fixed number (greater equal 1) latent classes, set 1 per default. either weight_update = TRUE dp_update = TRUE (.e. classes updated), C equals initial number latent classes. weight_update: boolean, set TRUE weight-based update latent classes. See ... details. dp_update: boolean, set TRUE update latent classes based Dirichlet process. See ... details. Cmax: maximum number latent classes. buffer: number iterations wait next weight-based update latent classes. epsmin: threshold weight (0 1) removing latent class weight-based updating scheme. epsmax: threshold weight (0 1) splitting latent class weight-based updating scheme. distmin: (non-negative) threshold class mean difference joining two latent classes weight-based updating scheme. fixed_parameter Optionally specify named list fixed parameter values alpha, C, s, b, Omega, Sigma, Sigma_full, beta, z, d simulation. See vignette model definition definitions variables. init output set_initial_gibbs_values. R number iterations Gibbs sampler. B length burn-period, .e. non-negative number samples discarded. print_progress boolean, determining whether print Gibbs sampler progress estimated remaining computation time. ordered boolean, FALSE per default. TRUE, choice set alternatives assumed ordered worst best. ranked TBA","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/gibbs_sampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov chain Monte Carlo simulation for the probit model — gibbs_sampling","text":"list Gibbs samples Sigma, alpha (P_f>0), s, z, b, Omega (P_r>0), d (ordered = TRUE), vector class_sequence length R, rth entry number latent classes iteration r.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/gibbs_sampling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov chain Monte Carlo simulation for the probit model — gibbs_sampling","text":"function supposed called directly, rather via fit_model.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/is_covariance_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Check covariance matrix properties — is_covariance_matrix","title":"Check covariance matrix properties — is_covariance_matrix","text":"function checks input proper covariance matrix, .e. symmetric, numeric matrix non-negative eigenvalues.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/is_covariance_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check covariance matrix properties — is_covariance_matrix","text":"","code":"is_covariance_matrix(x)"},{"path":"https://loelschlaeger.de/RprobitB/reference/is_covariance_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check covariance matrix properties — is_covariance_matrix","text":"x matrix.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/is_covariance_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check covariance matrix properties — is_covariance_matrix","text":"boolean, TRUE x proper covariance matrix.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/is_covariance_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check covariance matrix properties — is_covariance_matrix","text":"","code":"x <- diag(2) RprobitB:::is_covariance_matrix(x) #> [1] TRUE"},{"path":"https://loelschlaeger.de/RprobitB/reference/ll_ordered.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-likelihood in the ordered probit model — ll_ordered","title":"Log-likelihood in the ordered probit model — ll_ordered","text":"function computes log-likelihood value given threshold increments d.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/ll_ordered.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-likelihood in the ordered probit model — ll_ordered","text":"","code":"ll_ordered(d, y, mu, Tvec)"},{"path":"https://loelschlaeger.de/RprobitB/reference/ll_ordered.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-likelihood in the ordered probit model — ll_ordered","text":"d numeric vector threshold increments. y matrix choices. mu matrix systematic utilities. Tvec element Tvec sufficient_statistics.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/ll_ordered.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-likelihood in the ordered probit model — ll_ordered","text":"log-likelihood value.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/ll_ordered.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-likelihood in the ordered probit model — ll_ordered","text":"","code":"ll_ordered(c(0,0,0), matrix(1), matrix(1), 1) #> [1] -1.841022"},{"path":"https://loelschlaeger.de/RprobitB/reference/missing_covariates.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle missing covariates — missing_covariates","title":"Handle missing covariates — missing_covariates","text":"function checks replaces missing covariate entries choice_data.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/missing_covariates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle missing covariates — missing_covariates","text":"","code":"missing_covariates(choice_data, impute = \"complete_cases\", choice = \"choice\")"},{"path":"https://loelschlaeger.de/RprobitB/reference/missing_covariates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle missing covariates — missing_covariates","text":"choice_data data.frame choice data wide format, .e. row represents one choice occasion. impute character specifies handle missing entries choice_data, one : \"complete_cases\", removes rows containing missing covariate entries entries (default), \"zero\", replaces missing covariate entries zero (numeric columns), \"mean\", imputes missing covariate entries mean (numeric columns).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/missing_covariates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle missing covariates — missing_covariates","text":"input choice_data, missing entries addressed.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/mml.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate marginal model likelihood — mml","title":"Approximate marginal model likelihood — mml","text":"function approximates model's marginal likelihood.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/mml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate marginal model likelihood — mml","text":"","code":"mml(x, S = 0, ncores = parallel::detectCores() - 1, recompute = FALSE)"},{"path":"https://loelschlaeger.de/RprobitB/reference/mml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate marginal model likelihood — mml","text":"x object class RprobitB_fit. S number prior samples prior arithmetic mean estimate. Per default, S = 0. case, posterior samples used approximation via posterior harmonic mean estimator, see details section. ncores Computation prior arithmetic mean estimate parallelized, set number cores. recompute Set TRUE recompute likelihood.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/mml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate marginal model likelihood — mml","text":"object x, including object mml, model's approximated marginal likelihood value.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/mml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Approximate marginal model likelihood — mml","text":"model's marginal likelihood \\(p(y\\mid M)\\) model \\(M\\) data \\(y\\) required computation Bayes factors. general, term closed form must approximated numerically. function uses posterior Gibbs samples approximate model's marginal likelihood via posterior harmonic mean estimator: Let S denote numbers posterior samples \\(\\theta_1,\\dots,\\theta_S\\). , $$p(y\\mid M) = \\left(\\mathbb{E}_\\text{posterior} p(y\\mid \\theta,M)^{-1} \\right)^{-1} \\approx \\left( \\frac{1}{S} \\sum_s 1/p(y\\mid \\theta_s,M) \\right) ^{-1} = \\tilde{p}(y\\mid M).$$ law large numbers, \\(\\tilde{p}(y\\mid M) \\p(y\\mid M)\\) almost surely \\(S \\\\infty\\). check convergence, call plot(x$mml), x output function. estimation seem converged, can improve approximation combining value prior arithmetic mean estimator: approach, S samples \\(\\theta_1,\\dots,\\theta_S\\) drawn model's prior distribution. , $$p(y\\mid M) = \\mathbb{E}_\\text{prior} p(y\\mid \\theta,M) \\approx \\frac{1}{S} \\sum_s p(y\\mid \\theta_s,M) = \\tilde{p}(y\\mid M).$$ , hols law large numbers, \\(\\tilde{p}(y\\mid M) \\p(y\\mid M)\\) almost surely \\(S \\\\infty\\). final approximation model's marginal likelihood weighted sum posterior harmonic mean estimate prior arithmetic mean estimate, weights determined sample sizes.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/mml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximate marginal model likelihood — mml","text":"","code":"data(\"model_train\", package = \"RprobitB\") model_train <- mml(model_train, recompute = TRUE) model_train$mml #> 9.72e-117 * exp(-1464) print(model_train$mml, log = TRUE) #> -1731.128"},{"path":"https://loelschlaeger.de/RprobitB/reference/model_berserk.html","id":null,"dir":"Reference","previous_headings":"","what":"Model for binary berserking choice — model_berserk","title":"Model for binary berserking choice — model_berserk","text":"object fitted mixed probit model choice_berserk dataset RprobitB package formula berserk ~ 0 | white + rating + rating_diff + min_rem + streak + berserk.1 + lost.1 + 1.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/model_berserk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model for binary berserking choice — model_berserk","text":"","code":"data(model_berserk)"},{"path":"https://loelschlaeger.de/RprobitB/reference/model_berserk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Model for binary berserking choice — model_berserk","text":"object class RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/model_berserk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model for binary berserking choice — model_berserk","text":"model estimated via","code":"choice_berserk <- create_lagged_cov(   choice_data = RprobitB::choice_berserk,   column = c(\"berserk\",\"lost\"),   k = 1,   id = \"player_id\" )  data_berserk <- prepare_data(   form = berserk ~ 0 | white + rating + rating_diff + min_rem + streak + berserk.1 + lost.1 + 1,   re = c(\"rating_diff\",\"lost.1\"),   choice_data = choice_berserk,   id = \"player_id\",   idc = \"game_id\",   standardize = c(\"rating\",\"rating_diff\",\"min_rem\"),   impute = \"zero\" ) model_berserk <- fit_model(   data_berserk,   latent_classes = list(\"dp_update\" = TRUE, \"C\" = 10),   R = 5000 )"},{"path":"https://loelschlaeger.de/RprobitB/reference/model_chessop.html","id":null,"dir":"Reference","previous_headings":"","what":"Model for chess opening choice — model_chessop","title":"Model for chess opening choice — model_chessop","text":"object fitted mixed probit model choice_chess_opening dataset RprobitB package formula w1 ~ w1.1 | sex_w + byear_w + rating_w + rating_diff + 1.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/model_chessop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model for chess opening choice — model_chessop","text":"","code":"data(model_chessop)"},{"path":"https://loelschlaeger.de/RprobitB/reference/model_chessop.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Model for chess opening choice — model_chessop","text":"object class RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/model_chessop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model for chess opening choice — model_chessop","text":"model estimated via","code":"choice_chess_opening <- create_lagged_cov(   choice_data = RprobitB::choice_chess_opening,   column = \"w1\",   k = 1,   id = \"fideid_w\") choice_chess_opening <- fastDummies::dummy_cols(choice_chess_opening, \"w1.1\") choice_chess_opening$rating_diff <- choice_chess_opening$rating_w - choice_chess_opening$rating_b data <- prepare_data(   form = w1 ~ w1.1 | sex_w + byear_w + rating_w + rating_diff + 1,   choice_data = choice_chess_opening,   id = \"fideid_w\",   idc = \"fideid_b\",   alternatives = c(\"e4\",\"d4\",\"b3\"),   standardize = c(\"byear_w\",\"rating_w\",\"rating_diff\"),   impute = \"complete_cases\" ) model_chessop <- fit_model(   data = data,   re = \"w1.1\",   latent_classes = list(\"dp_update\" = TRUE, \"C\" = 2) )"},{"path":"https://loelschlaeger.de/RprobitB/reference/model_elec.html","id":null,"dir":"Reference","previous_headings":"","what":"Model for multivariate choice between electricity suppliers — model_elec","title":"Model for multivariate choice between electricity suppliers — model_elec","text":"object fitted mixed probit model Electricity dataset mlogit package model formula choice ~ pf + cl + loc + wk + tod + seas | 0.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/model_elec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model for multivariate choice between electricity suppliers — model_elec","text":"","code":"data(model_elec)"},{"path":"https://loelschlaeger.de/RprobitB/reference/model_elec.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Model for multivariate choice between electricity suppliers — model_elec","text":"object class RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/model_elec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model for multivariate choice between electricity suppliers — model_elec","text":"model estimated via","code":"data(\"Electricity\", package = \"mlogit\") Electricity <- as_cov_names(Electricity, c(\"pf\",\"cl\",\"loc\",\"wk\",\"tod\",\"seas\"), 1:4) data <- prepare_data(   form = choice ~ pf + cl + loc + wk + tod + seas | 0,   choice_data = Electricity,   re = c(\"cl\",\"loc\",\"wk\",\"tod\",\"seas\") ) model_elec <- fit_model(   data = data,   R = 5000,   Q = 10,   scale = \"pf := -1\" )"},{"path":"https://loelschlaeger.de/RprobitB/reference/model_selection.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare fitted models — model_selection","title":"Compare fitted models — model_selection","text":"function returns table several criteria model comparison.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/model_selection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare fitted models — model_selection","text":"","code":"model_selection(   ...,   criteria = c(\"npar\", \"LL\", \"AIC\", \"BIC\"),   add_form = FALSE )"},{"path":"https://loelschlaeger.de/RprobitB/reference/model_selection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare fitted models — model_selection","text":"... One objects class RprobitB_fit. criteria vector one following characters: \"npar\" number model parameters (see npar), \"LL\" log-likelihood value (see logLik), \"AIC\" AIC value (see AIC), \"BIC\" BIC value (see BIC), \"WAIC\" WAIC value (also shows standard error sd(WAIC) number pWAIC effective model parameters, see WAIC), \"MMLL\" marginal model log-likelihood, \"BF\" Bayes factor, \"pred_acc\" prediction accuracy (see pred_acc). add_form Set TRUE add model formulas.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/model_selection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare fitted models — model_selection","text":"data frame, criteria columns, models rows.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/model_selection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare fitted models — model_selection","text":"See vignette model selection details.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/model_selection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare fitted models — model_selection","text":"","code":"data(\"model_train\", package = \"RprobitB\") data(\"model_train_sparse\", package = \"RprobitB\") criteria <- c(\"npar\", \"LL\", \"AIC\", \"BIC\", \"WAIC\", \"MMLL\", \"BF\", \"pred_acc\") model_selection(model_train, model_train_sparse, criteria = criteria) #>                          model_train model_train_sparse #> npar                               4                  1 #> LL                          -1727.70           -1865.86 #> AIC                          3463.41            3733.73 #> BIC                          3487.34            3739.71 #> WAIC                         3463.74            3733.87 #> se(WAIC)                        0.19               0.07 #> pWAIC                           4.37               1.13 #> MMLL                        -1731.13           -1867.26 #> BF(*,model_train)                  1             < 0.01 #> BF(*,model_train_sparse)       > 100                  1 #> pred_acc                      69.61%             63.40%"},{"path":"https://loelschlaeger.de/RprobitB/reference/model_train.html","id":null,"dir":"Reference","previous_headings":"","what":"Model for binary choice between Train trip alternatives — model_train","title":"Model for binary choice between Train trip alternatives — model_train","text":"object fitted probit model Train data set mlogit package model formula choice ~ price + time + change + comfort | 0.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/model_train.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model for binary choice between Train trip alternatives — model_train","text":"","code":"data(model_train)"},{"path":"https://loelschlaeger.de/RprobitB/reference/model_train.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Model for binary choice between Train trip alternatives — model_train","text":"object class RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/model_train.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model for binary choice between Train trip alternatives — model_train","text":"model estimated via","code":"data(\"Train\", package = \"mlogit\") Train$price_A <- Train$price_A / 100 * 2.20371 Train$price_B <- Train$price_B / 100 * 2.20371 Train$time_A <- Train$time_A / 60 Train$time_B <- Train$time_B / 60 form <- choice ~ price + time + change + comfort | 0 data <- prepare_data(   form = form,   choice_data = Train,   idc = \"choiceid\" ) model_train <- fit_model(   data = data,   R = 10000,   Q = 10,   scale = \"price := -1\") )"},{"path":"https://loelschlaeger.de/RprobitB/reference/model_train_sparse.html","id":null,"dir":"Reference","previous_headings":"","what":"Sparse model for binary choice between Train trip alternatives — model_train_sparse","title":"Sparse model for binary choice between Train trip alternatives — model_train_sparse","text":"object fitted probit model Train data set mlogit package model formula choice ~ price | 0.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/model_train_sparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sparse model for binary choice between Train trip alternatives — model_train_sparse","text":"","code":"data(model_train_sparse)"},{"path":"https://loelschlaeger.de/RprobitB/reference/model_train_sparse.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sparse model for binary choice between Train trip alternatives — model_train_sparse","text":"object class RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/model_train_sparse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sparse model for binary choice between Train trip alternatives — model_train_sparse","text":"model derived model_train object via","code":"data(\"model_train\", package = \"RprobitB\") model_train_sparse <- update(   model_train,   form = choice ~ price | 0 )"},{"path":"https://loelschlaeger.de/RprobitB/reference/npar.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract number of model parameters — npar","title":"Extract number of model parameters — npar","text":"function extracts number model parameters RprobitB_fit object.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/npar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract number of model parameters — npar","text":"","code":"npar(object, ...)  # S3 method for RprobitB_fit npar(object, ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/npar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract number of model parameters — npar","text":"object object class RprobitB_fit. ... Optionally objects class RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/npar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract number of model parameters — npar","text":"Either numeric value (just one object provided) numeric vector.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/npar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract number of model parameters — npar","text":"","code":"data(\"model_train\", package = \"RprobitB\") npar(model_train) #> [1] 4"},{"path":"https://loelschlaeger.de/RprobitB/reference/overview_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Print effect overview — overview_effects","title":"Print effect overview — overview_effects","text":"function gives overview effect names, whether covariate alternative-specific, whether coefficient alternative-specific, whether random effect.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/overview_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print effect overview — overview_effects","text":"","code":"overview_effects(   form,   re = NULL,   alternatives,   base = tail(alternatives, 1),   ordered = FALSE )"},{"path":"https://loelschlaeger.de/RprobitB/reference/overview_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print effect overview — overview_effects","text":"form formula object used specify model equation. structure choice ~ | B | C, choice name dependent variable (choices), names alternative choice situation specific covariates coefficient constant across alternatives, B names choice situation specific covariates alternative specific coefficients, C names alternative choice situation specific covariates alternative specific coefficients. Multiple covariates (one type) separated + sign. default, alternative specific constants (ASCs) added model. can removed adding +0 second spot. ordered probit model (ordered = TRUE), formula object simple structure choice ~ . ASCs estimated. re character (vector) covariates form random effects. re = NULL (default), random effects. random effects ASCs, include \"ASC\" re. alternatives character vector names choice alternatives. specified, choice set defined observed choices. ordered = TRUE, alternatives assumed specified alternatives ordered worst best. base character, name base alternative covariates alternative specific (.e. type 2 covariates ASCs). Ignored set NULL model alternative specific covariates (e.g. ordered probit model). Per default, base last element alternatives. ordered boolean, FALSE per default. TRUE, choice set alternatives assumed ordered worst best.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/overview_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print effect overview — overview_effects","text":"data frame, row effect, columns effect name \"effect\", booleans whether covariate alternative-specific \"as_value\", whether coefficient alternative-specific \"as_coef\", whether random effect \"random\".","code":""},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/reference/overview_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print effect overview — overview_effects","text":"","code":"overview_effects(   form = choice ~ price + time + comfort + change | 1,   re = c(\"price\", \"time\"),   alternatives = c(\"A\", \"B\"),   base = \"A\" ) #>    effect as_value as_coef random #> 1 comfort     TRUE   FALSE  FALSE #> 2  change     TRUE   FALSE  FALSE #> 3   ASC_B    FALSE    TRUE  FALSE #> 4   price     TRUE   FALSE   TRUE #> 5    time     TRUE   FALSE   TRUE"},{"path":"https://loelschlaeger.de/RprobitB/reference/parameter_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Create parameters labels — parameter_labels","title":"Create parameters labels — parameter_labels","text":"function creates model parameter labels.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/parameter_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create parameters labels — parameter_labels","text":"","code":"parameter_labels(   P_f,   P_r,   J,   C,   cov_sym,   ordered = FALSE,   keep_par = c(\"s\", \"alpha\", \"b\", \"Omega\", \"Sigma\", \"d\"),   drop_par = NULL )"},{"path":"https://loelschlaeger.de/RprobitB/reference/parameter_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create parameters labels — parameter_labels","text":"P_f number covariates connected fixed coefficient (can 0). P_r number covariates connected random coefficient (can 0). J number (greater equal 2) choice alternatives. cov_sym Set TRUE labels symmetric covariance elements. ordered boolean, FALSE per default. TRUE, choice set alternatives assumed ordered worst best. keep_par vector parameter names kept. drop_par vector parameter names get dropped.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/parameter_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create parameters labels — parameter_labels","text":"list labels selected model parameters.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/parameter_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create parameters labels — parameter_labels","text":"","code":"RprobitB:::parameter_labels(P_f = 1, P_r = 2, J = 3, C = 2, cov_sym = TRUE) #> $s #> [1] \"1\" \"2\" #>  #> $alpha #> [1] \"1\" #>  #> $b #> [1] \"1.1\" \"1.2\" \"2.1\" \"2.2\" #>  #> $Omega #> [1] \"1.1,1\" \"1.1,2\" \"1.2,1\" \"1.2,2\" \"2.1,1\" \"2.1,2\" \"2.2,1\" \"2.2,2\" #>  #> $Sigma #> [1] \"1,1\" \"1,2\" \"2,1\" \"2,2\" #>"},{"path":"https://loelschlaeger.de/RprobitB/reference/permutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutations of a vector — permutations","title":"Permutations of a vector — permutations","text":"function returns permutations given vector.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/permutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutations of a vector — permutations","text":"","code":"permutations(x)"},{"path":"https://loelschlaeger.de/RprobitB/reference/permutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutations of a vector — permutations","text":"x vector.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/permutations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutations of a vector — permutations","text":"list permutations x.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/permutations.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Permutations of a vector — permutations","text":"function modified version https://stackoverflow.com//20199902/15157768.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/permutations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutations of a vector — permutations","text":"","code":"RprobitB:::permutations(x = c(\"a\",\"b\",\"c\")) #> [[1]] #> [1] \"a\" \"b\" \"c\" #>  #> [[2]] #> [1] \"a\" \"c\" \"b\" #>  #> [[3]] #> [1] \"b\" \"a\" \"c\" #>  #> [[4]] #> [1] \"b\" \"c\" \"a\" #>  #> [[5]] #> [1] \"c\" \"a\" \"b\" #>  #> [[6]] #> [1] \"c\" \"b\" \"a\" #>"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot.RprobitB_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize choice data — plot.RprobitB_data","title":"Visualize choice data — plot.RprobitB_data","text":"function plot method object class RprobitB_data.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot.RprobitB_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize choice data — plot.RprobitB_data","text":"","code":"# S3 method for RprobitB_data plot(x, by_choice = FALSE, alpha = 1, position = \"dodge\", ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot.RprobitB_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize choice data — plot.RprobitB_data","text":"x object class RprobitB_data. by_choice Set TRUE group covariates chosen alternatives. alpha, position Passed ggplot. ... Ignored.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot.RprobitB_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize choice data — plot.RprobitB_data","text":"return value. Draws plot current device.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot.RprobitB_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize choice data — plot.RprobitB_data","text":"","code":"data <- simulate_choices(  form = choice ~ cost | 0,  N = 100,  T = 10,  J = 2,  alternatives = c(\"bus\", \"car\"),  true_parameter = list(\"alpha\" = -1) ) plot(data, by_choice = TRUE)"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot.RprobitB_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize fitted probit model — plot.RprobitB_fit","title":"Visualize fitted probit model — plot.RprobitB_fit","text":"function plot method object class RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot.RprobitB_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize fitted probit model — plot.RprobitB_fit","text":"","code":"# S3 method for RprobitB_fit plot(x, type, ignore = NULL, ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot.RprobitB_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize fitted probit model — plot.RprobitB_fit","text":"x object class RprobitB_fit. type type plot, can one : \"mixture\" visualize mixing distribution, \"acf\" autocorrelation plots Gibbs samples, \"trace\" trace plots Gibbs samples, \"class_seq\" visualize sequence class numbers. See details section visualization options. ignore character (vector) covariate parameter names get visualized. ... Ignored.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot.RprobitB_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize fitted probit model — plot.RprobitB_fit","text":"return value. Draws plot current device.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_acf.html","id":null,"dir":"Reference","previous_headings":"","what":"Autocorrelation plot of Gibbs samples — plot_acf","title":"Autocorrelation plot of Gibbs samples — plot_acf","text":"function plots autocorrelation Gibbs samples. plots include total Gibbs sample size TSS effective sample size ESS, see details.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_acf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autocorrelation plot of Gibbs samples — plot_acf","text":"","code":"plot_acf(gibbs_samples, par_labels)"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_acf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autocorrelation plot of Gibbs samples — plot_acf","text":"gibbs_samples matrix Gibbs samples. par_labels character vector labels Gibbs samples, length equal number columns gibbs_samples.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_acf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autocorrelation plot of Gibbs samples — plot_acf","text":"return value. Draws plot current device.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_acf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Autocorrelation plot of Gibbs samples — plot_acf","text":"effective sample size value $$\\text{TSS} / \\sqrt{1 + 2\\sum_{k\\geq 1} \\rho_k}$$, \\(\\rho_k\\) auto correlation chain offset \\(k\\) positions. auto correlations estimated via spec.ar.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_acf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autocorrelation plot of Gibbs samples — plot_acf","text":"","code":"gibbs_samples <- matrix(arima.sim(list(order=c(1,0,0), ar = 0.5), n = 100)) RprobitB:::plot_acf(gibbs_samples, par_labels = \"simulated AR(1) process\")"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_class_allocation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot class allocation (for P_r = 2 only) — plot_class_allocation","title":"Plot class allocation (for P_r = 2 only) — plot_class_allocation","text":"function plots allocation decision-maker specific coefficient vectors beta given allocation vector z, class means b, class covariance matrices Omega.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_class_allocation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot class allocation (for P_r = 2 only) — plot_class_allocation","text":"","code":"plot_class_allocation(beta, z, b, Omega, ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_class_allocation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot class allocation (for P_r = 2 only) — plot_class_allocation","text":"beta matrix decision-maker specific coefficient vectors dimension P_r x N. Set NA P_r = 0. z vector allocation variables length N. Set NA P_r = 0. b matrix class means columns dimension P_r x C. Set NA P_r = 0. Omega matrix class covariance matrices columns dimension P_r*P_r x C. Set NA P_r = 0. ... Optional visualization parameters: colors, character vector color specifications, perc, numeric 0 1 draw perc percentile ellipsoids underlying Gaussian distributions (perc = 0.95 per default), r, current iteration number Gibbs sampler displayed legend, sleep, number seconds pause plotting.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_class_allocation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot class allocation (for P_r = 2 only) — plot_class_allocation","text":"return value. Draws plot current device.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_class_allocation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot class allocation (for P_r = 2 only) — plot_class_allocation","text":"applicable two-dimensional case, .e. P_r = 2.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_class_allocation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot class allocation (for P_r = 2 only) — plot_class_allocation","text":"","code":"b <- matrix(c(-1,1,1,1), ncol = 2) Omega <- matrix(c(0.8,0.5,0.5,1,0.5,-0.2,-0.2,0.3), ncol = 2) z <- rep(1:2, each = 10) beta <- sapply(z, function(z) rmvnorm(mu = b[,z], Sigma = matrix(Omega[,z], ncol = 2))) RprobitB:::plot_class_allocation(beta = beta, z = z, b = b, Omega = Omega,                                  colors = c(\"red\",\"blue\"), perc = 0.5, r = 1)"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_mixture_contour.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot bivariate contour of mixing distributions — plot_mixture_contour","title":"Plot bivariate contour of mixing distributions — plot_mixture_contour","text":"function plots estimated bivariate contour mixing distributions.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_mixture_contour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot bivariate contour of mixing distributions — plot_mixture_contour","text":"","code":"plot_mixture_contour(means, covs, weights, names)"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_mixture_contour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot bivariate contour of mixing distributions — plot_mixture_contour","text":"means class means. covs class covariances. weights class weights. names covariate names.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_mixture_contour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot bivariate contour of mixing distributions — plot_mixture_contour","text":"object class ggplot.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_mixture_contour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot bivariate contour of mixing distributions — plot_mixture_contour","text":"","code":"means <- list(c(0,0),c(1,1)) covs <- list(diag(2),0.5*diag(2)) weights <- c(0.3,0.7) names <- c(\"A\",\"B\") RprobitB:::plot_mixture_contour(means, covs, weights, names)"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_mixture_marginal.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marginal mixing distributions — plot_mixture_marginal","title":"Plot marginal mixing distributions — plot_mixture_marginal","text":"function plots estimated marginal mixing distributions.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_mixture_marginal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marginal mixing distributions — plot_mixture_marginal","text":"","code":"plot_mixture_marginal(mean, cov, weights, name)"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_mixture_marginal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marginal mixing distributions — plot_mixture_marginal","text":"mean class means. cov class covariances. weights class weights. name covariate name.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_mixture_marginal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marginal mixing distributions — plot_mixture_marginal","text":"object class ggplot.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_mixture_marginal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marginal mixing distributions — plot_mixture_marginal","text":"","code":"mean <- list(1,2) cov <- list(0.1,1) weights <- c(0.3,0.7) name <- \"test\" RprobitB:::plot_mixture_marginal(mean, cov, weights, name)"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_roc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ROC curve — plot_roc","title":"Plot ROC curve — plot_roc","text":"function draws receiver operating characteristic (ROC) curves.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_roc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ROC curve — plot_roc","text":"","code":"plot_roc(..., reference = NULL)"},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_roc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ROC curve — plot_roc","text":"... One RprobitB_fit objects data.frames choice probability. reference reference alternative.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_roc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ROC curve — plot_roc","text":"return value. Draws plot current device.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/plot_roc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ROC curve — plot_roc","text":"","code":"RprobitB:::plot_roc(RprobitB::model_train)"},{"path":"https://loelschlaeger.de/RprobitB/reference/point_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute point estimates — point_estimates","title":"Compute point estimates — point_estimates","text":"function computes point estimates RprobitB_fit. Per default, mean Gibbs samples used point estimate. However, statistic computes single numeric value vector Gibbs samples can specified FUN.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/point_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute point estimates — point_estimates","text":"","code":"point_estimates(x, FUN = mean)"},{"path":"https://loelschlaeger.de/RprobitB/reference/point_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute point estimates — point_estimates","text":"x object class RprobitB_fit. FUN function computes single numeric value vector numeric values.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/point_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute point estimates — point_estimates","text":"object class RprobitB_parameter.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/point_estimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute point estimates — point_estimates","text":"","code":"data <- simulate_choices(form = choice ~ covariate, N = 10, T = 10, J = 2) model <- fit_model(data) #> Computing sufficient statistics - 0 of 4   #> Computing sufficient statistics - 1 of 4   #> Computing sufficient statistics - 2 of 4   #> Computing sufficient statistics - 3 of 4   #> Computing sufficient statistics - 4 of 4   #> MCMC iteration - 1 of 1000   #> MCMC iteration - 10 of 1000   #> MCMC iteration - 20 of 1000   #> MCMC iteration - 30 of 1000   #> MCMC iteration - 40 of 1000   #> MCMC iteration - 50 of 1000   #> MCMC iteration - 60 of 1000   #> MCMC iteration - 70 of 1000   #> MCMC iteration - 80 of 1000   #> MCMC iteration - 90 of 1000   #> MCMC iteration - 100 of 1000   #> MCMC iteration - 110 of 1000   #> MCMC iteration - 120 of 1000   #> MCMC iteration - 130 of 1000   #> MCMC iteration - 140 of 1000   #> MCMC iteration - 150 of 1000   #> MCMC iteration - 160 of 1000   #> MCMC iteration - 170 of 1000   #> MCMC iteration - 180 of 1000   #> MCMC iteration - 190 of 1000   #> MCMC iteration - 200 of 1000   #> MCMC iteration - 210 of 1000   #> MCMC iteration - 220 of 1000   #> MCMC iteration - 230 of 1000   #> MCMC iteration - 240 of 1000   #> MCMC iteration - 250 of 1000   #> MCMC iteration - 260 of 1000   #> MCMC iteration - 270 of 1000   #> MCMC iteration - 280 of 1000   #> MCMC iteration - 290 of 1000   #> MCMC iteration - 300 of 1000   #> MCMC iteration - 310 of 1000   #> MCMC iteration - 320 of 1000   #> MCMC iteration - 330 of 1000   #> MCMC iteration - 340 of 1000   #> MCMC iteration - 350 of 1000   #> MCMC iteration - 360 of 1000   #> MCMC iteration - 370 of 1000   #> MCMC iteration - 380 of 1000   #> MCMC iteration - 390 of 1000   #> MCMC iteration - 400 of 1000   #> MCMC iteration - 410 of 1000   #> MCMC iteration - 420 of 1000   #> MCMC iteration - 430 of 1000   #> MCMC iteration - 440 of 1000   #> MCMC iteration - 450 of 1000   #> MCMC iteration - 460 of 1000   #> MCMC iteration - 470 of 1000   #> MCMC iteration - 480 of 1000   #> MCMC iteration - 490 of 1000   #> MCMC iteration - 500 of 1000   #> MCMC iteration - 510 of 1000   #> MCMC iteration - 520 of 1000   #> MCMC iteration - 530 of 1000   #> MCMC iteration - 540 of 1000   #> MCMC iteration - 550 of 1000   #> MCMC iteration - 560 of 1000   #> MCMC iteration - 570 of 1000   #> MCMC iteration - 580 of 1000   #> MCMC iteration - 590 of 1000   #> MCMC iteration - 600 of 1000   #> MCMC iteration - 610 of 1000   #> MCMC iteration - 620 of 1000   #> MCMC iteration - 630 of 1000   #> MCMC iteration - 640 of 1000   #> MCMC iteration - 650 of 1000   #> MCMC iteration - 660 of 1000   #> MCMC iteration - 670 of 1000   #> MCMC iteration - 680 of 1000   #> MCMC iteration - 690 of 1000   #> MCMC iteration - 700 of 1000   #> MCMC iteration - 710 of 1000   #> MCMC iteration - 720 of 1000   #> MCMC iteration - 730 of 1000   #> MCMC iteration - 740 of 1000   #> MCMC iteration - 750 of 1000   #> MCMC iteration - 760 of 1000   #> MCMC iteration - 770 of 1000   #> MCMC iteration - 780 of 1000   #> MCMC iteration - 790 of 1000   #> MCMC iteration - 800 of 1000   #> MCMC iteration - 810 of 1000   #> MCMC iteration - 820 of 1000   #> MCMC iteration - 830 of 1000   #> MCMC iteration - 840 of 1000   #> MCMC iteration - 850 of 1000   #> MCMC iteration - 860 of 1000   #> MCMC iteration - 870 of 1000   #> MCMC iteration - 880 of 1000   #> MCMC iteration - 890 of 1000   #> MCMC iteration - 900 of 1000   #> MCMC iteration - 910 of 1000   #> MCMC iteration - 920 of 1000   #> MCMC iteration - 930 of 1000   #> MCMC iteration - 940 of 1000   #> MCMC iteration - 950 of 1000   #> MCMC iteration - 960 of 1000   #> MCMC iteration - 970 of 1000   #> MCMC iteration - 980 of 1000   #> MCMC iteration - 990 of 1000   #> MCMC iteration - 1000 of 1000   #> Computing log-likelihood point_estimates(model) #> alpha : double vector of length 2  #>  #> 2.1268 2.2299 #>  #> C : NA #>  #> s : NA #>  #> b : NA #>  #> Omega : NA #>  #> Sigma : 1 #>  #> Sigma_full : 2 x 2 matrix of doubles  #>  #>      [,1] [,2] #> [1,]    2    1 #> [2,]    1    1 #>  #>  #> beta : NA #>  #> z : NA #>  #> d : NA #>  point_estimates(model, FUN = median) #> alpha : double vector of length 2  #>  #> 2.1029 2.2128 #>  #> C : NA #>  #> s : NA #>  #> b : NA #>  #> Omega : NA #>  #> Sigma : 1 #>  #> Sigma_full : 2 x 2 matrix of doubles  #>  #>      [,1] [,2] #> [1,]    2    1 #> [2,]    1    1 #>  #>  #> beta : NA #>  #> z : NA #>  #> d : NA #>"},{"path":"https://loelschlaeger.de/RprobitB/reference/posterior_pars.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter sets from posterior samples — posterior_pars","title":"Parameter sets from posterior samples — posterior_pars","text":"function builds parameter sets normalized, burned thinned posterior samples.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/posterior_pars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter sets from posterior samples — posterior_pars","text":"","code":"posterior_pars(x)"},{"path":"https://loelschlaeger.de/RprobitB/reference/posterior_pars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter sets from posterior samples — posterior_pars","text":"x object class RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/posterior_pars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter sets from posterior samples — posterior_pars","text":"list RprobitB_parameter-objects.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/posterior_pars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter sets from posterior samples — posterior_pars","text":"","code":"data(\"model_train\", package = \"RprobitB\") pars <- RprobitB:::posterior_pars(model_train) pars[[1]] #> alpha : double vector of length 4  #>  #> -1 -25.251 -5.2657 -15.7459 #>  #> C : NA #>  #> s : NA #>  #> b : NA #>  #> Omega : NA #>  #> Sigma : 648.5217 #>  #> Sigma_full : 2 x 2 matrix of doubles  #>  #>          [,1] [,2] #> [1,] 649.5217    1 #> [2,]   1.0000    1 #>  #>  #> beta : NA #>  #> z : NA #>  #> d : NA #>"},{"path":"https://loelschlaeger.de/RprobitB/reference/pprint.html","id":null,"dir":"Reference","previous_headings":"","what":"Print abbreviated matrices and vectors — pprint","title":"Print abbreviated matrices and vectors — pprint","text":"function prints abbreviated matrices vectors.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/pprint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print abbreviated matrices and vectors — pprint","text":"","code":"pprint(x, rowdots = 4, coldots = 4, digits = 4, name = NULL, desc = TRUE)"},{"path":"https://loelschlaeger.de/RprobitB/reference/pprint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print abbreviated matrices and vectors — pprint","text":"x (numeric character) matrix vector. rowdots row number replaced dots. coldots column number replaced dots. digits x numeric, sets number decimal places. name Either NULL label x. printed desc = TRUE. desc Set TRUE print name dimension x.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/pprint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print abbreviated matrices and vectors — pprint","text":"Invisibly returns x.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/pprint.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Print abbreviated matrices and vectors — pprint","text":"function modified version pprint.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/pprint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print abbreviated matrices and vectors — pprint","text":"","code":"RprobitB:::pprint(x = 1, name = \"single integer\") #> single integer : 1 RprobitB:::pprint(x = LETTERS[1:26], name = \"letters\") #> letters : character vector of length 26  #>  #> A B C ... Z RprobitB:::pprint(x = matrix(rnorm(100), ncol = 1),                   name = \"single column matrix\") #> single column matrix : 100 x 1 matrix of doubles  #>  #>           [,1] #> [1,]    1.1144 #> [2,]   -0.0042 #> [3,]   -1.0775 #> ...        ... #> [100,] -0.4254 RprobitB:::pprint(x = matrix(1:100, nrow = 1), name = \"single row matrix\") #> single row matrix : 1 x 100 matrix of integers  #>  #>      [,1] [,2] [,3] ... [,100] #> [1,]    1    2    3 ...    100 RprobitB:::pprint(x = matrix(LETTERS[1:24], ncol = 6), name = \"big matrix\") #> big matrix : 4 x 6 matrix of characters  #>  #>      [,1] [,2] [,3] ... [,6] #> [1,]    A    E    I ...    U #> [2,]    B    F    J ...    V #> [3,]    C    G    K ...    W #> [4,]    D    H    L ...    X"},{"path":"https://loelschlaeger.de/RprobitB/reference/pred_acc.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute prediction accuracy — pred_acc","title":"Compute prediction accuracy — pred_acc","text":"function computes prediction accuracy RprobitB_fit object. Prediction accuracy means share choices correctly predicted model, prediction based maximum choice probability.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/pred_acc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute prediction accuracy — pred_acc","text":"","code":"pred_acc(x, ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/pred_acc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute prediction accuracy — pred_acc","text":"x object class RprobitB_fit. ... Optionally specify RprobitB_fit objects.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/pred_acc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute prediction accuracy — pred_acc","text":"numeric.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/pred_acc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute prediction accuracy — pred_acc","text":"","code":"data(\"model_train\", package = \"RprobitB\") pred_acc(model_train) #> [1] 0.696142"},{"path":"https://loelschlaeger.de/RprobitB/reference/predict.RprobitB_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict choices — predict.RprobitB_fit","title":"Predict choices — predict.RprobitB_fit","text":"function predicts discrete choice behavior","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/predict.RprobitB_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict choices — predict.RprobitB_fit","text":"","code":"# S3 method for RprobitB_fit predict(object, data = NULL, overview = TRUE, digits = 2, ...)"},{"path":"https://loelschlaeger.de/RprobitB/reference/predict.RprobitB_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict choices — predict.RprobitB_fit","text":"object object class RprobitB_fit. data Either NULL, using data object, object class RprobitB_data, example test part generated train_test, data frame custom choice characteristics. must structure choice_data used prepare_data. Missing columns NA values set 0. overview TRUE, returns confusion matrix. digits number digits returned choice probabilities. digits = 2 per default. ... Ignored.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/predict.RprobitB_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict choices — predict.RprobitB_fit","text":"Either table overview = TRUE data frame otherwise.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/predict.RprobitB_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict choices — predict.RprobitB_fit","text":"Predictions made based maximum predicted probability choice alternative. See vignette choice prediction demonstration visualize model's sensitivity specificity means receiver operating characteristic (ROC) curve.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/predict.RprobitB_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict choices — predict.RprobitB_fit","text":"","code":"data <- simulate_choices(   form = choice ~ cov, N = 10, T = 10, J = 2, seed = 1 ) data <- train_test(data, test_proportion = 0.5) model <- fit_model(data$train) #> Computing sufficient statistics - 0 of 4   #> Computing sufficient statistics - 1 of 4   #> Computing sufficient statistics - 2 of 4   #> Computing sufficient statistics - 3 of 4   #> Computing sufficient statistics - 4 of 4   #> MCMC iteration - 1 of 1000   #> MCMC iteration - 10 of 1000   #> MCMC iteration - 20 of 1000   #> MCMC iteration - 30 of 1000   #> MCMC iteration - 40 of 1000   #> MCMC iteration - 50 of 1000   #> MCMC iteration - 60 of 1000   #> MCMC iteration - 70 of 1000   #> MCMC iteration - 80 of 1000   #> MCMC iteration - 90 of 1000   #> MCMC iteration - 100 of 1000   #> MCMC iteration - 110 of 1000   #> MCMC iteration - 120 of 1000   #> MCMC iteration - 130 of 1000   #> MCMC iteration - 140 of 1000   #> MCMC iteration - 150 of 1000   #> MCMC iteration - 160 of 1000   #> MCMC iteration - 170 of 1000   #> MCMC iteration - 180 of 1000   #> MCMC iteration - 190 of 1000   #> MCMC iteration - 200 of 1000   #> MCMC iteration - 210 of 1000   #> MCMC iteration - 220 of 1000   #> MCMC iteration - 230 of 1000   #> MCMC iteration - 240 of 1000   #> MCMC iteration - 250 of 1000   #> MCMC iteration - 260 of 1000   #> MCMC iteration - 270 of 1000   #> MCMC iteration - 280 of 1000   #> MCMC iteration - 290 of 1000   #> MCMC iteration - 300 of 1000   #> MCMC iteration - 310 of 1000   #> MCMC iteration - 320 of 1000   #> MCMC iteration - 330 of 1000   #> MCMC iteration - 340 of 1000   #> MCMC iteration - 350 of 1000   #> MCMC iteration - 360 of 1000   #> MCMC iteration - 370 of 1000   #> MCMC iteration - 380 of 1000   #> MCMC iteration - 390 of 1000   #> MCMC iteration - 400 of 1000   #> MCMC iteration - 410 of 1000   #> MCMC iteration - 420 of 1000   #> MCMC iteration - 430 of 1000   #> MCMC iteration - 440 of 1000   #> MCMC iteration - 450 of 1000   #> MCMC iteration - 460 of 1000   #> MCMC iteration - 470 of 1000   #> MCMC iteration - 480 of 1000   #> MCMC iteration - 490 of 1000   #> MCMC iteration - 500 of 1000   #> MCMC iteration - 510 of 1000   #> MCMC iteration - 520 of 1000   #> MCMC iteration - 530 of 1000   #> MCMC iteration - 540 of 1000   #> MCMC iteration - 550 of 1000   #> MCMC iteration - 560 of 1000   #> MCMC iteration - 570 of 1000   #> MCMC iteration - 580 of 1000   #> MCMC iteration - 590 of 1000   #> MCMC iteration - 600 of 1000   #> MCMC iteration - 610 of 1000   #> MCMC iteration - 620 of 1000   #> MCMC iteration - 630 of 1000   #> MCMC iteration - 640 of 1000   #> MCMC iteration - 650 of 1000   #> MCMC iteration - 660 of 1000   #> MCMC iteration - 670 of 1000   #> MCMC iteration - 680 of 1000   #> MCMC iteration - 690 of 1000   #> MCMC iteration - 700 of 1000   #> MCMC iteration - 710 of 1000   #> MCMC iteration - 720 of 1000   #> MCMC iteration - 730 of 1000   #> MCMC iteration - 740 of 1000   #> MCMC iteration - 750 of 1000   #> MCMC iteration - 760 of 1000   #> MCMC iteration - 770 of 1000   #> MCMC iteration - 780 of 1000   #> MCMC iteration - 790 of 1000   #> MCMC iteration - 800 of 1000   #> MCMC iteration - 810 of 1000   #> MCMC iteration - 820 of 1000   #> MCMC iteration - 830 of 1000   #> MCMC iteration - 840 of 1000   #> MCMC iteration - 850 of 1000   #> MCMC iteration - 860 of 1000   #> MCMC iteration - 870 of 1000   #> MCMC iteration - 880 of 1000   #> MCMC iteration - 890 of 1000   #> MCMC iteration - 900 of 1000   #> MCMC iteration - 910 of 1000   #> MCMC iteration - 920 of 1000   #> MCMC iteration - 930 of 1000   #> MCMC iteration - 940 of 1000   #> MCMC iteration - 950 of 1000   #> MCMC iteration - 960 of 1000   #> MCMC iteration - 970 of 1000   #> MCMC iteration - 980 of 1000   #> MCMC iteration - 990 of 1000   #> MCMC iteration - 1000 of 1000   #> Computing log-likelihood  predict(model) #>     predicted #> true  A  B #>    A 11  2 #>    B  0 37 predict(model, overview = FALSE) #>    id idc    A    B true predicted correct #> 1   1   1 0.18 0.82    B         B    TRUE #> 2   1   2 0.10 0.90    B         B    TRUE #> 3   1   3 0.13 0.87    B         B    TRUE #> 4   1   4 0.00 1.00    B         B    TRUE #> 5   1   5 0.00 1.00    B         B    TRUE #> 6   1   6 1.00 0.00    A         A    TRUE #> 7   1   7 0.37 0.63    B         B    TRUE #> 8   1   8 0.31 0.69    B         B    TRUE #> 9   1   9 0.08 0.92    B         B    TRUE #> 10  1  10 1.00 0.00    A         A    TRUE #> 11  2   1 0.00 1.00    B         B    TRUE #> 12  2   2 0.00 1.00    B         B    TRUE #> 13  2   3 1.00 0.00    A         A    TRUE #> 14  2   4 1.00 0.00    A         A    TRUE #> 15  2   5 0.00 1.00    B         B    TRUE #> 16  2   6 0.03 0.97    B         B    TRUE #> 17  2   7 0.04 0.96    B         B    TRUE #> 18  2   8 0.00 1.00    B         B    TRUE #> 19  2   9 0.04 0.96    B         B    TRUE #> 20  2  10 0.00 1.00    B         B    TRUE #> 21  3   1 0.00 1.00    B         B    TRUE #> 22  3   2 0.70 0.30    A         A    TRUE #> 23  3   3 0.05 0.95    B         B    TRUE #> 24  3   4 1.00 0.00    A         A    TRUE #> 25  3   5 0.00 1.00    B         B    TRUE #> 26  3   6 0.85 0.15    A         A    TRUE #> 27  3   7 0.24 0.76    B         B    TRUE #> 28  3   8 1.00 0.00    A         A    TRUE #> 29  3   9 0.07 0.93    B         B    TRUE #> 30  3  10 0.00 1.00    B         B    TRUE #> 31  4   1 0.00 1.00    B         B    TRUE #> 32  4   2 0.02 0.98    B         B    TRUE #> 33  4   3 0.29 0.71    A         B   FALSE #> 34  4   4 0.00 1.00    B         B    TRUE #> 35  4   5 1.00 0.00    A         A    TRUE #> 36  4   6 0.00 1.00    B         B    TRUE #> 37  4   7 0.25 0.75    B         B    TRUE #> 38  4   8 0.02 0.98    B         B    TRUE #> 39  4   9 0.00 1.00    B         B    TRUE #> 40  4  10 0.00 1.00    B         B    TRUE #> 41  5   1 0.00 1.00    B         B    TRUE #> 42  5   2 1.00 0.00    A         A    TRUE #> 43  5   3 0.00 1.00    B         B    TRUE #> 44  5   4 0.00 1.00    B         B    TRUE #> 45  5   5 0.02 0.98    B         B    TRUE #> 46  5   6 0.15 0.85    A         B   FALSE #> 47  5   7 1.00 0.00    A         A    TRUE #> 48  5   8 0.00 1.00    B         B    TRUE #> 49  5   9 0.00 1.00    B         B    TRUE #> 50  5  10 0.00 1.00    B         B    TRUE predict(model, data = data$test) #>     predicted #> true  A  B #>    A 15  3 #>    B  6 26 predict(   model,   data = data.frame(\"cov_A\" = c(1,1,NA,NA), \"cov_B\" = c(1,NA,1,NA)),   overview = FALSE ) #>   id idc    A    B prediction #> 1  1   1 0.18 0.82          B #> 2  2   1 0.00 1.00          B #> 3  3   1 0.95 0.05          A #> 4  4   1 0.18 0.82          B"},{"path":"https://loelschlaeger.de/RprobitB/reference/preference_flip.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for flip in preferences after change in model scale. — preference_flip","title":"Check for flip in preferences after change in model scale. — preference_flip","text":"function checks change model scale flipped preferences.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/preference_flip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for flip in preferences after change in model scale. — preference_flip","text":"","code":"preference_flip(model_old, model_new)"},{"path":"https://loelschlaeger.de/RprobitB/reference/preference_flip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for flip in preferences after change in model scale. — preference_flip","text":"model_old object class RprobitB_fit, model scale change. model_new object class RprobitB_fit, model scale change.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/preference_flip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for flip in preferences after change in model scale. — preference_flip","text":"return value, called side-effects.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/prepare_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare choice data for estimation — prepare_data","title":"Prepare choice data for estimation — prepare_data","text":"function prepares choice data estimation.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/prepare_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare choice data for estimation — prepare_data","text":"","code":"prepare_data(   form,   choice_data,   re = NULL,   alternatives = NULL,   ordered = FALSE,   ranked = FALSE,   base = NULL,   id = \"id\",   idc = NULL,   standardize = NULL,   impute = \"complete_cases\" )"},{"path":"https://loelschlaeger.de/RprobitB/reference/prepare_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare choice data for estimation — prepare_data","text":"form formula object used specify model equation. structure choice ~ | B | C, choice name dependent variable (choices), names alternative choice situation specific covariates coefficient constant across alternatives, B names choice situation specific covariates alternative specific coefficients, C names alternative choice situation specific covariates alternative specific coefficients. Multiple covariates (one type) separated + sign. default, alternative specific constants (ASCs) added model. can removed adding +0 second spot. ordered probit model (ordered = TRUE), formula object simple structure choice ~ . ASCs estimated. choice_data data.frame choice data wide format, .e. row represents one choice occasion. re character (vector) covariates form random effects. re = NULL (default), random effects. random effects ASCs, include \"ASC\" re. alternatives character vector names choice alternatives. specified, choice set defined observed choices. ordered = TRUE, alternatives assumed specified alternatives ordered worst best. ordered boolean, FALSE per default. TRUE, choice set alternatives assumed ordered worst best. ranked TBA base character, name base alternative covariates alternative specific (.e. type 2 covariates ASCs). Ignored set NULL model alternative specific covariates (e.g. ordered probit model). Per default, base last element alternatives. id character, name column choice_data contains unique identifier decision maker. default \"id\". idc character, name column choice_data contains unique identifier choice situation decision maker. Per default, identifier generated order appearance. standardize character vector names covariates get standardized. Covariates type 1 3 addressed <covariate>_<alternative>. standardize = \"\", covariates get standardized. impute character specifies handle missing entries choice_data, one : \"complete_cases\", removes rows containing missing covariate entries entries (default), \"zero\", replaces missing covariate entries zero (numeric columns), \"mean\", imputes missing covariate entries mean (numeric columns).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/prepare_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare choice data for estimation — prepare_data","text":"object class RprobitB_data.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/prepare_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare choice data for estimation — prepare_data","text":"Requirements data.frame choice_data: must contain column named id contains unique identifier decision maker. can contain column named idc contains unique identifier choice situation decision maker. information missing, identifier generated automatically appearance choices data set. can contain column named choice observed choices, choice must match name dependent variable form. column required model fitting prediction. must contain numeric column named p_j alternative specific covariate p form choice alternative j alternatives. must contain numeric column named q covariate q form constant across alternatives. ordered case (ordered = TRUE), column choice must contain full ranking alternatives choice occasion character, alternatives separated commas, see examples. See vignette choice data details.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/reference/prepare_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare choice data for estimation — prepare_data","text":"","code":"data(\"Train\", package = \"mlogit\") data <- prepare_data(   form = choice ~ price + time + comfort + change | 0,   choice_data = Train,   re = c(\"price\", \"time\"),   id = \"id\",   idc = \"choiceid\",   standardize = c(\"price\", \"time\") )  ### ranked case choice_data <- data.frame(   \"id\" = 1:3, \"choice\" = c(\"A,B,C\",\"A,C,B\",\"B,C,A\"), \"cov\" = 1 ) data <- prepare_data(   form = choice ~ 0 | cov + 0,   choice_data = choice_data,   ranked = TRUE )"},{"path":"https://loelschlaeger.de/RprobitB/reference/rdirichlet.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw from Dirichlet distribution — rdirichlet","title":"Draw from Dirichlet distribution — rdirichlet","text":"Function draw Dirichlet distribution.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/rdirichlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw from Dirichlet distribution — rdirichlet","text":"","code":"rdirichlet(delta)"},{"path":"https://loelschlaeger.de/RprobitB/reference/rdirichlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw from Dirichlet distribution — rdirichlet","text":"delta vector, concentration parameter.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/rdirichlet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw from Dirichlet distribution — rdirichlet","text":"vector, sample Dirichlet distribution length delta.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/rdirichlet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw from Dirichlet distribution — rdirichlet","text":"","code":"rdirichlet(delta = 1:3) #>            [,1] #> [1,] 0.01462974 #> [2,] 0.18676501 #> [3,] 0.79860525"},{"path":"https://loelschlaeger.de/RprobitB/reference/rmvnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw from multivariate normal distribution — rmvnorm","title":"Draw from multivariate normal distribution — rmvnorm","text":"function draws multivariate normal distribution.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/rmvnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw from multivariate normal distribution — rmvnorm","text":"","code":"rmvnorm(mu, Sigma)"},{"path":"https://loelschlaeger.de/RprobitB/reference/rmvnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw from multivariate normal distribution — rmvnorm","text":"mu mean vector length n. Sigma covariance matrix dimension n x n.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/rmvnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw from multivariate normal distribution — rmvnorm","text":"numeric vector length n.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/rmvnorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw from multivariate normal distribution — rmvnorm","text":"function builds upon following fact: \\(\\epsilon = (\\epsilon_1,\\dots,\\epsilon_n)\\), \\(\\epsilon_i\\) drawn independently standard normal distribution, \\(\\mu+L\\epsilon\\) draw multivariate normal distribution \\(N(\\mu,\\Sigma)\\), \\(L\\) lower triangular factor Choleski decomposition \\(\\Sigma\\).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/rmvnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw from multivariate normal distribution — rmvnorm","text":"","code":"mu <- c(0,0) Sigma <- diag(2) rmvnorm(mu = mu, Sigma = Sigma) #>            [,1] #> [1,] 0.04018181 #> [2,] 0.73337593"},{"path":"https://loelschlaeger.de/RprobitB/reference/rtnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw from one-sided truncated normal — rtnorm","title":"Draw from one-sided truncated normal — rtnorm","text":"function draws one-sided truncated univariate normal distribution.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/rtnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw from one-sided truncated normal — rtnorm","text":"","code":"rtnorm(mu, sig, trunpt, above)"},{"path":"https://loelschlaeger.de/RprobitB/reference/rtnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw from one-sided truncated normal — rtnorm","text":"mu mean. sig standard deviation. trunpt truncation point. boolean, TRUE truncate , otherwise .","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/rtnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw from one-sided truncated normal — rtnorm","text":"numeric value.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/rtnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw from one-sided truncated normal — rtnorm","text":"","code":"### samples from a standard normal truncated at 1 from above R <- 1e4 draws <- replicate(R, rtnorm(0,1,1,TRUE)) plot(density(draws))"},{"path":"https://loelschlaeger.de/RprobitB/reference/rttnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw from two-sided truncated normal — rttnorm","title":"Draw from two-sided truncated normal — rttnorm","text":"function draws two-sided truncated univariate normal distribution.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/rttnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw from two-sided truncated normal — rttnorm","text":"","code":"rttnorm(mu, sig, lower_bound, upper_bound)"},{"path":"https://loelschlaeger.de/RprobitB/reference/rttnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw from two-sided truncated normal — rttnorm","text":"mu mean. sig standard deviation. lower_bound lower truncation point. upper_bound upper truncation point.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/rttnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw from two-sided truncated normal — rttnorm","text":"numeric value.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/rttnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw from two-sided truncated normal — rttnorm","text":"","code":"### samples from a standard normal truncated at -2 and 2 R <- 1e4 draws <- replicate(R, rttnorm(0,1,-2,2)) plot(density(draws))"},{"path":"https://loelschlaeger.de/RprobitB/reference/rwishart.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw from Wishart distribution — rwishart","title":"Draw from Wishart distribution — rwishart","text":"function draws Wishart inverted Wishart distribution.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/rwishart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw from Wishart distribution — rwishart","text":"","code":"rwishart(nu, V)"},{"path":"https://loelschlaeger.de/RprobitB/reference/rwishart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw from Wishart distribution — rwishart","text":"nu numeric, degrees freedom. Must least number dimensions. V matrix, scale matrix.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/rwishart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw from Wishart distribution — rwishart","text":"list, draws Wishart (W), inverted Wishart (IW), corresponding Choleski decomposition (C CI).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/rwishart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw from Wishart distribution — rwishart","text":"Wishart distribution generalization multiple dimensions gamma distributions draws space covariance matrices. expectation nu*V variance increases nu values V. Wishart distribution conjugate prior precision matrix multivariate normal distribution proper nu greater number dimensions.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/rwishart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw from Wishart distribution — rwishart","text":"","code":"rwishart(nu = 2, V = diag(2)) #> $W #>           [,1]      [,2] #> [1,]  1.277530 -2.393022 #> [2,] -2.393022  4.494557 #>  #> $IW #>          [,1]      [,2] #> [1,] 292.2886 155.62223 #> [2,] 155.6222  83.07991 #>  #> $C #>          [,1]       [,2] #> [1,] 1.130279 -2.1171964 #> [2,] 0.000000  0.1097115 #>  #> $CI #>           [,1]      [,2] #> [1,] 0.8847376 17.073542 #> [2,] 0.0000000  9.114818 #>"},{"path":"https://loelschlaeger.de/RprobitB/reference/set_initial_gibbs_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Set initial values for the Gibbs sampler — set_initial_gibbs_values","title":"Set initial values for the Gibbs sampler — set_initial_gibbs_values","text":"function sets initial values Gibbs sampler.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/set_initial_gibbs_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set initial values for the Gibbs sampler — set_initial_gibbs_values","text":"","code":"set_initial_gibbs_values(   N,   T,   J,   P_f,   P_r,   C,   ordered = FALSE,   ranked = FALSE,   ss = NULL )"},{"path":"https://loelschlaeger.de/RprobitB/reference/set_initial_gibbs_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set initial values for the Gibbs sampler — set_initial_gibbs_values","text":"N number (greater equal 1) decision makers. T number (greater equal 1) choice occasions vector choice occasions length N (.e. decision maker specific number). Per default, T = 1. J number (greater equal 2) choice alternatives. P_f number covariates connected fixed coefficient (can 0). P_r number covariates connected random coefficient (can 0). C number (greater equal 1) latent classes. ordered boolean, FALSE per default. TRUE, choice set alternatives assumed ordered worst best. ranked TBA ss Optionally output sufficient_statistics.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/set_initial_gibbs_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set initial values for the Gibbs sampler — set_initial_gibbs_values","text":"list initial values Gibbs sampler.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/set_initial_gibbs_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set initial values for the Gibbs sampler — set_initial_gibbs_values","text":"","code":"RprobitB:::set_initial_gibbs_values(   N = 2, T = 3, J = 3, P_f = 1, P_r = 2, C = 2 ) #> $alpha0 #> [1] 0 #>  #> $z0 #> [1] 1 1 #>  #> $m0 #> [1] 1 1 #>  #> $b0 #>      [,1] [,2] #> [1,]    0    0 #> [2,]    0    0 #>  #> $Omega0 #>      [,1] [,2] #> [1,]    1    1 #> [2,]    0    0 #> [3,]    0    0 #> [4,]    1    1 #>  #> $beta0 #>      [,1] [,2] #> [1,]    0    0 #> [2,]    0    0 #>  #> $U0 #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    0    0    0    0    0    0 #> [2,]    0    0    0    0    0    0 #>  #> $Sigma0 #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    1 #>  #> $d0 #> [1] NA #>"},{"path":"https://loelschlaeger.de/RprobitB/reference/simulate_choices.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate choice data — simulate_choices","title":"Simulate choice data — simulate_choices","text":"function simulates choice data probit model.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/simulate_choices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate choice data — simulate_choices","text":"","code":"simulate_choices(   form,   N,   T = 1,   J,   re = NULL,   alternatives = NULL,   ordered = FALSE,   ranked = FALSE,   base = NULL,   covariates = NULL,   seed = NULL,   true_parameter = list() )"},{"path":"https://loelschlaeger.de/RprobitB/reference/simulate_choices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate choice data — simulate_choices","text":"form formula object used specify model equation. structure choice ~ | B | C, choice name dependent variable (choices), names alternative choice situation specific covariates coefficient constant across alternatives, B names choice situation specific covariates alternative specific coefficients, C names alternative choice situation specific covariates alternative specific coefficients. Multiple covariates (one type) separated + sign. default, alternative specific constants (ASCs) added model. can removed adding +0 second spot. ordered probit model (ordered = TRUE), formula object simple structure choice ~ . ASCs estimated. N number (greater equal 1) decision makers. T number (greater equal 1) choice occasions vector choice occasions length N (.e. decision maker specific number). Per default, T = 1. J number (greater equal 2) choice alternatives. re character (vector) covariates form random effects. re = NULL (default), random effects. random effects ASCs, include \"ASC\" re. alternatives character vector names choice alternatives. specified, choice set defined observed choices. ordered = TRUE, alternatives assumed specified alternatives ordered worst best. ordered boolean, FALSE per default. TRUE, choice set alternatives assumed ordered worst best. ranked TBA base character, name base alternative covariates alternative specific (.e. type 2 covariates ASCs). Ignored set NULL model alternative specific covariates (e.g. ordered probit model). Per default, base last element alternatives. covariates named list covariate values. element must vector length equal number choice occasions named according covariate. Covariates values supplied drawn standard normal distribution. seed Set seed simulation. true_parameter Optionally specify named list true parameter values alpha, C, s, b, Omega, Sigma, Sigma_full, beta, z, d simulation. See vignette model definition definitions variables.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/simulate_choices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate choice data — simulate_choices","text":"object class RprobitB_data.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/simulate_choices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate choice data — simulate_choices","text":"See vignette choice data details.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/reference/simulate_choices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate choice data — simulate_choices","text":"","code":"### simulate data from a binary probit model with two latent classes data <- simulate_choices(   form = choice ~ cost | income | time,   N = 100,   T = 10,   J = 2,   re = c(\"cost\", \"time\"),   alternatives = c(\"car\", \"bus\"),   seed = 1,   true_parameter = list(     \"alpha\" = c(-1, 1),     \"b\" = matrix(c(-1, -1, -0.5, -1.5, 0, -1), ncol = 2),     \"C\" = 2   ) )  ### simulate data from an ordered probit model data <- simulate_choices(   form = opinion ~ age + gender,   N = 10,   T = 1:10,   J = 5,   alternatives = c(\"very bad\", \"bad\", \"indifferent\", \"good\", \"very good\"),   ordered = TRUE,   covariates = list(     \"gender\" = rep(sample(c(0,1), 10, replace = TRUE), times = 1:10)     ),   seed = 1 )  ### simulate data from a ranked probit model data <- simulate_choices(   form = product ~ price,   N = 10,   T = 1:10,   J = 3,   alternatives = c(\"A\", \"B\", \"C\"),   ranked = TRUE,   seed = 1 )"},{"path":"https://loelschlaeger.de/RprobitB/reference/sufficient_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute sufficient statistics — sufficient_statistics","title":"Compute sufficient statistics — sufficient_statistics","text":"function computes sufficient statistics RprobitB_data object Gibbs sampler save computation time.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/sufficient_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute sufficient statistics — sufficient_statistics","text":"","code":"sufficient_statistics(data, normalization)"},{"path":"https://loelschlaeger.de/RprobitB/reference/sufficient_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute sufficient statistics — sufficient_statistics","text":"data object class RprobitB_data. normalization object class RprobitB_normalization, can created via RprobitB_normalization.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/sufficient_statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute sufficient statistics — sufficient_statistics","text":"list sufficient statistics data Gibbs sampling, containing elements N, T, J, P_f P_r data, Tvec, vector choice occasions decider length N, csTvec, vector length N cumulated sums Tvec starting 0, W, list design matrices differenced respect alternative number normalization$level$level decider choice occasion covariates linked fixed coefficient (NA P_f = 0), X, list design matrices differenced respect alternative number normalization$level$level decider choice occasion covariates linked random coefficient (NA P_r = 0), y, matrix dimension N x max(Tvec) observed choices deciders rows choice occasions columns, decoded numeric values respect appearance data$alternatives, rows filled NA case unbalanced panel, WkW, matrix dimension P_f^2 x (J-1)^2, sum Kronecker products transposed element W , XkX, list length N, element constructed way WkW elements X separately decider, rdiff (ranked case ), list matrices reverse base differencing instead difference way resulting utility vector negative.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/train_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Split choice data in train and test subset — train_test","title":"Split choice data in train and test subset — train_test","text":"function splits choice data train test part.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/train_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split choice data in train and test subset — train_test","text":"","code":"train_test(   x,   test_proportion = NULL,   test_number = NULL,   by = \"N\",   random = FALSE,   seed = NULL )"},{"path":"https://loelschlaeger.de/RprobitB/reference/train_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split choice data in train and test subset — train_test","text":"x object class RprobitB_data. test_proportion number 0 1, proportion test subsample. test_number positive integer, number observations test subsample. One \"N\" (split deciders) \"T\" (split choice occasions). random TRUE, subsamples build randomly. seed Set seed building subsamples randomly.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/train_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split choice data in train and test subset — train_test","text":"list two objects class RprobitB_data, named \"train\" \"test\".","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/train_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split choice data in train and test subset — train_test","text":"See vignette choice data details.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/train_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split choice data in train and test subset — train_test","text":"","code":"### simulate choices for demonstration x <- simulate_choices(form = choice ~ covariate, N = 10, T = 10, J = 2)  ### 70% of deciders in the train subsample, ### 30% of deciders in the test subsample train_test(x, test_proportion = 0.3, by = \"N\") #> $train #> Simulated data of 70 choices. #>  #> $test #> Simulated data of 30 choices. #>   ### 2 randomly chosen choice occasions per decider in the test subsample, ### the rest in the train subsample train_test(x, test_number = 2, by = \"T\", random = TRUE, seed = 1) #> $train #> Simulated data of 80 choices. #>  #> $test #> Simulated data of 20 choices. #>"},{"path":"https://loelschlaeger.de/RprobitB/reference/transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform fitted probit model — transform.RprobitB_fit","title":"Transform fitted probit model — transform.RprobitB_fit","text":"Given object class RprobitB_fit, function can: change length B burn-period, change thinning factor Q Gibbs samples, change utility scale.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform fitted probit model — transform.RprobitB_fit","text":"","code":"# S3 method for RprobitB_fit transform(   `_data`,   B = NULL,   Q = NULL,   scale = NULL,   check_preference_flip = TRUE,   ... )"},{"path":"https://loelschlaeger.de/RprobitB/reference/transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform fitted probit model — transform.RprobitB_fit","text":"_data object class RprobitB_fit. B length burn-period, .e. non-negative number samples discarded. Q thinning factor Gibbs samples, .e. every Qth sample kept. scale character determines utility scale. form <parameter> := <value>, <parameter> either name fixed effect Sigma_<j>,<j> <j>th diagonal element Sigma, <value> value fixed parameter. check_preference_flip Set TRUE check flip preferences new scale. ... Ignored.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform fitted probit model — transform.RprobitB_fit","text":"transformed RprobitB_fit object.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/transform.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform fitted probit model — transform.RprobitB_fit","text":"See vignette \"Model fitting\" details: vignette(\"v03_model_fitting\", package = \"RprobitB\").","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform fitted probit model — transform.RprobitB_fit","text":"","code":"data(model_train)  ### change the length B of the burn-in period transform(model_train, B = 1) #> Probit model 'choice ~ price + time + change + comfort | 0'.  ### change the thinning factor Q transform(model_train, Q = 1) #> Probit model 'choice ~ price + time + change + comfort | 0'.  ### change the scale transform(model_train, scale = \"Sigma_1,1 := 1\") #> Probit model 'choice ~ price + time + change + comfort | 0'."},{"path":"https://loelschlaeger.de/RprobitB/reference/transform_gibbs_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Transformation of Gibbs samples — transform_gibbs_samples","title":"Transformation of Gibbs samples — transform_gibbs_samples","text":"function normalizes, burns thins Gibbs samples.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/transform_gibbs_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transformation of Gibbs samples — transform_gibbs_samples","text":"","code":"transform_gibbs_samples(gibbs_samples, R, B, Q, normalization)"},{"path":"https://loelschlaeger.de/RprobitB/reference/transform_gibbs_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transformation of Gibbs samples — transform_gibbs_samples","text":"gibbs_samples output gibbs_sampling, .e. list Gibbs samples Sigma, alpha (P_f>0), s, z, b, Omega (P_r>0). R number iterations Gibbs sampler. B length burn-period, .e. non-negative number samples discarded. Q thinning factor Gibbs samples, .e. every Qth sample kept. normalization object class RprobitB_normalization, can created via RprobitB_normalization.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/transform_gibbs_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transformation of Gibbs samples — transform_gibbs_samples","text":"list, first element gibbs_sampes_raw input gibbs_samples, second element normalized, burned, thinned version gibbs_samples called gibbs_samples_nbt. list gets class RprobitB_gibbs_samples.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/transform_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Transformation of parameter values — transform_parameter","title":"Transformation of parameter values — transform_parameter","text":"function transforms parameter values based normalization.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/transform_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transformation of parameter values — transform_parameter","text":"","code":"transform_parameter(parameter, normalization, ordered = FALSE)"},{"path":"https://loelschlaeger.de/RprobitB/reference/transform_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transformation of parameter values — transform_parameter","text":"parameter object class RprobitB_parameter. normalization object class RprobitB_normalization. ordered boolean, FALSE per default. TRUE, choice set alternatives assumed ordered worst best.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/transform_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transformation of parameter values — transform_parameter","text":"object class RprobitB_parameter.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/undiff_Sigma.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform differenced to non-differenced error term covariance matrix — undiff_Sigma","title":"Transform differenced to non-differenced error term covariance matrix — undiff_Sigma","text":"function transforms differenced error term covariance matrix Sigma back non-differenced error term covariance matrix.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/undiff_Sigma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform differenced to non-differenced error term covariance matrix — undiff_Sigma","text":"","code":"undiff_Sigma(Sigma, i, checks = TRUE, pos = TRUE, labels = TRUE)"},{"path":"https://loelschlaeger.de/RprobitB/reference/undiff_Sigma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform differenced to non-differenced error term covariance matrix — undiff_Sigma","text":"Sigma error term covariance matrix dimension J-1 x J-1 differenced respect alternative . integer, alternative number respect Sigma differenced. checks TRUE function runs additional input transformation checks. pos TRUE function returns positive matrix. labels TRUE function adds labels output matrix.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/undiff_Sigma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform differenced to non-differenced error term covariance matrix — undiff_Sigma","text":"covariance matrix dimension J x J. covariance matrix gets differenced respect alternative , results Sigma.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/undiff_Sigma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform differenced to non-differenced error term covariance matrix — undiff_Sigma","text":"","code":"J <- 3 i <- 2 Sigma_full <- rwishart(3, diag(3))$W Sigma <- delta(J, 2) %*% Sigma_full %*% t(delta(J, 2)) Sigma_back <- RprobitB:::undiff_Sigma(Sigma = Sigma, i = 2)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update.RprobitB_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Update and re-fit probit model — update.RprobitB_fit","title":"Update and re-fit probit model — update.RprobitB_fit","text":"function estimates nested probit model based given RprobitB_fit object.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update.RprobitB_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update and re-fit probit model — update.RprobitB_fit","text":"","code":"# S3 method for RprobitB_fit update(   object,   form,   re,   alternatives,   id,   idc,   standardize,   impute,   scale,   R,   B,   Q,   print_progress,   prior,   latent_classes,   seed,   ... )"},{"path":"https://loelschlaeger.de/RprobitB/reference/update.RprobitB_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update and re-fit probit model — update.RprobitB_fit","text":"object object class RprobitB_fit. form formula object used specify model equation. structure choice ~ | B | C, choice name dependent variable (choices), names alternative choice situation specific covariates coefficient constant across alternatives, B names choice situation specific covariates alternative specific coefficients, C names alternative choice situation specific covariates alternative specific coefficients. Multiple covariates (one type) separated + sign. default, alternative specific constants (ASCs) added model. can removed adding +0 second spot. ordered probit model (ordered = TRUE), formula object simple structure choice ~ . ASCs estimated. re character (vector) covariates form random effects. re = NULL (default), random effects. random effects ASCs, include \"ASC\" re. alternatives character vector names choice alternatives. specified, choice set defined observed choices. ordered = TRUE, alternatives assumed specified alternatives ordered worst best. id character, name column choice_data contains unique identifier decision maker. default \"id\". idc character, name column choice_data contains unique identifier choice situation decision maker. Per default, identifier generated order appearance. standardize character vector names covariates get standardized. Covariates type 1 3 addressed <covariate>_<alternative>. standardize = \"\", covariates get standardized. impute character specifies handle missing entries choice_data, one : \"complete_cases\", removes rows containing missing covariate entries entries (default), \"zero\", replaces missing covariate entries zero (numeric columns), \"mean\", imputes missing covariate entries mean (numeric columns). scale character determines utility scale. form <parameter> := <value>, <parameter> either name fixed effect Sigma_<j>,<j> <j>th diagonal element Sigma, <value> value fixed parameter. R number iterations Gibbs sampler. B length burn-period, .e. non-negative number samples discarded. Q thinning factor Gibbs samples, .e. every Qth sample kept. print_progress boolean, determining whether print Gibbs sampler progress estimated remaining computation time. prior named list parameters prior distributions. See documentation check_prior details parameters can specified. latent_classes Either NULL (latent classes) list parameters specifying number latent classes updating scheme: C: fixed number (greater equal 1) latent classes, set 1 per default. either weight_update = TRUE dp_update = TRUE (.e. classes updated), C equals initial number latent classes. weight_update: boolean, set TRUE weight-based update latent classes. See ... details. dp_update: boolean, set TRUE update latent classes based Dirichlet process. See ... details. Cmax: maximum number latent classes. buffer: number iterations wait next weight-based update latent classes. epsmin: threshold weight (0 1) removing latent class weight-based updating scheme. epsmax: threshold weight (0 1) splitting latent class weight-based updating scheme. distmin: (non-negative) threshold class mean difference joining two latent classes weight-based updating scheme. seed Set seed Gibbs sampling. ... Ignored.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update.RprobitB_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update and re-fit probit model — update.RprobitB_fit","text":"object class RprobitB_fit.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update.RprobitB_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update and re-fit probit model — update.RprobitB_fit","text":"parameters (except object) optional specified retrieved specification object.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Omega.html","id":null,"dir":"Reference","previous_headings":"","what":"Update class covariances — update_Omega","title":"Update class covariances — update_Omega","text":"function updates class covariances (independent classes).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Omega.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update class covariances — update_Omega","text":"","code":"update_Omega(beta, b, z, m, nu, Theta)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Omega.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update class covariances — update_Omega","text":"beta matrix decision-maker specific coefficient vectors dimension P_r x N. Set NA P_r = 0. b matrix class means columns dimension P_r x C. Set NA P_r = 0. z vector allocation variables length N. Set NA P_r = 0. m vector class sizes length C. nu degrees freedom (natural number greater P_r) Inverse Wishart prior Omega_c. Per default, nu = P_r + 2. Theta scale matrix dimension P_r x P_r Inverse Wishart prior Omega_c. Per default, Theta = diag(P_r).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Omega.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update class covariances — update_Omega","text":"matrix updated covariance matrices class columns.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Omega.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update class covariances — update_Omega","text":"following holds independently class \\(c\\). Let \\(\\Omega_c\\) covariance matrix class number c. priori, assume \\(\\Omega_c\\) inverse Wishart distributed \\(\\nu\\) degrees freedom scale matrix \\(\\Theta\\). Let \\((\\beta_n)_{z_n=c}\\) collection \\(\\beta_n\\) currently allocated class \\(c\\), \\(m_c\\) size class \\(c\\), \\(b_c\\) class mean vector. Due conjugacy prior, posterior \\(\\Pr(\\Omega_c \\mid (\\beta_n)_{z_n=c})\\) follows inverted Wishart distribution \\(\\nu + m_c\\) degrees freedom scale matrix \\(\\Theta^{-1} + \\sum_n (\\beta_n - b_c)(\\beta_n - b_c)'\\), product values \\(n\\) \\(z_n=c\\) holds.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Omega.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update class covariances — update_Omega","text":"","code":"### N = 100 decider, P_r = 2 random coefficients, and C = 2 latent classes N <- 100 b <- cbind(c(0,0),c(1,1)) (Omega_true <- matrix(c(1,0.3,0.3,0.5,1,-0.3,-0.3,0.8), ncol=2)) #>      [,1] [,2] #> [1,]  1.0  1.0 #> [2,]  0.3 -0.3 #> [3,]  0.3 -0.3 #> [4,]  0.5  0.8 z <- c(rep(1,N/2),rep(2,N/2)) m <- as.numeric(table(z)) beta <- sapply(z, function(z) rmvnorm(b[,z], matrix(Omega_true[,z],2,2))) ### degrees of freedom and scale matrix for the Wishart prior nu <- 1 Theta <- diag(2) ### updated class covariance matrices (in columns) update_Omega(beta = beta, b = b, z = z, m = m, nu = nu, Theta = Theta) #>           [,1]       [,2] #> [1,] 0.5829456  1.2182977 #> [2,] 0.1225124 -0.4149462 #> [3,] 0.1225124 -0.4149462 #> [4,] 0.5512615  0.9813529"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Sigma.html","id":null,"dir":"Reference","previous_headings":"","what":"Update error term covariance matrix of multiple linear regression — update_Sigma","title":"Update error term covariance matrix of multiple linear regression — update_Sigma","text":"function updates error term covariance matrix multiple linear regression.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Sigma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update error term covariance matrix of multiple linear regression — update_Sigma","text":"","code":"update_Sigma(kappa, E, N, S)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Sigma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update error term covariance matrix of multiple linear regression — update_Sigma","text":"kappa degrees freedom (natural number greater J-1) Inverse Wishart prior Sigma. Per default, kappa = J + 1. E scale matrix dimension J-1 x J-1 Inverse Wishart prior Sigma. Per default, E = diag(J - 1). N draw size. S matrix, sum outer products residuals \\((\\epsilon_n)_{n=1,\\dots,N}\\).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Sigma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update error term covariance matrix of multiple linear regression — update_Sigma","text":"matrix, draw Inverse Wishart posterior distribution error term covariance matrix multiple linear regression.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Sigma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update error term covariance matrix of multiple linear regression — update_Sigma","text":"function draws posterior distribution covariance matrix \\(\\Sigma\\) linear utility equation $$U_n = X_n\\beta + \\epsilon_n,$$ \\(U_n\\) (latent, assumed known) utility vector decider \\(n = 1,\\dots,N\\), \\(X_n\\) design matrix build choice characteristics faced \\(n\\), \\(\\beta\\) coefficient vector, \\(\\epsilon_n\\) error term assumed normally distributed mean \\(0\\) unknown covariance matrix \\(\\Sigma\\). priori assume (conjugate) Inverse Wishart distribution $$\\Sigma \\sim W(\\kappa,E)$$ \\(\\kappa\\) degrees freedom scale matrix \\(E\\). posterior \\(\\Sigma\\) Inverted Wishart distribution \\(\\kappa + N\\) degrees freedom scale matrix \\(E^{-1}+S\\), \\(S = \\sum_{n=1}^{N} \\epsilon_n \\epsilon_n'\\) sum outer products residuals \\((\\epsilon_n = U_n - X_n\\beta)_n\\).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_Sigma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update error term covariance matrix of multiple linear regression — update_Sigma","text":"","code":"### true error term covariance matrix (Sigma_true <- matrix(c(1,0.5,0.2,0.5,1,0.2,0.2,0.2,2), ncol=3)) #>      [,1] [,2] [,3] #> [1,]  1.0  0.5  0.2 #> [2,]  0.5  1.0  0.2 #> [3,]  0.2  0.2  2.0 ### coefficient vector beta <- matrix(c(-1,1), ncol=1) ### draw data N <- 100 X <- replicate(N, matrix(rnorm(6), ncol=2), simplify = FALSE) eps <- replicate(N, rmvnorm(mu = c(0,0,0), Sigma = Sigma_true), simplify = FALSE) U <- mapply(function(X, eps) X %*% beta + eps, X, eps, SIMPLIFY = FALSE) ### prior parameters for covariance matrix kappa <- 4 E <- diag(3) ### draw from posterior of coefficient vector outer_prod <- function(X, U) (U - X %*% beta) %*% t(U - X %*% beta) S <- Reduce(`+`, mapply(outer_prod, X, U, SIMPLIFY = FALSE)) Sigma_draws <- replicate(100, update_Sigma(kappa, E, N, S)) apply(Sigma_draws, 1:2, mean) #>           [,1]        [,2]        [,3] #> [1,] 1.2433933 0.599333881 0.303754609 #> [2,] 0.5993339 1.126533916 0.002703635 #> [3,] 0.3037546 0.002703635 2.054583290 apply(Sigma_draws, 1:2, stats::sd) #>           [,1]      [,2]      [,3] #> [1,] 0.1910950 0.1469450 0.1866532 #> [2,] 0.1469450 0.1481329 0.1588351 #> [3,] 0.1866532 0.1588351 0.3048582"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U.html","id":null,"dir":"Reference","previous_headings":"","what":"Update latent utility vector — update_U","title":"Update latent utility vector — update_U","text":"function updates latent utility vector, (independent across deciders choice occasions) utility alternative updated conditional utilities.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update latent utility vector — update_U","text":"","code":"update_U(U, y, sys, Sigmainv)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update latent utility vector — update_U","text":"U current utility vector length J-1. y integer 1 J, index chosen alternative. sys vector length J-1, systematic utility part. Sigmainv inverted error term covariance matrix dimension J-1 x J-1.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update latent utility vector — update_U","text":"updated utility vector length J-1.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update latent utility vector — update_U","text":"key ingredient Gibbs sampling probit models considering latent utilities parameters can updated (data augmentation). Independently deciders \\(n=1,\\dots,N\\) choice occasions \\(t=1,...,T_n\\), utility vectors \\((U_{nt})_{n,t}\\) linear utility equation \\(U_{nt} = X_{nt} \\beta + \\epsilon_{nt}\\) follow \\(J-1\\)-dimensional truncated normal distribution, \\(J\\) number alternatives, \\(X_{nt} \\beta\\) systematic (.e. non-random) part utility \\(\\epsilon_{nt} \\sim N(0,\\Sigma)\\) error term. truncation points determined choices \\(y_{nt}\\). draw truncated multivariate normal distribution, function implemented approach Geweke (1998) conditionally draw component separately univariate truncated normal distribution. See Oelschläger (2020) concrete formulas.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Update latent utility vector — update_U","text":"See Geweke (1998) Efficient Simulation Multivariate Normal Student-t Distributions Subject Linear Constraints Evaluation Constraint Probabilities Gibbs sampling truncated multivariate normal distribution. See Oelschläger Bauer (2020) Bayes Estimation Latent Class Mixed Multinomial Probit Models application probit utilities.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update latent utility vector — update_U","text":"","code":"U <- c(0,0,0) y <- 3 sys <- c(0,0,0) Sigmainv <- solve(diag(3)) update_U(U, y, sys, Sigmainv) #>            [,1] #> [1,] -1.2428306 #> [2,] -1.6710771 #> [3,]  0.8413893"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U_ranked.html","id":null,"dir":"Reference","previous_headings":"","what":"Update latent utility vector in the ranked probit case — update_U_ranked","title":"Update latent utility vector in the ranked probit case — update_U_ranked","text":"function updates latent utility vector ranked probit case.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U_ranked.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update latent utility vector in the ranked probit case — update_U_ranked","text":"","code":"update_U_ranked(U, sys, Sigmainv)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U_ranked.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update latent utility vector in the ranked probit case — update_U_ranked","text":"U current utility vector length J-1, differenced vector negative. sys vector length J-1, systematic utility part. Sigmainv inverted error term covariance matrix dimension J-1 x J-1.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U_ranked.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update latent utility vector in the ranked probit case — update_U_ranked","text":"updated utility vector length J-1.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U_ranked.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update latent utility vector in the ranked probit case — update_U_ranked","text":"update basically non-ranked case, despite truncation point zero.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_U_ranked.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update latent utility vector in the ranked probit case — update_U_ranked","text":"","code":"U <- c(0,0) sys <- c(0,0) Sigmainv <- diag(2) update_U_ranked(U, sys, Sigmainv) #>            [,1] #> [1,] -0.3855049 #> [2,] -0.2872069"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_b.html","id":null,"dir":"Reference","previous_headings":"","what":"Update class means — update_b","title":"Update class means — update_b","text":"function updates class means (independent classes).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_b.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update class means — update_b","text":"","code":"update_b(beta, Omega, z, m, xi, Dinv)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_b.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update class means — update_b","text":"beta matrix decision-maker specific coefficient vectors dimension P_r x N. Set NA P_r = 0. Omega matrix class covariance matrices columns dimension P_r*P_r x C. Set NA P_r = 0. z vector allocation variables length N. Set NA P_r = 0. m vector class sizes length C. xi mean vector length P_r normal prior b_c. Per default, xi = numeric(P_r). Dinv precision matrix (.e. inverse covariance matrix) dimension P_r x P_r normal prior b_c.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_b.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update class means — update_b","text":"matrix updated means class columns.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_b.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update class means — update_b","text":"following holds independently class \\(c\\). Let \\(b_c\\) mean class number \\(c\\). priori, assume \\(b_c\\) normally distributed mean vector \\(\\xi\\) covariance matrix \\(D\\). Let \\((\\beta_n)_{z_n=c}\\) collection \\(\\beta_n\\) currently allocated class \\(c\\), \\(m_c\\) class size, \\(\\bar{b}_c\\) arithmetic mean. Assuming independence across draws, \\((\\beta_n)_{z_n=c}\\) normal likelihood $$\\prod_n \\phi(\\beta_n \\mid b_c,\\Omega_c),$$ product values \\(n\\) \\(z_n=c\\) holds. Due conjugacy prior, posterior \\(\\Pr(b_c \\mid (\\beta_n)_{z_n=c})\\) follows normal distribution mean $$(D^{-1} + m_c\\Omega_c^{-1})^{-1}(D^{-1}\\xi + m_c\\Omega_c^{-1}\\bar{b}_c)$$ covariance matrix $$(D^{-1} + m_c \\Omega_c^{-1})^{-1}.$$","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_b.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update class means — update_b","text":"","code":"### N = 100 decider, P_r = 2 random coefficients, and C = 2 latent classes N <- 100 (b_true <- cbind(c(0,0),c(1,1))) #>      [,1] [,2] #> [1,]    0    1 #> [2,]    0    1 Omega <- matrix(c(1,0.3,0.3,0.5,1,-0.3,-0.3,0.8), ncol=2) z <- c(rep(1,N/2),rep(2,N/2)) m <- as.numeric(table(z)) beta <- sapply(z, function(z) rmvnorm(b_true[,z], matrix(Omega[,z],2,2))) ### prior mean vector and precision matrix (inverse of covariance matrix) xi <- c(0,0) Dinv <- diag(2) ### updated class means (in columns) update_b(beta = beta, Omega = Omega, z = z, m = m, xi = xi, Dinv = Dinv) #>            [,1]      [,2] #> [1,]  0.1033711 0.8836673 #> [2,] -0.0073631 0.8993314"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_dp.html","id":null,"dir":"Reference","previous_headings":"","what":"Dirichlet process-based update of latent classes — update_classes_dp","title":"Dirichlet process-based update of latent classes — update_classes_dp","text":"function updates latent classes based Dirichlet process.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_dp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dirichlet process-based update of latent classes — update_classes_dp","text":"","code":"update_classes_dp(   Cmax,   beta,   z,   b,   Omega,   delta,   xi,   D,   nu,   Theta,   s_desc = TRUE )"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_dp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dirichlet process-based update of latent classes — update_classes_dp","text":"Cmax maximum number classes. beta matrix decision-maker specific coefficient vectors dimension P_r x N. Set NA P_r = 0. z vector allocation variables length N. Set NA P_r = 0. b matrix class means columns dimension P_r x C. Set NA P_r = 0. Omega matrix class covariance matrices columns dimension P_r*P_r x C. Set NA P_r = 0. delta numeric concentration parameter vector rep(delta,C) Dirichlet prior s. Per default, delta = 1. case Dirichlet process-based updates latent classes, delta = 0.1 per default. xi mean vector length P_r normal prior b_c. Per default, xi = numeric(P_r). D covariance matrix dimension P_r x P_r normal prior b_c. Per default, D = diag(P_r). nu degrees freedom (natural number greater P_r) Inverse Wishart prior Omega_c. Per default, nu = P_r + 2. Theta scale matrix dimension P_r x P_r Inverse Wishart prior Omega_c. Per default, Theta = diag(P_r). s_desc TRUE, sort classes descending class weight.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_dp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dirichlet process-based update of latent classes — update_classes_dp","text":"list updated values z, b, Omega, s, C.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_dp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dirichlet process-based update of latent classes — update_classes_dp","text":"added.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_dp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dirichlet process-based update of latent classes — update_classes_dp","text":"","code":"set.seed(1) z <- c(rep(1,20),rep(2,30)) b <- matrix(c(1,1,1,-1), ncol=2) Omega <- matrix(c(1,0.3,0.3,0.5,1,-0.3,-0.3,0.8), ncol=2) beta <- sapply(z, function(z) rmvnorm(b[,z], matrix(Omega[,z],2,2))) delta <- 1 xi <- numeric(2) D <- diag(2) nu <- 4 Theta <- diag(2) RprobitB:::update_classes_dp(   Cmax = 10, beta = beta, z = z, b = b, Omega = Omega,   delta = delta, xi = xi, D = D, nu = nu, Theta = Theta ) #> $z #>       [,1] #>  [1,]    2 #>  [2,]    2 #>  [3,]    2 #>  [4,]    2 #>  [5,]    2 #>  [6,]    2 #>  [7,]    1 #>  [8,]    2 #>  [9,]    2 #> [10,]    2 #> [11,]    2 #> [12,]    1 #> [13,]    2 #> [14,]    2 #> [15,]    2 #> [16,]    2 #> [17,]    2 #> [18,]    3 #> [19,]    1 #> [20,]    2 #> [21,]    1 #> [22,]    1 #> [23,]    1 #> [24,]    1 #> [25,]    1 #> [26,]    1 #> [27,]    1 #> [28,]    1 #> [29,]    1 #> [30,]    1 #> [31,]    1 #> [32,]    1 #> [33,]    1 #> [34,]    3 #> [35,]    2 #> [36,]    1 #> [37,]    1 #> [38,]    1 #> [39,]    1 #> [40,]    1 #> [41,]    1 #> [42,]    1 #> [43,]    1 #> [44,]    1 #> [45,]    1 #> [46,]    1 #> [47,]    1 #> [48,]    1 #> [49,]    1 #> [50,]    3 #>  #> $b #>            [,1]     [,2]       [,3] #> [1,]  1.1955613 1.381324 -0.4912123 #> [2,] -0.9791527 1.218404  0.4543349 #>  #> $Omega #>            [,1]      [,2]        [,3] #> [1,]  0.7161232 0.4793177  0.37048920 #> [2,] -0.1869330 0.1085593 -0.03874837 #> [3,] -0.1869330 0.1085593 -0.03874837 #> [4,]  0.5616673 0.2745555  0.37381786 #>  #> $s #> [1] 0.60 0.34 0.06 #>  #> $C #> [1] 3 #>"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_wb.html","id":null,"dir":"Reference","previous_headings":"","what":"Weight-based update of latent classes — update_classes_wb","title":"Weight-based update of latent classes — update_classes_wb","text":"function updates latent classes based class weights.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_wb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weight-based update of latent classes — update_classes_wb","text":"","code":"update_classes_wb(Cmax, epsmin, epsmax, distmin, s, b, Omega)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_wb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weight-based update of latent classes — update_classes_wb","text":"Cmax maximum number classes. epsmin threshold weight (0 1) removing class. epsmax threshold weight (0 1) splitting class. distmin (non-negative) threshold difference class means joining two classes. s vector class weights length C. Set NA P_r = 0. identifiability, vector must non-ascending. b matrix class means columns dimension P_r x C. Set NA P_r = 0. Omega matrix class covariance matrices columns dimension P_r*P_r x C. Set NA P_r = 0.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_wb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weight-based update of latent classes — update_classes_wb","text":"list updated values s, b, Omega.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_wb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weight-based update of latent classes — update_classes_wb","text":"updating scheme bases following rules: remove class \\(c\\), \\(s_c<\\epsilon_{\\text{min}}\\), .e. class weight \\(s_c\\) drops threshold \\(\\epsilon_{\\text{min}}\\). case indicates class \\(c\\) negligible impact mixing distribution. split class \\(c\\) two classes \\(c_1\\) \\(c_2\\), \\(s_c>\\epsilon_\\text{max}\\). case indicates class \\(c\\) high influence mixing distribution whose approximation can potentially improved increasing resolution directions high variance. Therefore, class means \\(b_{c_1}\\) \\(b_{c_2}\\) new classes \\(c_1\\) \\(c_2\\) shifted opposite directions class mean \\(b_c\\) old class \\(c\\) direction highest variance. join two classes \\(c_1\\) \\(c_2\\) one class \\(c\\), \\(\\lVert b_{c_1} - b_{c_2} \\rVert<\\epsilon_{\\text{distmin}}\\), .e. euclidean distance class means \\(b_{c_1}\\) \\(b_{c_2}\\) drops threshold \\(\\epsilon_{\\text{distmin}}\\). case indicates location redundancy repealed. parameters \\(c\\) assigned adding values \\(s\\) \\(c_1\\) \\(c_2\\) averaging values \\(b\\) \\(\\Omega\\). rules executed order, one rule per iteration Cmax exceeded.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_classes_wb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weight-based update of latent classes — update_classes_wb","text":"","code":"### parameter settings s <- c(0.8,0.2) b <- matrix(c(1,1,1,-1), ncol=2) Omega <- matrix(c(0.5,0.3,0.3,0.5,1,-0.1,-0.1,0.8), ncol=2)  ### Remove class 2 RprobitB:::update_classes_wb(Cmax = 10, epsmin = 0.3, epsmax = 0.9, distmin = 1,                              s = s, b = b, Omega = Omega) #> $s #>      [,1] #> [1,]    1 #>  #> $b #>      [,1] #> [1,]    1 #> [2,]    1 #>  #> $Omega #>      [,1] #> [1,]  0.5 #> [2,]  0.3 #> [3,]  0.3 #> [4,]  0.5 #>   ### Split class 1 RprobitB:::update_classes_wb(Cmax = 10, epsmin = 0.1, epsmax = 0.7, distmin = 1,                              s = s, b = b, Omega = Omega) #> $s #>      [,1] [,2] [,3] #> [1,]  0.4  0.4  0.2 #>  #> $b #>      [,1] [,2] [,3] #> [1,] 0.75 1.25    1 #> [2,] 1.00 1.00   -1 #>  #> $Omega #>      [,1] [,2] [,3] #> [1,] 0.25 0.25  1.0 #> [2,] 0.15 0.15 -0.1 #> [3,] 0.15 0.15 -0.1 #> [4,] 0.25 0.25  0.8 #>   ### Join classes RprobitB:::update_classes_wb(Cmax = 10, epsmin = 0.1, epsmax = 0.9, distmin = 3,                              s = s, b = b, Omega = Omega) #> $s #>      [,1] #> [1,]    1 #>  #> $b #>      [,1] #> [1,]    1 #> [2,]    0 #>  #> $Omega #>      [,1] #> [1,] 0.75 #> [2,] 0.10 #> [3,] 0.10 #> [4,] 0.65 #>"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_d.html","id":null,"dir":"Reference","previous_headings":"","what":"Update utility threshold increments — update_d","title":"Update utility threshold increments — update_d","text":"function updates utility threshold increments","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update utility threshold increments — update_d","text":"","code":"update_d(d, y, mu, ll, zeta, Z, Tvec)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update utility threshold increments — update_d","text":"d current vector utility threshold increments. y matrix choices. mu matrix systematic utilities. ll Current log-likelihood value. zeta mean vector normal prior d. Z covariance matrix normal prior d. Tvec element Tvec sufficient_statistics.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update utility threshold increments — update_d","text":"updated value d.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_m.html","id":null,"dir":"Reference","previous_headings":"","what":"Update class sizes — update_m","title":"Update class sizes — update_m","text":"function updates class size vector.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_m.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update class sizes — update_m","text":"","code":"update_m(C, z, nozero)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_m.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update class sizes — update_m","text":"C number (greater equal 1) latent classes decision makers. Set NA P_r = 0. Otherwise, C = 1 per default. z vector allocation variables length N. Set NA P_r = 0. nozero TRUE, element output vector m least one (numerical stability).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_m.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update class sizes — update_m","text":"updated class size vector.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_m.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update class sizes — update_m","text":"","code":"update_m(C = 3, z = c(1,1,1,2,2,3), FALSE) #>      [,1] #> [1,]    3 #> [2,]    2 #> [3,]    1"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Update coefficient vector of multiple linear regression — update_reg","title":"Update coefficient vector of multiple linear regression — update_reg","text":"function updates coefficient vector multiple linear regression.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update coefficient vector of multiple linear regression — update_reg","text":"","code":"update_reg(mu0, Tau0, XSigX, XSigU)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update coefficient vector of multiple linear regression — update_reg","text":"mu0 mean vector normal prior distribution coefficient vector. Tau0 precision matrix (.e. inverted covariance matrix) normal prior distribution coefficient vector. XSigX matrix \\(\\sum_{n=1}^N X_n'\\Sigma^{-1}X_n\\). See details. XSigU vector \\(\\sum_{n=1}^N X_n'\\Sigma^{-1}U_n\\). See details.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_reg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update coefficient vector of multiple linear regression — update_reg","text":"vector, draw normal posterior distribution coefficient vector multiple linear regression.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_reg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update coefficient vector of multiple linear regression — update_reg","text":"function draws posterior distribution \\(\\beta\\) linear utility equation $$U_n = X_n\\beta + \\epsilon_n,$$ \\(U_n\\) (latent, assumed known) utility vector decider \\(n = 1,\\dots,N\\), \\(X_n\\) design matrix build choice characteristics faced \\(n\\), \\(\\beta\\) unknown coefficient vector (can either fixed coefficient vector \\(\\alpha\\) decider-specific coefficient vector \\(\\beta_n\\)), \\(\\epsilon_n\\) error term assumed normally distributed mean \\(0\\) (known) covariance matrix \\(\\Sigma\\). priori assume (conjugate) normal prior distribution $$\\beta \\sim N(\\mu_0,\\Tau_0)$$ mean vector \\(\\mu_0\\) precision matrix (.e. inverted covariance matrix) \\(\\Tau_0\\). posterior distribution \\(\\beta\\) normal covariance matrix $$\\Sigma_1 = (\\Tau_0 + \\sum_{n=1}^N X_n'\\Sigma^{-1}X_n)^{-1}$$ mean vector $$\\mu_1 = \\Sigma_1(\\Tau_0\\mu_0 + \\sum_{n=1}^N X_n'\\Sigma^{-1}U_n)$$. Note analogy \\(\\mu_1\\) generalized least squares estimator $$\\hat{\\beta}_\\text{GLS} = (\\sum_{n=1}^N X_n'\\Sigma^{-1}X_n)^{-1} \\sum_{n=1}^N X_n'\\Sigma^{-1}U_n$$ becomes weighted prior parameters \\(\\mu_0\\) \\(\\Tau_0\\).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_reg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update coefficient vector of multiple linear regression — update_reg","text":"","code":"### true coefficient vector beta_true <- matrix(c(-1,1), ncol=1) ### error term covariance matrix Sigma <- matrix(c(1,0.5,0.2,0.5,1,0.2,0.2,0.2,2), ncol=3) ### draw data N <- 100 X <- replicate(N, matrix(rnorm(6), ncol=2), simplify = FALSE) eps <- replicate(N, rmvnorm(mu = c(0,0,0), Sigma = Sigma), simplify = FALSE) U <- mapply(function(X, eps) X %*% beta_true + eps, X, eps, SIMPLIFY = FALSE) ### prior parameters for coefficient vector mu0 <- c(0,0) Tau0 <- diag(2) ### draw from posterior of coefficient vector XSigX <- Reduce(`+`, lapply(X, function(X) t(X) %*% solve(Sigma) %*% X)) XSigU <- Reduce(`+`, mapply(function(X, U) t(X) %*% solve(Sigma) %*% U, X, U, SIMPLIFY = FALSE)) beta_draws <- replicate(100, update_reg(mu0, Tau0, XSigX, XSigU), simplify = TRUE) rowMeans(beta_draws) #> [1] -1.071996  0.986084"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_s.html","id":null,"dir":"Reference","previous_headings":"","what":"Update class weight vector — update_s","title":"Update class weight vector — update_s","text":"function updates class weight vector drawing posterior distribution.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_s.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update class weight vector — update_s","text":"","code":"update_s(delta, m)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_s.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update class weight vector — update_s","text":"delta numeric concentration parameter vector rep(delta,C) Dirichlet prior s. Per default, delta = 1. case Dirichlet process-based updates latent classes, delta = 0.1 per default. m vector current class frequencies.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_s.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update class weight vector — update_s","text":"vector, draw Dirichlet posterior distribution s.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_s.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update class weight vector — update_s","text":"Let \\(m=(m_1,\\dots,m_C)\\) frequencies \\(C\\) classes. Given class weight (probability) vector \\(s=(s_1,\\dots,s_C)\\), distribution \\(m\\) multinomial likelihood $$L(m\\mid s) \\propto \\prod_{=1}^C s_i^{m_i}.$$ conjugate prior \\(p(s)\\) \\(s\\) Dirichlet distribution, density function proportional $$\\prod_{=1}^C s_i^{\\delta_i-1},$$ \\(\\delta = (\\delta_1,\\dots,\\delta_C)\\) concentration parameter vector. Note RprobitB, \\(\\delta_1=\\dots=\\delta_C\\). restriction necessary class number \\(C\\) can change. posterior distribution \\(s\\) proportional $$p(s) L(m\\mid s) \\propto \\prod_{=1}^C s_i^{\\delta_i + m_i - 1},$$ turn proportional Dirichlet distribution parameters \\(\\delta+m\\).","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_s.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update class weight vector — update_s","text":"","code":"### number of classes C <- 4 ### current class sizes m <- sample.int(C) ### concentration parameter for Dirichlet prior (single-valued) delta <- 1 ### updated class weight vector update_s(delta = 1, m = m) #>           [,1] #> [1,] 0.1839418 #> [2,] 0.1893315 #> [3,] 0.2454951 #> [4,] 0.3812317"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_z.html","id":null,"dir":"Reference","previous_headings":"","what":"Update class allocation vector — update_z","title":"Update class allocation vector — update_z","text":"function updates class allocation vector (independently observations) drawing conditional distribution.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update class allocation vector — update_z","text":"","code":"update_z(s, beta, b, Omega)"},{"path":"https://loelschlaeger.de/RprobitB/reference/update_z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update class allocation vector — update_z","text":"s vector class weights length C. Set NA P_r = 0. identifiability, vector must non-ascending. beta matrix decision-maker specific coefficient vectors dimension P_r x N. Set NA P_r = 0. b matrix class means columns dimension P_r x C. Set NA P_r = 0. Omega matrix class covariance matrices columns dimension P_r*P_r x C. Set NA P_r = 0.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_z.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update class allocation vector — update_z","text":"updated class allocation vector.","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_z.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update class allocation vector — update_z","text":"Let \\(z = (z_1,\\dots,z_N)\\) denote class allocation vector observations (mixed coefficients) \\(\\beta = (\\beta_1,\\dots,\\beta_N)\\). Independently \\(n\\), conditional probability \\(\\Pr(z_n = c \\mid s,\\beta_n,b,\\Omega)\\) \\(\\beta_n\\) allocated class \\(c\\) \\(c=1,\\dots,C\\) depends class allocation vector \\(s\\), class means \\(b=(b_c)_c\\) class covariance matrices \\(Omega=(Omega_c)_c\\) proportional $$s_c \\phi(\\beta_n \\mid b_c,Omega_c).$$","code":""},{"path":"https://loelschlaeger.de/RprobitB/reference/update_z.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update class allocation vector — update_z","text":"","code":"### class weights for C = 2 classes s <- rdirichlet(c(1,1)) ### coefficient vector for N = 1 decider and P_r = 2 random coefficients beta <- matrix(c(1,1), ncol = 1) ### class means and covariances b <- cbind(c(0,0),c(1,1)) Omega <- cbind(c(1,0,0,1),c(1,0,0,1)) ### updated class allocation vector update_z(s = s, beta = beta, b = b, Omega = Omega) #>      [,1] #> [1,]    1"},{"path":[]},{"path":"https://loelschlaeger.de/RprobitB/news/index.html","id":"new-functionality-1-1-0","dir":"Changelog","previous_headings":"","what":"New functionality","title":"RprobitB 1.1.0","text":"Ranked probit models Ordered probit models","code":""},{"path":"https://loelschlaeger.de/RprobitB/news/index.html","id":"updated-functionality-1-1-0","dir":"Changelog","previous_headings":"","what":"Updated functionality","title":"RprobitB 1.1.0","text":"Print method RprobitB_parameter. Splitting data set train test part can now done function train_test(). Consequently, argument test_prob removed prepare_data() simulate_choices(). function simulate_choices() argument distr anymore. Instead, covariates can supplied via covariates argument. Consequently, argument standardize removed well. Simplified specifying utility scale, see help page RprobitB_normalization().","code":""},{"path":"https://loelschlaeger.de/RprobitB/news/index.html","id":"renamed-functions-1-1-0","dir":"Changelog","previous_headings":"","what":"Renamed functions","title":"RprobitB 1.1.0","text":"function compare now called model_selection(). function prepare now called prepare_data(). function simulate now called simulate_choices() mask stats::simulate(). function mcmc now called fit_model(). function choice_probs now called choice_probabilities().","code":""},{"path":"https://loelschlaeger.de/RprobitB/news/index.html","id":"rprobitb-100","dir":"Changelog","previous_headings":"","what":"RprobitB 1.0.0","title":"RprobitB 1.0.0","text":"CRAN release: 2021-11-12 Integrated S3 classes methods. Several new functionalities.","code":""},{"path":"https://loelschlaeger.de/RprobitB/news/index.html","id":"rprobitb-010","dir":"Changelog","previous_headings":"","what":"RprobitB 0.1.0","title":"RprobitB 0.1.0","text":"CRAN release: 2021-05-15 Initial version.","code":""}]
