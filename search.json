[{"path":"https://loelschlaeger.github.io/RprobitB/articles/choice_data.html","id":"characteristics-and-requirements-of-choice-data","dir":"Articles","previous_headings":"","what":"Characteristics and requirements of choice data","title":"Choice data","text":"Choice data basically consists identifier decider optionally choice situation, choices, alternative decider specific covariates. Consequently, RprobitB requests following requirements provided choice data: must class data.frame. must “wide” format, .e. row represents one choice occasion. must contain column unique identifier decision maker. can contain column identifier choice situation decider. information missing, identifier generated automatically appearance choices data set. can contain column observed choices. column required model fitting prediction. must contain columns values alternative specific covariate alternative decider specific covariate.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/articles/choice_data.html","id":"example","dir":"Articles","previous_headings":"Characteristics and requirements of choice data","what":"Example","title":"Choice data","text":"can check Train data set1 fulfills requirements: data frame, row represents one choice occasion, columns id choiceid identify deciders choice occasions, respectively. column choice gives observed choices. see four alternative-specific covariates, namely price, time, change comfort. values given alternative.","code":"data(\"Train\", package = \"mlogit\") str(Train) #> 'data.frame':    2929 obs. of  11 variables: #>  $ id       : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ choiceid : int  1 2 3 4 5 6 7 8 9 10 ... #>  $ choice   : Factor w/ 2 levels \"A\",\"B\": 1 1 1 2 2 2 2 2 1 1 ... #>  $ price_A  : num  2400 2400 2400 4000 2400 4000 2400 2400 4000 2400 ... #>  $ time_A   : num  150 150 115 130 150 115 150 115 115 150 ... #>  $ change_A : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ comfort_A: num  1 1 1 1 1 0 1 1 0 1 ... #>  $ price_B  : num  4000 3200 4000 3200 3200 2400 3200 3200 3200 4000 ... #>  $ time_B   : num  150 130 115 150 150 130 115 150 130 115 ... #>  $ change_B : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ comfort_B: num  1 1 0 0 0 0 1 0 1 0 ..."},{"path":"https://loelschlaeger.github.io/RprobitB/articles/choice_data.html","id":"specify-the-model-formula","dir":"Articles","previous_headings":"","what":"Specify the model formula","title":"Choice data","text":"tell RprobitB covariates want include model via specifying formula object. structure formula object choice ~ | B | C, choice dependent variable (discrete choice aim explain), alternative choice situation specific covariates generic coefficient (call covariates type 1), B choice situation specific covariates alternative specific coefficients (call covariates type 2), C alternative choice situation specific covariates alternative specific coefficients (call covariates type 3). Specifying formula object RprobitB must consistent following rules: default, alternative specific constants (ASCs) added model2. can removed adding + 0 second spot, e.g. choice ~ | B + 0. exclude covariates backmost categories, use either 0, e.g. choice ~ | B | 0 just leave part write choice ~ | B. However, exclude covariates front categories, use 0, e.g. choice ~ 0 | B. include one covariate category, use +, e.g. choice ~ A1 + A2 | B. don’t want include covariates second category want estimate alternative specific constants, add 1 second spot, e.g. choice ~ | 1. expression choice ~ | 0 interpreted covariates second category alternative specific constants. impose random effects specific variables, need define character vector re corresponding variable names. random effects alternative specific constants, include \"ASC\" re.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/articles/choice_data.html","id":"example-1","dir":"Articles","previous_headings":"Specify the model formula","what":"Example","title":"Choice data","text":"specify model formula Train data set. Say want include covariates price, time, comfort change, alternative specific, either type 1 type 3. difference type 1 type 3 former case estimate generic coefficient (.e. coefficient constant across alternatives), whereas latter case estimate alternative specific coefficients. Deciding type 1 type 3 covariates belongs topic model selection, provide separate vignette. now, go type 1 covariates add ASCs: Additionally, specify random effects price time (typically expect heterogeneity ): RprobitB provides function check_form() can used check form re correctly interpreted:","code":"form <- choice ~ price + time + comfort + change | 1 re <- c(\"price\",\"time\") check_form(form = form, re = re) #> choice ~ price + time + comfort + change | 1 #> - dependent variable: choice  #> - type 1 covariate(s): price, time, comfort, change  #> - type 2 covariate(s):   #> - type 3 covariate(s):   #> - random effects: price, time  #> - ASC: TRUE"},{"path":"https://loelschlaeger.github.io/RprobitB/articles/choice_data.html","id":"the-prepare_data-function-in-rprobitb","dir":"Articles","previous_headings":"","what":"The prepare_data() function in RprobitB","title":"Choice data","text":"model estimation RprobitB, empirical choice data set choice_data must go prepare_data() function: function performs compatibility checks data transformations returns object class RprobitB_data can fed estimation routine. following arguments optional: re: character vector variable names form random effects. alternatives: may want consider alternatives choice_data. case, can specify character vector alternatives selected names alternatives. specified, choice set defined observed choices. id: character, name column choice_data contains unique identifier decision maker. default \"id\". idc: character, name column choice_data contains unique identifier choice situation given decision maker. Per default, identifier generated appearance choices data set. standardize: character vector variable names form get standardized. Covariates type 1 3 addressed <covariate>_<alternative>. standardize = \"\", covariates get standardized.","code":"data <- prepare_data(form = form, choice_data = choice_data)"},{"path":"https://loelschlaeger.github.io/RprobitB/articles/choice_data.html","id":"example-2","dir":"Articles","previous_headings":"The prepare_data() function in RprobitB","what":"Example","title":"Choice data","text":"Let’s prepare Train data set estimation previous specification form re: summary function gives overview data:","code":"data <- prepare_data(form = form, choice_data = Train, re = re) summary(data) #> Summary of empirical choice data #>  #> 235 decision makers  #> 5 to 19 choice occasions each  #> 2929 choices in total #>  #> Alternatives #>   frequency #> A      1474 #> B      1455 #>  #> Linear coefficients #>      name    re #> 1 comfort FALSE #> 2  change FALSE #> 3   ASC_A FALSE #> 4   price  TRUE #> 5    time  TRUE"},{"path":"https://loelschlaeger.github.io/RprobitB/articles/choice_data.html","id":"simulate-choice-data-in-rprobitb-using-the-simulate_choices-function","dir":"Articles","previous_headings":"","what":"Simulate choice data in RprobitB using the simulate_choices() function","title":"Choice data","text":"RprobitB provides function simulate_choices simulates discrete choice data. Say want simulate choices N deciders T choice occasions3 among J alternatives model formulation form, call function simulate() following optional arguments: re: character vector variable names form random effects. alternatives: character vector length J names choice alternatives. specified, alternatives labeled first J upper-case letters Roman alphabet. covariates: named list covariate values. element must vector length equal number choice occasions named according covariate. Covariates values specified drawn standard normal distribution. standardize: character vector variable names form get standardized, see . seed: Set seed simulation. can specify true parameter values4 adding values alpha, fixed coefficient vector, C, number (greater equal 1) latent classes decision makers, s, vector class weights, b, matrix class means columns, Omega, matrix class covariance matrices columns, Sigma, differenced error term covariance matrix, Sigma_full, full error term covariance matrix.","code":"data <- simulate(form = form, N = N, T = T, J = J)"},{"path":"https://loelschlaeger.github.io/RprobitB/articles/choice_data.html","id":"example-3","dir":"Articles","previous_headings":"Simulate choice data in RprobitB using the simulate_choices() function","what":"Example","title":"Choice data","text":"illustration, simulate data set N = 100 deciders choosing T = 10 choice occasions among J = 2 alternatives bus car: specify form re follows: Finally, may want specify true parameter values. Parameter values specified get randomly drawn. RprobitB provides function overview_effects() can used get overview effects parameters can specified. , column re contains booleans indicate whether effect connected random effect. Hence, coefficient vector alpha must length 3, first coefficient income_bus second ASC_bus. matrix b must dimension C x 3, default C = 1 row 1 3 correspond cost, time_bus, time_car, respectively. exemplary call simulate_choices() looks like follows, summary() can used get overview data:","code":"N <- 100 T <- 10 J <- 2 alternatives <- c(\"car\", \"bus\") form <- choice ~ cost | income | time re <- c(\"cost\", \"time\") overview_effects(form = form, re = re, alternatives = alternatives) #>         name    re #> 1 income_bus FALSE #> 2    ASC_bus FALSE #> 3       cost  TRUE #> 4   time_bus  TRUE #> 5   time_car  TRUE data <- simulate_choices(   form = choice ~ cost | income | time,   N = 100,   T = 10,   J = 2,   re = c(\"cost\", \"time\"),   alternatives = c(\"car\", \"bus\"),   seed = 1,   alpha = c(-1,1),   C = 2 ) summary(data) #> Summary of simulated choice data #>  #> 100 decision makers  #> 10 choice occasions each  #> 1000 choices in total #>  #> Alternatives #>     frequency #> bus       585 #> car       415 #>  #> Linear coefficients #>         name    re #> 1 income_bus FALSE #> 2    ASC_bus FALSE #> 3       cost  TRUE #> 4   time_bus  TRUE #> 5   time_car  TRUE"},{"path":"https://loelschlaeger.github.io/RprobitB/articles/choice_data.html","id":"train-and-test-data-set","dir":"Articles","previous_headings":"","what":"Train and test data set","title":"Choice data","text":"RprobitB provides function train_test() can used split output prepare_data() simulate_choices() train test subset. useful evaluating prediction performace fitted model. example, following code puts 70% deciders data train subsample 30% deciders test subsample: Alternatively, following code puts 2 randomly chosen choice occasions per decider data test subsample, rest goes train subsample:","code":"train_test(data, test_proportion = 0.3, by = \"N\") #> $train #> Simulated data of 700 choices. #>  #> $test #> Simulated data of 300 choices. train_test(data, test_number = 2, by = \"T\", random = TRUE, seed = 1) #> $train #> Simulated data of 800 choices. #>  #> $test #> Simulated data of 200 choices."},{"path":"https://loelschlaeger.github.io/RprobitB/articles/introduction.html","id":"introdution","dir":"Articles","previous_headings":"","what":"Introdution","title":"Introduction","text":"RprobitB1 can analyze choices made deciders among discrete set alternatives, estimate (latent class) (mixed) (multinomial) probit models Bayesian framework, model heterogeneity approximating underlying mixing distributions mixture normal distributions, identify latent classes decision makers. Run install.packages(\"RprobitB\") R console install latest version RprobitB.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/articles/introduction.html","id":"levels-of-model-complexity","dir":"Articles","previous_headings":"","what":"Levels of model complexity","title":"Introduction","text":"notation (latent class) (mixed) (multinomial) probit model? RprobitB can fit probit models increasing complexity: basic, modelling choice two alternatives (probit model). Considering two alternatives leads multinomial probit model. incorporate random effects, model gets prefix mixed. general model latent class mixed multinomial probit model, approximates mixing distribution mixiture normal distributions.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/articles/introduction.html","id":"outline-of-the-vignettes","dir":"Articles","previous_headings":"","what":"Outline of the vignettes","title":"Introduction","text":"model defined? prepare simulate choice data? fit model?","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/articles/introduction.html","id":"the-model","dir":"Articles","previous_headings":"","what":"The model","title":"Introduction","text":"Assume observe choices \\(N\\) decision makers decide \\(J\\) alternatives \\(T\\) choice occasions.2 Specific decision maker, alternative choice occasion, furthermore observe \\(P_f+P_r\\) choice attributes use explain choices. first \\(P_f\\) attributes connected fixed coefficients, \\(P_r\\) attributes random coefficients following joint distribution mixed across decision makers. Person \\(n\\)’s utility \\(\\tilde{U}_{ntj}\\) alternative \\(j\\) choice occasion \\(t\\) modeled \\[\\begin{equation} \\tilde{U}_{ntj} = \\tilde{W}_{ntj}'\\alpha + \\tilde{X}_{ntj}'\\beta_n + \\tilde{\\epsilon}_{ntj} \\end{equation}\\] \\(n=1,\\dots,N\\), \\(t=1,\\dots,T\\) \\(j=1,\\dots,J\\), \\(\\tilde{W}_{ntj}\\) vector \\(P_f\\) characteristics \\(j\\) faced \\(n\\) \\(t\\) corresponding fixed coefficient vector \\(\\alpha \\{\\mathbb R}^{P_f}\\), \\(\\tilde{X}_{ntj}\\) vector \\(P_r\\) characteristics \\(j\\) faced \\(n\\) \\(t\\) corresponding random, decision maker-specific coefficient vector \\(\\beta_n \\{\\mathbb R}^{P_r}\\), \\(\\beta_n\\) distributed according \\(P_r\\)-variate distribution \\(g_{P_r}\\), \\((\\tilde{\\epsilon}_{nt:}) = (\\tilde{\\epsilon}_{nt1},\\dots,\\tilde{\\epsilon}_{ntJ})' \\sim \\text{MVN}_{J} (0,\\tilde{\\Sigma})\\) models’ error term vector \\(n\\) \\(t\\), probit model assumed multivariate normally distributed zero mean covariance matrix \\(\\tilde{\\Sigma}\\).","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/articles/introduction.html","id":"normalization","dir":"Articles","previous_headings":"The model","what":"Normalization","title":"Introduction","text":"well known, utility model needs normalized respect level scale order identified. Therefore, consider transformed model \\[\\begin{equation} U_{ntj} = W_{ntj}'\\alpha + X_{ntj}'\\beta_n + \\epsilon_{ntj}, \\end{equation}\\] \\(n=1,\\dots,N\\), \\(t=1,\\dots,T\\) \\(j=1,\\dots,J-1\\), (choosing \\(J\\) reference alternative) \\(U_{ntj}=\\tilde{U}_{ntj} - \\tilde{U}_{ntJ}\\), \\(W_{ntj}=\\tilde{W}_{ntj}-\\tilde{W}_{ntJ}\\), \\(X_{ntj}=\\tilde{X}_{ntj}-\\tilde{X}_{ntJ}\\) \\(\\epsilon_{ntj}=\\tilde{\\epsilon}_{ntj}-\\tilde{\\epsilon}_{ntJ}\\), \\((\\epsilon_{nt:}) = (\\epsilon_{nt1},...,\\epsilon_{nt(J-1)})' \\sim \\text{MVN}_{J-1} (0,\\Sigma)\\) \\(\\Sigma\\) denotes covariance matrix top-left element restricted one.3","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/articles/introduction.html","id":"linking-the-latent-utility-to-the-choices","dir":"Articles","previous_headings":"The model","what":"Linking the latent utility to the choices","title":"Introduction","text":"Let \\(y_{nt}=j\\) denote event decision maker \\(n\\) chooses alternative \\(j\\) choice occasion \\(t\\). Assuming utility maximizing behavior decision makers, decisions linked utilities via \\[\\begin{equation} y_{nt} = \\sum_{j=1}^{J-1} j\\cdot 1 \\left (U_{ntj}=\\max_i U_{nti}>0 \\right) + J \\cdot 1\\left (U_{ntj}<0 ~\\text{}~j\\right),  \\end{equation}\\] \\(1()\\) equals \\(1\\) condition \\(\\) true \\(0\\) else.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/articles/introduction.html","id":"approximating-the-mixing-distribution","dir":"Articles","previous_headings":"The model","what":"Approximating the mixing distribution","title":"Introduction","text":"approximate mixing distribution \\(g_{P_r}\\) random coefficients4 \\(\\beta=(\\beta_n)_{n}\\) mixture \\(P_r\\)-variate normal densities \\(\\phi_{P_r}\\) mean vectors \\(b=(b_c)_{c}\\) covariance matrices \\(\\Omega=(\\Omega_c)_{c}\\) using \\(C\\) components, .e. \\[\\begin{equation} \\beta_n\\mid b,\\Omega \\sim \\sum_{c=1}^{C} s_c \\phi_{P_r} (\\cdot \\mid b_c,\\Omega_c), \\end{equation}\\] \\((s_c)_{c}\\) weights satisfying \\(0 < s_c\\leq 1\\) \\(c=1,\\dots,C\\) \\(\\sum_c s_c=1\\).","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/articles/introduction.html","id":"interpreting-the-latent-classes","dir":"Articles","previous_headings":"The model","what":"Interpreting the latent classes","title":"Introduction","text":"One interpretation latent class model obtained introducing variables \\(z=(z_n)_n\\) allocating decision maker \\(n\\) class \\(c\\) probability \\(s_c\\), .e. \\[\\begin{equation} \\text{Prob}(z_n=c)=s_c \\quad \\text{} \\quad \\beta_n \\mid z,b,\\Omega \\sim \\phi_{P_r}(\\cdot \\mid b_{z_n},\\Omega_{z_n}). \\end{equation}\\] call model latent class mixed multinomial probit model.5","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/articles/model_fitting.html","id":"prior-settings","dir":"Articles","previous_headings":"","what":"Prior settings","title":"Model fitting","text":"Bayesian analysis enables impose prior beliefs model parameters. possible either express strong prior knowledge using informative prior distributions express vague knowledge using diffuse prior distributions. RprobitB applies following conjugate priors: \\((s_1,\\dots,s_C)\\sim D_C(\\delta)\\), \\(D_C(\\delta)\\) denotes \\(C\\)-dimensional Dirichlet distribution concentration parameter vector \\(\\delta = (\\delta_1,\\dots,\\delta_C)\\), \\(\\alpha\\sim \\text{MVN}{P_f}(\\psi,\\Psi)\\), \\(b_c \\sim \\text{MVN}{P_r}(\\xi,\\Xi)\\), independent \\(c\\), \\(\\Omega_c \\sim W^{-1}_{P_r}(\\nu,\\Theta)\\), independent \\(c\\), \\(W^{-1}_{P_r}(\\nu,\\Theta)\\) denotes \\(P_r\\)-dimensional inverse Wishart distribution \\(\\nu\\) degrees freedom scale matrix \\(\\Theta\\), \\(\\Sigma \\sim W^{-1}_{J-1}(\\kappa,\\Lambda)\\). Per default, RprobitB applies diffuse prior approach, setting \\(\\delta_1=\\dots=\\delta_C=1\\); \\(\\psi\\) \\(\\xi\\) equal zero vector; \\(\\Psi\\) \\(\\Xi\\) equal identity matrix; \\(\\nu\\) \\(\\kappa\\) equal \\(P_r+2\\) \\(J+1\\), respectively (obtain proper priors); \\(\\Theta\\) \\(\\Lambda\\) equal identity matrix. Alternatively, parameters can chosen based estimation results similar choice settings, resulting informative priors.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/articles/model_fitting.html","id":"bayes-estimation-of-the-probit-model-via-gibbs-sampling","dir":"Articles","previous_headings":"","what":"Bayes estimation of the probit model via Gibbs sampling","title":"Model fitting","text":"Bayesian analysis (latent class) (mixed) (multinomial) probit model builds upon work (McCulloch Rossi 1994), (Nobile 1998), (Allenby Rossi 1998), (Imai Dyk 2005). key ingredient concept data augmentation, cf. (Albert Chib 1993), treats latent utilities parameters . Conditional latent utilities, multinomial probit model constitutes standard Bayesian linear regression set-, renders drawing posterior distribution feasible without need evaluate likelihood. Gibbs sampling joint posterior distribution latent class mixed multinomial probit model proceeds iteratively drawing updating model parameter conditional parameters. class weights drawn Dirichlet distribution \\[\\begin{equation} (s_1,\\dots,s_C)\\mid \\delta,z \\sim D_C(\\delta_1+m_1,\\dots,\\delta_C+m_C), \\end{equation}\\] \\(c=1,\\dots,C\\), \\(m_c=\\#\\{n:z_n=c\\}\\) denotes current absolute class size. Mind model invariant permutations class labels \\(1,\\dots,C\\). reason, accept update ordering \\(s_1<\\dots<s_C\\) holds, thereby ensuring unique labeling classes. Independently \\(n\\), update allocation variables \\((z_n)_n\\) conditional distribution \\[\\begin{equation} \\text{Prob}(z_n=c\\mid s,\\beta,b,\\Omega )=\\frac{s_c\\phi_{P_r}(\\beta_n\\mid b_c,\\Omega_c)}{\\sum_c s_c\\phi_{P_r}(\\beta_n\\mid b_c,\\Omega_c)}. \\end{equation}\\] class means \\((b_c)_c\\) updated independently \\(c\\) via \\[\\begin{equation} b_c\\mid \\Xi,\\Omega,\\xi,z,\\beta \\sim\\text{MVN}{P_r}\\left( \\mu_{b_c}, \\Sigma_{b_c}  \\right), \\end{equation}\\] \\(\\mu_{b_c}=(\\Xi^{-1}+m_c\\Omega_c^{-1})^{-1}(\\Xi^{-1}\\xi +m_c\\Omega_c^{-1}\\bar{b}_c)\\), \\(\\Sigma_{b_c}=(\\Xi^{-1}+m_c\\Omega_c^{-1})^{-1}\\), \\(\\bar{b}_c=m_c^{-1}\\sum_{n:z_n=c} \\beta_n\\). class covariance matrices \\((\\Omega_c)_c\\) updated independently \\(c\\) via \\[\\begin{equation} \\Omega_c \\mid \\nu,\\Theta,z,\\beta,b \\sim W^{-1}_{P_r}(\\mu_{\\Omega_c},\\Sigma_{\\Omega_c}), \\end{equation}\\] \\(\\mu_{\\Omega_c}=\\nu+m_c\\) \\(\\Sigma_{\\Omega_c}=\\Theta^{-1} + \\sum_{n:z_n=c} (\\beta_n-b_c)(\\beta_n-b_c)'\\). Independently \\(n\\) \\(t\\) conditionally components, utility vectors \\((U_{nt:})\\) follow \\(J-1\\)-dimensional truncated multivariate normal distribution, truncation points determined choices \\(y_{nt}\\). sample truncated multivariate normal distribution, apply sub-Gibbs sampler, following approach : \\[\\begin{equation} U_{ntj} \\mid U_{nt(-j)},y_{nt},\\Sigma,W,\\alpha,X,\\beta  \\sim \\mathcal{N}(\\mu_{U_{ntj}},\\Sigma_{U_{ntj}}) \\cdot \\begin{cases} 1(U_{ntj}>\\max(U_{nt(-j)},0) ) & \\text{}~ y_{nt}=j\\\\ 1(U_{ntj}<\\max(U_{nt(-j)},0) ) & \\text{}~ y_{nt}\\neq j \\end{cases}, \\end{equation}\\] \\(U_{nt(-j)}\\) denotes vector \\((U_{nt:})\\) without element \\(U_{ntj}\\), \\(\\mathcal{N}\\) denotes univariate normal distribution, \\(\\Sigma_{U_{ntj}} = 1/(\\Sigma^{-1})_{jj}\\) \\[\\begin{equation} \\mu_{U_{ntj}} = W_{ntj}'\\alpha + X_{ntj}'\\beta_n - \\Sigma_{U_{ntj}} (\\Sigma^{-1})_{j(-j)}   (U_{nt(-j)} - W_{nt(-j)}'\\alpha - X_{nt(-j)}' \\beta_n ), \\end{equation}\\] \\((\\Sigma^{-1})_{jj}\\) denotes \\((j,j)\\)th element \\(\\Sigma^{-1}\\), \\((\\Sigma^{-1})_{j(-j)}\\) \\(j\\)th row without \\(j\\)th entry, \\(W_{nt(-j)}\\) \\(X_{nt(-j)}\\) coefficient matrices \\(W_{nt}\\) \\(X_{nt}\\), respectively, without \\(j\\)th column. Updating fixed coefficient vector \\(\\alpha\\) achieved applying formula Bayesian linear regression regressors \\(W_{nt}\\) regressands \\((U_{nt:})-X_{nt}'\\beta_n\\), .e. \\[\\begin{equation} \\alpha \\mid \\Psi,\\psi,W,\\Sigma,U,X,\\beta \\sim \\text{MVN}{P_f}(\\mu_\\alpha,\\Sigma_\\alpha), \\end{equation}\\] \\(\\mu_\\alpha = \\Sigma_\\alpha (\\Psi^{-1}\\psi + \\sum_{n=1,t=1}^{N,T} W_{nt} \\Sigma^{-1} ((U_{nt:})-X_{nt}'\\beta_n) )\\) \\(\\Sigma_\\alpha = (\\Psi^{-1} + \\sum_{n=1,t=1}^{N,T} W_{nt}\\Sigma^{-1} W_{nt}^{'} )^{-1}\\). Analogously \\(\\alpha\\), random coefficients \\((\\beta_n)_n\\) updated independently via \\[\\begin{equation} \\beta_n \\mid \\Omega,b,X,\\Sigma,U,W,\\alpha \\sim \\text{MVN}{P_r}(\\mu_{\\beta_n},\\Sigma_{\\beta_n}), \\end{equation}\\] \\(\\mu_{\\beta_n} = \\Sigma_{\\beta_n} (\\Omega_{z_n}^{-1}b_{z_n} + \\sum_{t=1}^{T} X_{nt} \\Sigma^{-1} (U_{nt}-W_{nt}'\\alpha) )\\) \\(\\Sigma_{\\beta_n} = (\\Omega_{z_n}^{-1} + \\sum_{t=1}^{T} X_{nt}\\Sigma^{-1} X_{nt}^{'} )^{-1}\\) . error term covariance matrix \\(\\Sigma\\) updated means \\[\\begin{equation} \\Sigma \\mid \\kappa,\\Lambda,U,W,\\alpha,X,\\beta \\sim W^{-1}_{J-1}(\\kappa+NT,\\Lambda+S), \\\\ \\end{equation}\\] \\(S = \\sum_{n=1,t=1}^{N,T} \\varepsilon_{nt} \\varepsilon_{nt}'\\) \\(\\varepsilon_{nt} = (U_{nt:}) - W_{nt}'\\alpha - X_{nt}'\\beta_n\\).","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/articles/model_fitting.html","id":"parameter-normalization","dir":"Articles","previous_headings":"","what":"Parameter normalization","title":"Model fitting","text":"Samples obtained scheme described still lack identification (see introductory vignette). Therefore, subsequent sampling, normalizations \\(\\alpha^{()}/\\sqrt{(\\Sigma^{()})_{11}}\\), \\(b_c^{()}/\\sqrt{(\\Sigma^{()})_{11}}\\), \\(\\Omega_c^{()}/(\\Sigma^{()})_{11}\\), \\(c=1,\\dots,C\\) \\(\\Sigma^{()}/(\\Sigma^{()})_{11}\\) required \\(\\)th updates iterations \\(\\), cf. (Imai Dyk 2005), \\((\\Sigma^{()})_{11}\\) denotes top-left element \\(\\Sigma^{()}\\). draws \\(s\\) \\(z\\) need normalized. draws \\(U\\) \\(\\beta\\) normalized results interest analysis. Alternatively, samples can normalized variance \\(\\Sigma\\) element \\(\\alpha\\) equals fixed non-negative value. normalization fitted model can changed afterwards via model output mcmc() scale named list three elements, determining parameter normalization, described .","code":"model = transform(model = model, scale = scale)"},{"path":"https://loelschlaeger.github.io/RprobitB/articles/model_fitting.html","id":"burning-and-thinning","dir":"Articles","previous_headings":"","what":"Burning and thinning","title":"Model fitting","text":"theory behind Gibbs sampling constitutes sequence samples produced updating scheme can considered Markov chain stationary distribution equal desired joint posterior distribution. takes certain number iterations stationary distribution approximated reasonably well. Therefore, common practice discard first \\(B\\) \\(R\\) samples (-called burn-period). Furthermore, correlation nearby samples expected. order obtain independent samples, consider every \\(Q\\)th sample averaging values compute parameter statistics like expectation standard deviation. Adequate values \\(R\\), \\(B\\) \\(Q\\) depend complexity considered Bayesian framework. Per default, RprobitB sets R = 1e4, B = R/2 Q = 10. independence samples can verified computing serial correlation convergence Gibbs sampler can checked considering trace plots.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/articles/model_fitting.html","id":"updating-the-number-of-latent-classes","dir":"Articles","previous_headings":"","what":"Updating the number of latent classes","title":"Model fitting","text":"Updating number \\(C\\) latent classes done within Gibbs sampler executing following weight-based updating scheme within second half burn-period2: remove class \\(c\\), \\(s_c<\\varepsilon_{\\text{min}}\\), .e. class weight \\(s_c\\) drops threshold \\(\\varepsilon_{\\text{min}}\\). case indicates class \\(c\\) negligible impact mixing distribution. split class \\(c\\) two classes \\(c_1\\) \\(c_2\\), \\(s_c>\\varepsilon_\\text{max}\\). case indicates class \\(c\\) high influence mixing distribution whose approximation can potentially improved increasing resolution directions high variance. Therefore, class means \\(b_{c_1}\\) \\(b_{c_2}\\) new classes \\(c_1\\) \\(c_2\\) shifted opposite directions class mean \\(b_c\\) old class \\(c\\) direction highest variance. join two classes \\(c_1\\) \\(c_2\\) one class \\(c\\), \\(\\lVert b_{c_1} - b_{c_2} \\rVert<\\varepsilon_{\\text{distmin}}\\), .e. euclidean distance class means \\(b_{c_1}\\) \\(b_{c_2}\\) drops threshold \\(\\varepsilon_{\\text{distmin}}\\). case indicates location redundancy repealed. parameters \\(c\\) assigned adding values \\(s\\) \\(c_1\\) \\(c_2\\) averaging values \\(b\\) \\(\\Omega\\). rules contain choices values \\(\\varepsilon_{\\text{min}}\\), \\(\\varepsilon_{\\text{max}}\\) \\(\\varepsilon_{\\text{distmin}}\\). adequate value \\(\\varepsilon_{\\text{distmin}}\\) depends scale parameters. Per default, RprobitB sets epsmin = 0.01, epsmax = 0.99, distmin = 0.1.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/articles/model_fitting.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Model fitting","text":"","code":"### probit model p = simulate(form = choice ~ var | 0, N = 100, T = 10, J = 2) m1 = mcmc(data = p) ### multinomial probit model mnp = simulate(form = choice ~ var | 0, N = 100, T = 10, J = 3) m2 = mcmc(data = mnp) ### mixed multinomial probit model mmnp = simulate(form = choice ~ 0 | var, N = 100, T = 10, J = 3, re = \"var\") m3 = mcmc(data = mmnp) ### latent classes mixed multinomial probit model lcmmnp = simulate(form = choice ~ 0 | var, N = 100, T = 10, J = 3, re = \"var\",                   parm = list(\"C\" = 2)) m4 = mcmc(data = lcmmnp, latent_classes = list(\"C\" = 2)) ### update of latent classes m5 = mcmc(data = lcmmnp, latent_classes = list(\"update\" = TRUE))"},{"path":"https://loelschlaeger.github.io/RprobitB/articles/model_fitting.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model fitting","text":"Albert, James H., Siddhartha Chib. 1993. “Bayesian Analysis Binary Polychotomous Response Data.” Journal American Statistical Association 88. Allenby, Greg M., Peter Rossi. 1998. “Marketing Models Consumer Heterogeneity.” Journal Econometrics 89. Imai, Kosuke, David . van Dyk. 2005. “Bayesian Analysis Multinomial Probit Model Using Marginal Data Augmentation.” Journal Econometrics 124. McCulloch, Robert, Peter Rossi. 1994. “Exact Likelihood Analysis Multinomial Probit Model.” Journal Econometrics 64. Nobile, Agostino. 1998. “Hybrid Markov Chain Bayesian Analysis Multinomial Probit Model.” Statistics Computing 8.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/articles/model_selection.html","id":"model-selection-with-the-model_selection-function","dir":"Articles","previous_headings":"","what":"Model selection with the model_selection() function","title":"Model selection","text":"RprobitB provides function called model_selection() guides process model selection. input function takes arbitrary number RprobitB_model objects. illustration, fit three different models increasing complexity Train dataset mlogit package. model_selection() function returns following information: output explained detail .","code":"data(\"Train\", package = \"mlogit\")  ### Using only the alternative's price as covariate d1 <- prepare_data(   form = choice ~ price,   choice_data = Train ) m1 <- mcmc(d1, print_progress = FALSE)  ### Using all available covariates d2 <- prepare_data(   form = choice ~ price | 0 | time + comfort + change,   choice_data = Train ) m2 <- mcmc(d2, print_progress = FALSE)  ### We additionally impose a mixing distribution on the price coefficient d3 <- prepare_data(   form = choice ~ price | 0 | time + comfort + change,   choice_data = Train,    re = \"price\" ) m3 <- mcmc(d3, print_progress = FALSE) model_selection(m1, m2, m3)"},{"path":[]},{"path":"https://loelschlaeger.github.io/RprobitB/articles/model_selection.html","id":"npar","dir":"Articles","previous_headings":"Information criteria","what":"npar","title":"Model selection","text":"Simply number estimated model parameters.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/articles/model_selection.html","id":"ll","dir":"Articles","previous_headings":"Information criteria","what":"LL","title":"Model selection","text":"model’s log-likelihood value estimated parameters.","code":""},{"path":[]},{"path":[]},{"path":"https://loelschlaeger.github.io/RprobitB/articles/model_selection.html","id":"waic","dir":"Articles","previous_headings":"Information criteria","what":"WAIC","title":"Model selection","text":"WAIC short Widely Applicable Information Criterion. smaller value better model. definition \\[\\text{WAIC} = -2 ( \\text{lppd} - p_\\text{WAIC} ),\\] \\(\\text{lppd}\\) log-pointwise-predictive-density \\(p_\\text{WAIC}\\) penalty term sometimes called effective number parameters. \\(\\text{lppd}\\) computed follows. Let \\(p_{} = \\Pr(y_i\\mid \\theta_s)\\) probability observation \\(y_i\\) given \\(s\\)-th set sampled parameter values posterior distribution \\(\\theta_s\\). \\[\\text{lppd} = \\sum_i \\log S^{-1} \\sum_s p_{si}.\\] penalty term computed sum variances log-probability observation: \\[p_\\text{WAIC} = \\sum_i \\text{var}_{\\theta} \\log p_{si}. \\] Note individual observation penalty term \\(p_\\text{WAIC}\\), provides interesting opportunity study different observations contribute overfitting.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://loelschlaeger.github.io/RprobitB/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lennart Oelschläger. Author, maintainer. Dietmar Bauer. Author. Sebastian Büscher. Contributor. Manuel Batram. Contributor.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"OelschlÃ¤ger L, Bauer D (2021). RprobitB: Bayes Estimation Latent Class Mixed Multinomial Probit Models. R package version 1.0.0.9000.","code":"@Manual{,   title = {RprobitB: Bayes Estimation of Latent Class Mixed Multinomial Probit Models},   author = {Lennart Oelschläger and Dietmar Bauer},   year = {2021},   note = {R package version 1.0.0.9000}, }"},{"path":"https://loelschlaeger.github.io/RprobitB/index.html","id":"rprobitb-","dir":"","previous_headings":"","what":"Fit mixed probit models to choice data","title":"Fit mixed probit models to choice data","text":"goal RprobitB fit mixed probit models choice data. package differs comparable packages two ways: Bayesian estimation focus taste heterogeneity.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fit mixed probit models to choice data","text":"can install released version RprobitB CRAN : development version GitHub :","code":"install.packages(\"RprobitB\") # install.packages(\"devtools\") devtools::install_github(\"loelschlaeger/RprobitB\")"},{"path":"https://loelschlaeger.github.io/RprobitB/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Fit mixed probit models to choice data","text":"package documented several vignettes:","code":"browseVignettes(\"RprobitB\")"},{"path":"https://loelschlaeger.github.io/RprobitB/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Fit mixed probit models to choice data","text":"basic example show fit mixed probit model make choice predictions: First, load package. , prepare choice data, example Train dataset mlogit package. , put 30 percent data aside later --sample prediction. Call mcmc function estimate model. summary method gives overview estimates. Let’s visualize estimated mixture distribution price coefficient.  predict function makes choice predictions compares prediction actual choices.","code":"library(RprobitB) #> Thanks for using RprobitB 1.0.0.9000, happy choice modeling! #> See https://loelschlaeger.github.io/RprobitB for help. #> Type 'citation(\"RprobitB\")' for citing this R package. data(\"Train\", package = \"mlogit\") data = prepare_data(   form = choice ~ price | 0 | time + comfort + change,   choice_data = Train,   re = \"price\",   standardize = \"all\",   test_prop = 0.3) model = mcmc(data$train) #> Iteration Info                   ETA (min) #>         0 started Gibbs sampling           #>      1000                                2 #>      2000                                2 #>      3000                                2 #>      4000                                2 #>      5000                                1 #>      6000                                1 #>      7000                                1 #>      8000                                1 #>      9000                                1 #>     10000 done, total time: 2 min summary(model) #> Probit model 'choice ~ price | 0 | time + comfort + change'. #>  #> MCMC settings: #> - R: 10000  #> - B: 5000  #> - Q: 1  #>  #> Normalization: #> - Level: Utility differences with respect to alternative 2. #> - Scale: Coefficient of the 1. error term variance in Sigma fixed to 1. #>  #> Legend of alternatives: #>   name #> 1    A #> 2    B #>  #> Legend of linear coefficients: #>        name    re #> 1    time_A FALSE #> 2    time_B FALSE #> 3 comfort_A FALSE #> 4 comfort_B FALSE #> 5  change_A FALSE #> 6  change_B FALSE #> 7     price  TRUE #>  #> Latent classes: 1  #> - Update: FALSE  #>  #> Parameter statistics: #>           mean      sd      R^ #>  alpha #>                                #>      1   -0.85    0.08    1.04 #>      2   -0.87    0.08    1.04 #>      3   -0.52    0.05    1.03 #>      4   -0.50    0.05    1.04 #>      5   -0.27    0.04    1.02 #>      6   -0.23    0.05    1.02 #>  #>  s #>                                #>      1    1.00    0.00     NaN #>  #>  b #>                                #>    1.1   -2.24    0.27    1.11 #>  #>  Omega #>                                #>  1.1,1    3.32    0.93    1.02 #>  #>  Sigma #>                                #>    1,1    1.00    0.00    1.00 plot(model, type = \"mixture\") predict_choices(model, data$test) #>     predicted #> true   A   B #>    A 306 128 #>    B 147 309"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/check_form.html","id":null,"dir":"Reference","previous_headings":"","what":"Check form. — check_form","title":"Check form. — check_form","text":"function checks input form.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/check_form.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check form. — check_form","text":"","code":"check_form(form, re = NULL)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/check_form.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check form. — check_form","text":"form formula object used specify probit model. structure choice ~ | B | C, names alternative choice situation specific covariates generic coefficient, B names choice situation specific covariates alternative specific coefficients, C names alternative choice situation specific covariates alternative specific coefficients. Separate multiple covariates one type + sign. default, alternative specific constants (ASCs) added model (except last alternative). can removed adding +0 second spot. See vignette vignette(\"data_management\", package = \"RprobitB\") details. re character (vector) covariates form random effects. re = NULL (default), random effects. random effects alternative specific constants, include \"ASC\" re.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/check_form.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check form. — check_form","text":"object class RprobitB_formula, list contains following elements: form: input form. choice: dependent variable form. re: input re, covariates part form removed. vars: list three character vectors covariate names three covariate types. ASC: boolean, determining whether model ASCs.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/check_form.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check form. — check_form","text":"","code":"form <- choice ~ price + time + comfort + change | 1 re <- re <- c(\"price\",\"time\") check_form(form = form, re = re) #> choice ~ price + time + comfort + change | 1 #> <environment: 0x000000002b292a20> #> - dependent variable: choice  #> - type 1 covariate(s): price, time, comfort, change  #> - type 2 covariate(s):   #> - type 3 covariate(s):   #> - random effects: price, time  #> - ASC: TRUE"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/check_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Check prior. — check_prior","title":"Check prior. — check_prior","text":"function checks input prior sets missing values default values.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/check_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check prior. — check_prior","text":"","code":"check_prior(prior, P_f, P_r, J)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/check_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check prior. — check_prior","text":"prior named list parameters prior distributions normalized parameters: eta: mean vector length P_f normal prior alpha. Psi: covariance matrix dimension P_f x P_f normal prior alpha. delta: concentration parameter length 1 Dirichlet prior s. xi: mean vector length P_r normal prior b_c. D: covariance matrix dimension P_r x P_r normal prior b_c. nu: degrees freedom (natural number greater P_r) Inverse Wishart prior Omega_c. Theta: scale matrix dimension P_r x P_r Inverse Wishart prior Omega_c. kappa: degrees freedom (natural number greater J-1) Inverse Wishart prior Sigma. E: scale matrix dimension J-1 x J-1 Inverse Wishart prior Sigma. P_f number covariates connected fixed coefficient (can 0). P_r number covariates connected random coefficient (can 0). J number (greater equal 2) choice alternatives.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/check_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check prior. — check_prior","text":"checked input prior","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/choice_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Return choice probabilities of an RprobitB_model. — choice_probabilities","title":"Return choice probabilities of an RprobitB_model. — choice_probabilities","text":"function returns choice probabilities RprobitB_model.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/choice_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return choice probabilities of an RprobitB_model. — choice_probabilities","text":"","code":"choice_probabilities(x, data = NULL, at_true = FALSE)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/choice_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return choice probabilities of an RprobitB_model. — choice_probabilities","text":"x object class RprobitB_model. data Either NULL object class RprobitB_data. former case, choice probabilities computed data used model fitting. Alternatively, new data set can provided. at_true TRUE, choice probabilities computed true parameter values (available).","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/choice_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return choice probabilities of an RprobitB_model. — choice_probabilities","text":"data frame choice probabilities choice situations rows alternatives columns. first two columns decider identifier \"id\" choice situation identifier \"idc\".","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/choice_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return choice probabilities of an RprobitB_model. — choice_probabilities","text":"","code":"data <- simulate_choices(form = choice ~ covariate, N = 10, T = 10, J = 2) x <- mcmc(data) #> Iteration Info                   ETA (min) #>         0 started Gibbs sampling           #>      1000                                0 #>      2000                                0 #>      3000                                0 #>      4000                                1 #>      5000                                1 #>      6000                                1 #>      7000                                1 #>      8000                                1 #>      9000                                1 #>     10000 done, total time: 1 min choice_probabilities(x) #>     id idc            A            B #> 1    1   1 2.165487e-01 7.834513e-01 #> 2    1   2 1.000000e+00 4.911624e-09 #> 3    1   3 1.040871e-01 8.959129e-01 #> 4    1   4 1.701394e-03 9.982986e-01 #> 5    1   5 9.659810e-01 3.401895e-02 #> 6    1   6 4.525833e-03 9.954742e-01 #> 7    1   7 1.555443e-09 1.000000e+00 #> 8    1   8 1.195134e-01 8.804866e-01 #> 9    1   9 1.686435e-08 1.000000e+00 #> 10   1  10 1.893232e-04 9.998107e-01 #> 11   2   1 6.959709e-02 9.304029e-01 #> 12   2   2 9.232097e-01 7.679031e-02 #> 13   2   3 1.252715e-01 8.747285e-01 #> 14   2   4 2.025623e-01 7.974377e-01 #> 15   2   5 1.636568e-02 9.836343e-01 #> 16   2   6 4.996541e-02 9.500346e-01 #> 17   2   7 6.108796e-02 9.389120e-01 #> 18   2   8 4.443410e-01 5.556590e-01 #> 19   2   9 2.197699e-01 7.802301e-01 #> 20   2  10 3.316534e-05 9.999668e-01 #> 21   3   1 4.141612e-01 5.858388e-01 #> 22   3   2 9.041813e-10 1.000000e+00 #> 23   3   3 4.657270e-02 9.534273e-01 #> 24   3   4 4.132524e-01 5.867476e-01 #> 25   3   5 2.770684e-02 9.722932e-01 #> 26   3   6 3.448163e-01 6.551837e-01 #> 27   3   7 5.105344e-13 1.000000e+00 #> 28   3   8 2.040809e-01 7.959191e-01 #> 29   3   9 3.056329e-01 6.943671e-01 #> 30   3  10 3.465685e-08 1.000000e+00 #> 31   4   1 3.502343e-03 9.964977e-01 #> 32   4   2 1.239070e-03 9.987609e-01 #> 33   4   3 2.387124e-01 7.612876e-01 #> 34   4   4 3.478868e-01 6.521132e-01 #> 35   4   5 9.902762e-01 9.723793e-03 #> 36   4   6 3.934518e-01 6.065482e-01 #> 37   4   7 2.291298e-01 7.708702e-01 #> 38   4   8 1.691593e-01 8.308407e-01 #> 39   4   9 7.199056e-01 2.800944e-01 #> 40   4  10 9.275147e-01 7.248534e-02 #> 41   5   1 9.611067e-01 3.889328e-02 #> 42   5   2 6.678649e-02 9.332135e-01 #> 43   5   3 3.997760e-01 6.002240e-01 #> 44   5   4 9.499397e-01 5.006029e-02 #> 45   5   5 1.637917e-01 8.362083e-01 #> 46   5   6 5.720832e-10 1.000000e+00 #> 47   5   7 2.254018e-02 9.774598e-01 #> 48   5   8 6.584742e-01 3.415258e-01 #> 49   5   9 6.358577e-02 9.364142e-01 #> 50   5  10 2.285764e-01 7.714236e-01 #> 51   6   1 3.608730e-01 6.391270e-01 #> 52   6   2 8.944264e-01 1.055736e-01 #> 53   6   3 3.278474e-01 6.721526e-01 #> 54   6   4 2.011666e-03 9.979883e-01 #> 55   6   5 2.787627e-01 7.212373e-01 #> 56   6   6 2.001514e-01 7.998486e-01 #> 57   6   7 2.361862e-01 7.638138e-01 #> 58   6   8 1.177899e-06 9.999988e-01 #> 59   6   9 9.073120e-03 9.909269e-01 #> 60   6  10 9.704064e-02 9.029594e-01 #> 61   7   1 2.670435e-01 7.329565e-01 #> 62   7   2 1.663144e-01 8.336856e-01 #> 63   7   3 6.233676e-03 9.937663e-01 #> 64   7   4 7.652995e-01 2.347005e-01 #> 65   7   5 1.047259e-02 9.895274e-01 #> 66   7   6 8.685823e-01 1.314177e-01 #> 67   7   7 7.556816e-01 2.443184e-01 #> 68   7   8 3.072737e-03 9.969273e-01 #> 69   7   9 3.464851e-01 6.535149e-01 #> 70   7  10 4.942788e-01 5.057212e-01 #> 71   8   1 4.150094e-02 9.584991e-01 #> 72   8   2 1.549015e-02 9.845099e-01 #> 73   8   3 5.539745e-04 9.994460e-01 #> 74   8   4 9.424548e-09 1.000000e+00 #> 75   8   5 9.925987e-01 7.401282e-03 #> 76   8   6 3.492285e-01 6.507715e-01 #> 77   8   7 1.745637e-01 8.254363e-01 #> 78   8   8 6.731390e-06 9.999933e-01 #> 79   8   9 7.908120e-01 2.091880e-01 #> 80   8  10 2.013645e-01 7.986355e-01 #> 81   9   1 7.753039e-01 2.246961e-01 #> 82   9   2 9.846612e-01 1.533884e-02 #> 83   9   3 9.636523e-01 3.634771e-02 #> 84   9   4 1.293479e-05 9.999871e-01 #> 85   9   5 6.814499e-02 9.318550e-01 #> 86   9   6 9.221448e-03 9.907786e-01 #> 87   9   7 4.394759e-01 5.605241e-01 #> 88   9   8 8.133896e-03 9.918661e-01 #> 89   9   9 2.400818e-02 9.759918e-01 #> 90   9  10 2.779993e-05 9.999722e-01 #> 91  10   1 1.793964e-01 8.206036e-01 #> 92  10   2 7.319583e-04 9.992680e-01 #> 93  10   3 4.273465e-04 9.995727e-01 #> 94  10   4 4.423922e-03 9.955761e-01 #> 95  10   5 1.041932e-01 8.958068e-01 #> 96  10   6 3.751401e-03 9.962486e-01 #> 97  10   7 6.249789e-01 3.750211e-01 #> 98  10   8 1.323927e-03 9.986761e-01 #> 99  10   9 3.018860e-06 9.999970e-01 #> 100 10  10 6.098899e-03 9.939011e-01"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/classify.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify deciders. — classify","title":"Classify deciders. — classify","text":"function classifies deciders based estimated latent classes.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/classify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify deciders. — classify","text":"","code":"classify(x)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/classify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify deciders. — classify","text":"x object class RprobitB_model.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/classify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify deciders. — classify","text":"data frame deciders id latent class number.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_choice_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute probit choice probabilities for a single choice situation. — compute_choice_probabilities","title":"Compute probit choice probabilities for a single choice situation. — compute_choice_probabilities","text":"function computes probit choice probabilities single choice situation J alternatives.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_choice_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute probit choice probabilities for a single choice situation. — compute_choice_probabilities","text":"","code":"compute_choice_probabilities(X, alternatives, parameter)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_choice_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute probit choice probabilities for a single choice situation. — compute_choice_probabilities","text":"X matrix covariates J rows P_f + P_r columns, first P_f columns connected fixed coefficients last P_r columns connected random coefficients. alternatives vector unique integers 1 J, indicating alternatives choice probabilities computed. parameter object class RprobitB_parameter.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_choice_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute probit choice probabilities for a single choice situation. — compute_choice_probabilities","text":"probability vector length length(alternatives).","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_log_likelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute log-likelihood of an RprobitB_model. — compute_log_likelihood","title":"Compute log-likelihood of an RprobitB_model. — compute_log_likelihood","text":"function computes log-likelihood RprobitB_model.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_log_likelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute log-likelihood of an RprobitB_model. — compute_log_likelihood","text":"","code":"compute_log_likelihood(x, at_true = FALSE)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_log_likelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute log-likelihood of an RprobitB_model. — compute_log_likelihood","text":"x object class RprobitB_model. at_true TRUE, choice probabilities computed true parameter values (available).","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_log_likelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute log-likelihood of an RprobitB_model. — compute_log_likelihood","text":"log-likelihood value.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_log_likelihood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute log-likelihood of an RprobitB_model. — compute_log_likelihood","text":"","code":"data <- simulate_choices(form = choice ~ covariate, N = 10, T = 10, J = 2) x <- mcmc(data) #> Iteration Info                   ETA (min) #>         0 started Gibbs sampling           #>      1000                                0 #>      2000                                0 #>      3000                                0 #>      4000                                0 #>      5000                                1 #>      6000                                1 #>      7000                                1 #>      8000                                1 #>      9000                                1 #>     10000 done, total time: 1 min compute_log_likelihood(x) #> [1] -28.7469"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_pis.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute probability for each observation for different samples from the posterior. — compute_pis","title":"Compute probability for each observation for different samples from the posterior. — compute_pis","text":"function computes probability observation different samples posterior.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_pis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute probability for each observation for different samples from the posterior. — compute_pis","text":"","code":"compute_pis(x, no_samples = 2)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_pis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute probability for each observation for different samples from the posterior. — compute_pis","text":"x object class RprobitB_model. no_samples number different samples taken posterior.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_pis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute probability for each observation for different samples from the posterior. — compute_pis","text":"matrix.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_point_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute point estimates of an RprobitB_model. — compute_point_estimates","title":"Compute point estimates of an RprobitB_model. — compute_point_estimates","text":"function computes point estimates RprobitB_model. Per default, mean Gibbs samples used point estimate. However, statistic computes single numeric value vector Gibbs samples can specified FUN.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_point_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute point estimates of an RprobitB_model. — compute_point_estimates","text":"","code":"compute_point_estimates(x, FUN = mean)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_point_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute point estimates of an RprobitB_model. — compute_point_estimates","text":"x object class RprobitB_model. FUN function computes single numeric value vector numeric values.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_point_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute point estimates of an RprobitB_model. — compute_point_estimates","text":"object class RprobitB_parameter.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_point_estimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute point estimates of an RprobitB_model. — compute_point_estimates","text":"","code":"data <- simulate_choices(form = choice ~ covariate, N = 10, T = 10, J = 2) model <- mcmc(data) #> Iteration Info                   ETA (min) #>         0 started Gibbs sampling           #>      1000                                0 #>      2000                                0 #>      3000                                0 #>      4000                                0 #>      5000                                0 #>      6000                                0 #>      7000                                0 #>      8000                                0 #>      9000                                0 #>     10000 done, total time: 1 min compute_point_estimates(model) #> $alpha #>          1          2  #> -0.9978342  0.7980178  #>  #> $C #> [1] NA #>  #> $s #> [1] NA #>  #> $b #> [1] NA #>  #> $Omega #> [1] NA #>  #> $Sigma #>      [,1] #> [1,]    1 #> attr(,\"names\") #> [1] \"1,1\" #>  #> $Sigma_full #>      [,1] [,2] #> [1,]    2    1 #> [2,]    1    1 #> attr(,\"names\") #> [1] \"1,1\" \"1,2\" \"2,1\" \"2,2\" #>  #> $beta #> [1] NA #>  #> $z #> [1] NA #>  #> attr(,\"class\") #> [1] \"RprobitB_parameter\" compute_point_estimates(model, FUN = median) #> $alpha #>          1          2  #> -0.9858772  0.7896993  #>  #> $C #> [1] NA #>  #> $s #> [1] NA #>  #> $b #> [1] NA #>  #> $Omega #> [1] NA #>  #> $Sigma #>      [,1] #> [1,]    1 #> attr(,\"names\") #> [1] \"1,1\" #>  #> $Sigma_full #>      [,1] [,2] #> [1,]    2    1 #> [2,]    1    1 #> attr(,\"names\") #> [1] \"1,1\" \"1,2\" \"2,1\" \"2,2\" #>  #> $beta #> [1] NA #>  #> $z #> [1] NA #>  #> attr(,\"class\") #> [1] \"RprobitB_parameter\""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_sufficient_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute sufficient statistics. — compute_sufficient_statistics","title":"Compute sufficient statistics. — compute_sufficient_statistics","text":"function computes sufficient statistics data estimation.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_sufficient_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute sufficient statistics. — compute_sufficient_statistics","text":"","code":"compute_sufficient_statistics(data, normalization)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_sufficient_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute sufficient statistics. — compute_sufficient_statistics","text":"data object class RprobitB_data. normalization object class RprobitB_normalization.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_sufficient_statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute sufficient statistics. — compute_sufficient_statistics","text":"list sufficient statistics.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_waic.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute WAIC value. — compute_waic","title":"Compute WAIC value. — compute_waic","text":"function computes WAIC value RprobitB_model.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_waic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute WAIC value. — compute_waic","text":"","code":"compute_waic(x, no_samples, pis = NULL)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_waic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute WAIC value. — compute_waic","text":"x object class RprobitB_model. no_samples Documentation missing pis Documentation missing","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/compute_waic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute WAIC value. — compute_waic","text":"WAIC value.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_labels_alpha.html","id":null,"dir":"Reference","previous_headings":"","what":"Create labels for alpha. — create_labels_alpha","title":"Create labels for alpha. — create_labels_alpha","text":"function creates labels model parameter alpha.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_labels_alpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create labels for alpha. — create_labels_alpha","text":"","code":"create_labels_alpha(P_f)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_labels_alpha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create labels for alpha. — create_labels_alpha","text":"P_f number covariates connected fixed coefficient (can 0).","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_labels_alpha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create labels for alpha. — create_labels_alpha","text":"vector labels model parameter alpha.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_labels_b.html","id":null,"dir":"Reference","previous_headings":"","what":"Create labels for b. — create_labels_b","title":"Create labels for b. — create_labels_b","text":"function creates labels model parameter b.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_labels_b.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create labels for b. — create_labels_b","text":"","code":"create_labels_b(P_r, C)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_labels_b.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create labels for b. — create_labels_b","text":"P_r number covariates connected random coefficient (can 0). C number latent classes.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_labels_b.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create labels for b. — create_labels_b","text":"vector labels model parameter b.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_labels_Omega.html","id":null,"dir":"Reference","previous_headings":"","what":"Create labels for Omega. — create_labels_Omega","title":"Create labels for Omega. — create_labels_Omega","text":"function creates labels model parameter Omega.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_labels_Omega.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create labels for Omega. — create_labels_Omega","text":"","code":"create_labels_Omega(P_r, C, cov_sym)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_labels_Omega.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create labels for Omega. — create_labels_Omega","text":"P_r number covariates connected random coefficient (can 0). C number latent classes. cov_sym TRUE considers symmetric covariance matrix elements.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_labels_Omega.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create labels for Omega. — create_labels_Omega","text":"vector labels model parameter Omega.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_labels_s.html","id":null,"dir":"Reference","previous_headings":"","what":"Create labels for s. — create_labels_s","title":"Create labels for s. — create_labels_s","text":"function creates labels model parameter s.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_labels_s.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create labels for s. — create_labels_s","text":"","code":"create_labels_s(P_r, C)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_labels_s.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create labels for s. — create_labels_s","text":"P_r number covariates connected random coefficient (can 0). C number latent classes.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_labels_s.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create labels for s. — create_labels_s","text":"vector labels model parameter s.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_labels_Sigma.html","id":null,"dir":"Reference","previous_headings":"","what":"Create labels for Sigma. — create_labels_Sigma","title":"Create labels for Sigma. — create_labels_Sigma","text":"function creates labels model parameter Sigma.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_labels_Sigma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create labels for Sigma. — create_labels_Sigma","text":"","code":"create_labels_Sigma(J, cov_sym)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_labels_Sigma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create labels for Sigma. — create_labels_Sigma","text":"J number (greater equal 2) choice alternatives. cov_sym TRUE considers symmetric covariance matrix elements.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_labels_Sigma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create labels for Sigma. — create_labels_Sigma","text":"vector labels model parameter Sigma.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_parameter_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Create parameters labels. — create_parameter_labels","title":"Create parameters labels. — create_parameter_labels","text":"function creates labels model parameters.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_parameter_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create parameters labels. — create_parameter_labels","text":"","code":"create_parameter_labels(   P_f,   P_r,   J,   C,   cov_sym,   keep_par = c(\"s\", \"alpha\", \"b\", \"Omega\", \"Sigma\"),   drop_par = NULL )"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_parameter_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create parameters labels. — create_parameter_labels","text":"P_f number covariates connected fixed coefficient (can 0). P_r number covariates connected random coefficient (can 0). J number (greater equal 2) choice alternatives. C number latent classes. cov_sym TRUE considers symmetric covariance matrix elements. keep_par vector parameter names kept. drop_par vector parameter names get dropped.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/create_parameter_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create parameters labels. — create_parameter_labels","text":"list labels model parameters.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/delta.html","id":null,"dir":"Reference","previous_headings":"","what":"Matrix difference operator. — delta","title":"Matrix difference operator. — delta","text":"function creates difference operator matrix delta subtracting matrix row matrix rows.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/delta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matrix difference operator. — delta","text":"","code":"delta(J, i)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/delta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matrix difference operator. — delta","text":"J number matrix rows. row number respect differences computed.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/delta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matrix difference operator. — delta","text":"matrix J-1 rows.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/delta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Matrix difference operator. — delta","text":"Given matrix x J rows, delta(,J) %*% x computes differences respect row .","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/delta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matrix difference operator. — delta","text":"","code":"J <- 2 x <- matrix(1, nrow = J, ncol = 2) delta(J, 1) %*% x #>      [,1] [,2] #> [1,]    0    0"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/filter_gibbs_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Gibbs samples. — filter_gibbs_samples","title":"Filter Gibbs samples. — filter_gibbs_samples","text":"function filters Gibbs samples.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/filter_gibbs_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Gibbs samples. — filter_gibbs_samples","text":"","code":"filter_gibbs_samples(   x,   P_f,   P_r,   J,   C,   cov_sym,   keep_par = c(\"s\", \"alpha\", \"b\", \"Omega\", \"Sigma\"),   drop_par = NULL )"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/filter_gibbs_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Gibbs samples. — filter_gibbs_samples","text":"x object class RprobitB_gibbs_samples. P_f number covariates connected fixed coefficient (can 0). P_r number covariates connected random coefficient (can 0). J number (greater equal 2) choice alternatives. C number latent classes. cov_sym TRUE considers symmetric covariance matrix elements. keep_par vector parameter names kept. drop_par vector parameter names get dropped.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/filter_gibbs_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Gibbs samples. — filter_gibbs_samples","text":"object class RprobitB_gibbs_samples filtered labels create_parameter_labels(P_f, P_r, J, C, cov_sym, keep_par, drop_par).","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/gibbs_sampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Gibbs sampler. — gibbs_sampling","title":"Gibbs sampler. — gibbs_sampling","text":"function performs Gibbs sampling RprobitB package.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/gibbs_sampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gibbs sampler. — gibbs_sampling","text":"","code":"gibbs_sampling(   R,   B,   print_progress,   N,   J,   P_f,   P_r,   latent_classes,   sufficient_statistics,   prior,   init )"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/gibbs_sampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gibbs sampler. — gibbs_sampling","text":"R number iterations Gibbs sampler. B length burn-period, .e. non-negative number samples discarded. print_progress boolean, determining whether print Gibbs sampler progress estimated remaining computation time. N number (greater equal 1) decision makers. J number (greater equal 2) choice alternatives. P_f number covariates connected fixed coefficient (can 0). P_r number covariates connected random coefficient (can 0). latent_classes Either NULL list parameters specifying number latent classes: C: number (greater equal 1) latent classes, set 1 per default ignored P_r = 0. update = TRUE, C equals initial number classes. update: boolean, determining whether update C. Ignored P_r = 0. update = FALSE, following elements ignored. Cmax: maximum number latent classes. buffer: updating buffer (number iterations wait next update). epsmin: threshold weight removing latent classes (0 1). epsmax: threshold weight splitting latent classes (0 1). distmin: threshold difference means joining latent classes (non-negative). sufficient_statistics output compute_sufficient_statistics. prior named list parameters prior distributions normalized parameters: eta: mean vector length P_f normal prior alpha. Psi: covariance matrix dimension P_f x P_f normal prior alpha. delta: concentration parameter length 1 Dirichlet prior s. xi: mean vector length P_r normal prior b_c. D: covariance matrix dimension P_r x P_r normal prior b_c. nu: degrees freedom (natural number greater P_r) Inverse Wishart prior Omega_c. Theta: scale matrix dimension P_r x P_r Inverse Wishart prior Omega_c. kappa: degrees freedom (natural number greater J-1) Inverse Wishart prior Sigma. E: scale matrix dimension J-1 x J-1 Inverse Wishart prior Sigma. init output set_initial_gibbs_values.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/gibbs_sampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gibbs sampler. — gibbs_sampling","text":"list Gibbs samples Sigma, alpha (P_f>0) s, b, Omega vector classifications (P_r>0).","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/is_covariance_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Check covariance matrix properties. — is_covariance_matrix","title":"Check covariance matrix properties. — is_covariance_matrix","text":"function checks input proper covariance matrix, .e. symmetric, numeric matrix non-negative eigenvalues.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/is_covariance_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check covariance matrix properties. — is_covariance_matrix","text":"","code":"is_covariance_matrix(x)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/is_covariance_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check covariance matrix properties. — is_covariance_matrix","text":"x matrix.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/is_covariance_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check covariance matrix properties. — is_covariance_matrix","text":"boolean, TRUE x proper covariance matrix.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/is_covariance_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check covariance matrix properties. — is_covariance_matrix","text":"","code":"x <- diag(2) is_covariance_matrix(x) #> [1] TRUE"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/mcmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov chain Monte Carlo simulation for probit model fitting. — mcmc","title":"Markov chain Monte Carlo simulation for probit model fitting. — mcmc","text":"function performs Markov chain Monte Carlo simulation fitting (latent class) (mixed) (multinomial) probit model discrete choice data.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/mcmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov chain Monte Carlo simulation for probit model fitting. — mcmc","text":"","code":"mcmc(   data,   scale = list(parameter = \"s\", index = 1, value = 1),   R = 10000,   B = R/2,   Q = 1,   print_progress = TRUE,   prior = NULL,   latent_classes = NULL,   seed = NULL )"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/mcmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov chain Monte Carlo simulation for probit model fitting. — mcmc","text":"data object class RprobitB_data. scale named list three elements, determining parameter normalization respect utility scale: parameter: Either \"\" (linear coefficient \"alpha\") \"s\" (variance error-term covariance matrix \"Sigma\"). index: index parameter gets fixed. value: value fixed parameter. R number iterations Gibbs sampler. B length burn-period, .e. non-negative number samples discarded. Q thinning factor Gibbs samples, .e. every Qth sample kept. print_progress boolean, determining whether print Gibbs sampler progress estimated remaining computation time. prior named list parameters prior distributions normalized parameters: eta: mean vector length P_f normal prior alpha. Psi: covariance matrix dimension P_f x P_f normal prior alpha. delta: concentration parameter length 1 Dirichlet prior s. xi: mean vector length P_r normal prior b_c. D: covariance matrix dimension P_r x P_r normal prior b_c. nu: degrees freedom (natural number greater P_r) Inverse Wishart prior Omega_c. Theta: scale matrix dimension P_r x P_r Inverse Wishart prior Omega_c. kappa: degrees freedom (natural number greater J-1) Inverse Wishart prior Sigma. E: scale matrix dimension J-1 x J-1 Inverse Wishart prior Sigma. latent_classes Either NULL list parameters specifying number latent classes: C: number (greater equal 1) latent classes, set 1 per default ignored P_r = 0. update = TRUE, C equals initial number classes. update: boolean, determining whether update C. Ignored P_r = 0. update = FALSE, following elements ignored. Cmax: maximum number latent classes. buffer: updating buffer (number iterations wait next update). epsmin: threshold weight removing latent classes (0 1). epsmax: threshold weight splitting latent classes (0 1). distmin: threshold difference means joining latent classes (non-negative). seed Set seed Gibbs sampling.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/mcmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov chain Monte Carlo simulation for probit model fitting. — mcmc","text":"object class RprobitB_model.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/mcmc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov chain Monte Carlo simulation for probit model fitting. — mcmc","text":"See vignette \"Model fitting\" details: vignette(\"model_fitting\", package = \"RprobitB\").","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/mcmc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov chain Monte Carlo simulation for probit model fitting. — mcmc","text":"","code":"if (FALSE) { ### probit model p <- simulate_choices(form = choice ~ var | 0, N = 100, T = 10, J = 2, seed = 1) m1 <- mcmc(data = p, seed = 1)  ### multinomial probit model mnp <- simulate_choices(form = choice ~ var | 0, N = 100, T = 10, J = 3, seed = 1) m2 <- mcmc(data = mnp, seed = 1)  ### mixed multinomial probit model mmnp <- simulate_choices(   form = choice ~ 0 | var, N = 100, T = 10, J = 3, re = \"var\",   seed = 1 ) m3 <- mcmc(data = mmnp, seed = 1)  ### mixed multinomial probit model with 2 latent classes lcmmnp <- simulate_choices(   form = choice ~ 0 | var, N = 100, T = 10, J = 3,   re = \"var\", seed = 1, C = 2 ) m4 <- mcmc(data = lcmmnp, latent_classes = list(\"C\" = 2), seed = 1)  ### update of latent classes m5 <- simulate_choices(data = lcmmnp, latent_classes = list(\"update\" = TRUE), seed = 1) }"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/model_selection.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare fitted models. — model_selection","title":"Compare fitted models. — model_selection","text":"function guides process model selection.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/model_selection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare fitted models. — model_selection","text":"","code":"model_selection(...)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/model_selection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare fitted models. — model_selection","text":"... One objects class RprobitB_model.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/model_selection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare fitted models. — model_selection","text":"matrix model's number parameters, log-likelihood, AIC, BIC value.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/overview_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Overview of effects. — overview_effects","title":"Overview of effects. — overview_effects","text":"function gives overview linear coefficients whether connected random effects.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/overview_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Overview of effects. — overview_effects","text":"","code":"overview_effects(form, re = NULL, alternatives)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/overview_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Overview of effects. — overview_effects","text":"form formula object used specify probit model. structure choice ~ | B | C, names alternative choice situation specific covariates generic coefficient, B names choice situation specific covariates alternative specific coefficients, C names alternative choice situation specific covariates alternative specific coefficients. Separate multiple covariates one type + sign. default, alternative specific constants (ASCs) added model (except last alternative). can removed adding +0 second spot. See vignette vignette(\"data_management\", package = \"RprobitB\") details. re character (vector) covariates form random effects. re = NULL (default), random effects. random effects alternative specific constants, include \"ASC\" re. alternatives character vector names choice alternatives. specified, choice set defined observed choices.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/overview_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Overview of effects. — overview_effects","text":"data frame coefficient names booleans indicating whether connected random effects.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/overview_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Overview of effects. — overview_effects","text":"","code":"form <- choice ~ price + time + comfort + change | 1 re <- c(\"price\",\"time\") alternatives <- c(\"A\",\"B\") overview_effects(form = form, re = re, alternatives = alternatives) #>      name    re #> 1 comfort FALSE #> 2  change FALSE #> 3   ASC_A FALSE #> 4   price  TRUE #> 5    time  TRUE"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/plot.RprobitB_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for RprobitB_model. — plot.RprobitB_model","title":"Plot method for RprobitB_model. — plot.RprobitB_model","text":"function plot method object class RprobitB_model.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/plot.RprobitB_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for RprobitB_model. — plot.RprobitB_model","text":"","code":"# S3 method for RprobitB_model plot(x, type = \"effects\", ignore = NULL, ...)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/plot.RprobitB_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for RprobitB_model. — plot.RprobitB_model","text":"x object class RprobitB_model. type type plot, can one : \"effects\" (default) visualizing linear effects, \"mixture\" visualizing mixture distribution, \"acf\" autocorrelation plots Gibbs samples, \"trace\" trace plots Gibbs samples. ignore character (vector) covariate parameter names get visualized. ... Ignored.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/plot.RprobitB_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for RprobitB_model. — plot.RprobitB_model","text":"return value. Draws plot current device.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/predict_choices.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict choices. — predict_choices","title":"Predict choices. — predict_choices","text":"function predicts choices decision makers.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/predict_choices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict choices. — predict_choices","text":"","code":"predict_choices(x, data = NULL, overview = TRUE)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/predict_choices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict choices. — predict_choices","text":"x object class RprobitB_model. data Either NULL object class RprobitB_data. overview TRUE, aggregate prediction table.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/predict_choices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict choices. — predict_choices","text":"Either table overview = TRUE data frame otherwise.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/predict_choices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict choices. — predict_choices","text":"","code":"data <- simulate_choices(form = choice ~ covariate, N = 10, T = 10, J = 2) x <- mcmc(data) #> Iteration Info                   ETA (min) #>         0 started Gibbs sampling           #>      1000                                0 #>      2000                                0 #>      3000                                1 #>      4000                                1 #>      5000                                1 #>      6000                                1 #>      7000                                1 #>      8000                                1 #>      9000                                1 #>     10000 done, total time: 1 min predict_choices(x, overview = TRUE) #>     predicted #> true  A  B #>    A 20  6 #>    B  4 70 predict_choices(x, overview = FALSE) #>     id idc            A           B true predicted correct #> 1    1   1 2.556214e-02 0.974437858    B         B    TRUE #> 2    1   2 3.476012e-04 0.999652399    B         B    TRUE #> 3    1   3 6.074423e-04 0.999392558    B         B    TRUE #> 4    1   4 1.014500e-01 0.898550026    B         B    TRUE #> 5    1   5 1.007658e-01 0.899234159    A         B   FALSE #> 6    1   6 7.197959e-02 0.928020414    B         B    TRUE #> 7    1   7 8.913162e-04 0.999108684    B         B    TRUE #> 8    1   8 7.244916e-01 0.275508445    B         A   FALSE #> 9    1   9 9.955259e-01 0.004474097    A         A    TRUE #> 10   1  10 4.892080e-01 0.510791989    A         B   FALSE #> 11   2   1 9.772755e-01 0.022724515    A         A    TRUE #> 12   2   2 2.512130e-03 0.997487870    B         B    TRUE #> 13   2   3 6.663784e-01 0.333621574    A         A    TRUE #> 14   2   4 1.627778e-01 0.837222172    B         B    TRUE #> 15   2   5 1.688827e-02 0.983111727    B         B    TRUE #> 16   2   6 1.933392e-01 0.806660807    B         B    TRUE #> 17   2   7 8.224140e-01 0.177585962    A         A    TRUE #> 18   2   8 4.808194e-01 0.519180576    A         B   FALSE #> 19   2   9 6.031786e-03 0.993968214    B         B    TRUE #> 20   2  10 9.863992e-03 0.990136008    B         B    TRUE #> 21   3   1 9.178859e-01 0.082114111    A         A    TRUE #> 22   3   2 3.683901e-03 0.996316099    B         B    TRUE #> 23   3   3 1.170874e-02 0.988291265    B         B    TRUE #> 24   3   4 1.802842e-02 0.981971581    B         B    TRUE #> 25   3   5 6.639475e-01 0.336052462    A         A    TRUE #> 26   3   6 5.833614e-03 0.994166386    B         B    TRUE #> 27   3   7 5.445261e-05 0.999945547    B         B    TRUE #> 28   3   8 5.915325e-01 0.408467523    B         A   FALSE #> 29   3   9 9.842691e-01 0.015730896    A         A    TRUE #> 30   3  10 1.736310e-02 0.982636895    B         B    TRUE #> 31   4   1 5.515782e-01 0.448421791    A         A    TRUE #> 32   4   2 2.053838e-01 0.794616230    B         B    TRUE #> 33   4   3 1.531615e-01 0.846838460    B         B    TRUE #> 34   4   4 2.043625e-03 0.997956375    B         B    TRUE #> 35   4   5 4.811896e-04 0.999518810    B         B    TRUE #> 36   4   6 3.337359e-01 0.666264129    B         B    TRUE #> 37   4   7 8.978336e-04 0.999102166    B         B    TRUE #> 38   4   8 8.738989e-02 0.912610107    B         B    TRUE #> 39   4   9 9.017229e-05 0.999909828    B         B    TRUE #> 40   4  10 9.832808e-01 0.016719209    A         A    TRUE #> 41   5   1 9.665772e-01 0.033422790    A         A    TRUE #> 42   5   2 2.952138e-10 1.000000000    B         B    TRUE #> 43   5   3 5.325429e-05 0.999946746    B         B    TRUE #> 44   5   4 8.846158e-01 0.115384151    A         A    TRUE #> 45   5   5 9.691196e-01 0.030880392    B         A   FALSE #> 46   5   6 4.458267e-02 0.955417326    B         B    TRUE #> 47   5   7 1.407357e-01 0.859264258    B         B    TRUE #> 48   5   8 1.124082e-02 0.988759185    B         B    TRUE #> 49   5   9 4.653523e-01 0.534647657    B         B    TRUE #> 50   5  10 6.040065e-05 0.999939599    B         B    TRUE #> 51   6   1 5.222948e-02 0.947770520    B         B    TRUE #> 52   6   2 7.775742e-01 0.222425751    A         A    TRUE #> 53   6   3 3.072257e-01 0.692774334    A         B   FALSE #> 54   6   4 8.603521e-01 0.139647891    A         A    TRUE #> 55   6   5 4.890385e-04 0.999510962    B         B    TRUE #> 56   6   6 3.549220e-03 0.996450780    B         B    TRUE #> 57   6   7 1.938128e-01 0.806187237    B         B    TRUE #> 58   6   8 4.254706e-01 0.574529358    A         B   FALSE #> 59   6   9 1.403833e-03 0.998596167    B         B    TRUE #> 60   6  10 3.393448e-03 0.996606552    B         B    TRUE #> 61   7   1 1.454569e-06 0.999998545    B         B    TRUE #> 62   7   2 1.183352e-01 0.881664841    B         B    TRUE #> 63   7   3 1.403654e-02 0.985963459    B         B    TRUE #> 64   7   4 2.728921e-04 0.999727108    B         B    TRUE #> 65   7   5 4.900149e-02 0.950998506    B         B    TRUE #> 66   7   6 1.868822e-05 0.999981312    B         B    TRUE #> 67   7   7 9.974362e-06 0.999990026    B         B    TRUE #> 68   7   8 6.037431e-01 0.396256873    B         A   FALSE #> 69   7   9 1.931118e-03 0.998068882    B         B    TRUE #> 70   7  10 8.511039e-02 0.914889611    B         B    TRUE #> 71   8   1 1.104008e-01 0.889599242    B         B    TRUE #> 72   8   2 1.087589e-04 0.999891241    B         B    TRUE #> 73   8   3 3.083909e-02 0.969160909    B         B    TRUE #> 74   8   4 1.820318e-01 0.817968223    B         B    TRUE #> 75   8   5 7.365234e-01 0.263476638    A         A    TRUE #> 76   8   6 6.320301e-03 0.993679699    B         B    TRUE #> 77   8   7 1.869317e-02 0.981306835    B         B    TRUE #> 78   8   8 3.119389e-01 0.688061108    B         B    TRUE #> 79   8   9 1.533763e-01 0.846623740    A         B   FALSE #> 80   8  10 3.980868e-02 0.960191325    B         B    TRUE #> 81   9   1 9.611276e-01 0.038872359    A         A    TRUE #> 82   9   2 5.848534e-01 0.415146622    A         A    TRUE #> 83   9   3 1.938678e-02 0.980613223    B         B    TRUE #> 84   9   4 1.237454e-04 0.999876255    B         B    TRUE #> 85   9   5 9.298257e-03 0.990701743    B         B    TRUE #> 86   9   6 8.269839e-01 0.173016121    A         A    TRUE #> 87   9   7 7.612565e-02 0.923874351    B         B    TRUE #> 88   9   8 2.344488e-01 0.765551236    B         B    TRUE #> 89   9   9 1.870347e-03 0.998129653    B         B    TRUE #> 90   9  10 5.065598e-01 0.493440170    A         A    TRUE #> 91  10   1 3.970175e-01 0.602982462    B         B    TRUE #> 92  10   2 6.030109e-02 0.939698905    B         B    TRUE #> 93  10   3 3.976860e-03 0.996023140    B         B    TRUE #> 94  10   4 9.988051e-01 0.001194879    A         A    TRUE #> 95  10   5 4.553287e-03 0.995446713    B         B    TRUE #> 96  10   6 4.726435e-05 0.999952736    B         B    TRUE #> 97  10   7 1.987773e-03 0.998012227    B         B    TRUE #> 98  10   8 4.809168e-02 0.951908319    B         B    TRUE #> 99  10   9 9.956873e-01 0.004312702    A         A    TRUE #> 100 10  10 1.714435e-01 0.828556460    B         B    TRUE"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/prepare_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare empirical choice data. — prepare_data","title":"Prepare empirical choice data. — prepare_data","text":"function prepares empirical choice data RprobitB package.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/prepare_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare empirical choice data. — prepare_data","text":"","code":"prepare_data(   form,   choice_data,   re = NULL,   alternatives = NULL,   id = \"id\",   idc = NULL,   standardize = NULL )"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/prepare_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare empirical choice data. — prepare_data","text":"form formula object used specify probit model. structure choice ~ | B | C, names alternative choice situation specific covariates generic coefficient, B names choice situation specific covariates alternative specific coefficients, C names alternative choice situation specific covariates alternative specific coefficients. Separate multiple covariates one type + sign. default, alternative specific constants (ASCs) added model (except last alternative). can removed adding +0 second spot. See vignette vignette(\"data_management\", package = \"RprobitB\") details. choice_data data frame choice data following requirements: must \"wide\" format, .e. row represents one choice occasion. must contain column named id contains unique identifier decision maker. can contain column named idc contains unique identifier choice situation decision maker. information missing, identifier generated automatically appearance choices data set. can contain column named choice observed choices, choice must match name dependent variable form. column required model fitting prediction. must contain column named p_j alternative specific covariate p form choice alternative j alternatives. must contain column named q covariate q form constant across alternatives. re character (vector) covariates form random effects. re = NULL (default), random effects. random effects alternative specific constants, include \"ASC\" re. alternatives character vector names choice alternatives. specified, choice set defined observed choices. id character, name column choice_data contains unique identifier decision maker. default \"id\". idc character, name column choice_data contains unique identifier choice situation decision maker. default NULL, case identifier generated automatically. standardize character vector names covariates get standardized. Covariates type 1 3 addressed <covariate>_<alternative>. standardize = \"\", covariates get standardized.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/prepare_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare empirical choice data. — prepare_data","text":"object class RprobitB_data.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/prepare_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare empirical choice data. — prepare_data","text":"See vignette \"Choice data\" details: vignette(\"choice_data\", package = \"RprobitB\").","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/prepare_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare empirical choice data. — prepare_data","text":"","code":"data(\"Train\", package = \"mlogit\") data <- prepare_data(   form = choice ~ price + time + comfort + change | 1,   choice_data = Train,   re = c(\"price\", \"time\"),   id = \"id\",   idc = \"choiceid\",   standardize = \"all\" )"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/rdirichlet.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw from Dirichlet — rdirichlet","title":"Draw from Dirichlet — rdirichlet","text":"Function draw Dirichlet distribution.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/rdirichlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw from Dirichlet — rdirichlet","text":"","code":"rdirichlet(alpha)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/rdirichlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw from Dirichlet — rdirichlet","text":"alpha vector, concentration parameter.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/rdirichlet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw from Dirichlet — rdirichlet","text":"vector, sample Dirichlet distribution.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create object of class RprobitB_data. — RprobitB_data","title":"Create object of class RprobitB_data. — RprobitB_data","text":"function creates object class RprobitB_data.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create object of class RprobitB_data. — RprobitB_data","text":"","code":"RprobitB_data(   data,   choice_data,   N,   T,   J,   P_f,   P_r,   alternatives,   form,   re,   ASC,   linear_coeffs,   standardize,   simulated,   choice_available,   true_parameter )"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create object of class RprobitB_data. — RprobitB_data","text":"data list choice data. list N elements. element list two elements, X y, covariates decisions decision maker. precisely, X list T elements, element matrix dimension Jx(P_f+P_r) contains characteristics one choice occasion. y vector length T contains labels chosen alternatives. choice_data data frame choice data following requirements: must \"wide\" format, .e. row represents one choice occasion. must contain column named id contains unique identifier decision maker. can contain column named idc contains unique identifier choice situation decision maker. information missing, identifier generated automatically appearance choices data set. can contain column named choice observed choices, choice must match name dependent variable form. column required model fitting prediction. must contain column named p_j alternative specific covariate p form choice alternative j alternatives. must contain column named q covariate q form constant across alternatives. N number (greater equal 1) decision makers. T number (greater equal 1) choice occasions vector choice occasions length N (.e. decision maker specific number). J number (greater equal 2) choice alternatives. P_f number covariates connected fixed coefficient (can 0). P_r number covariates connected random coefficient (can 0). alternatives character vector names choice alternatives. specified, choice set defined observed choices. form formula object used specify probit model. structure choice ~ | B | C, names alternative choice situation specific covariates generic coefficient, B names choice situation specific covariates alternative specific coefficients, C names alternative choice situation specific covariates alternative specific coefficients. Separate multiple covariates one type + sign. default, alternative specific constants (ASCs) added model (except last alternative). can removed adding +0 second spot. See vignette vignette(\"data_management\", package = \"RprobitB\") details. re character (vector) covariates form random effects. re = NULL (default), random effects. random effects alternative specific constants, include \"ASC\" re. ASC boolean, determining whether model ASCs. linear_coeffs data frame coefficient names booleans indicating whether connected random effects. standardize character vector names covariates get standardized. Covariates type 1 3 addressed <covariate>_<alternative>. standardize = \"\", covariates get standardized. simulated boolean, TRUE data simulated, otherwise data empirical. choice_available boolean, TRUE data contains observed choices. true_parameter object class RprobitB_parameters.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create object of class RprobitB_data. — RprobitB_data","text":"object class RprobitB_data arguments function elements.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_gibbs_samples_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Create object of class RprobitB_gibbs_samples_statistics. — RprobitB_gibbs_samples_statistics","title":"Create object of class RprobitB_gibbs_samples_statistics. — RprobitB_gibbs_samples_statistics","text":"function creates object class RprobitB_gibbs_samples_statistics.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_gibbs_samples_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create object of class RprobitB_gibbs_samples_statistics. — RprobitB_gibbs_samples_statistics","text":"","code":"RprobitB_gibbs_samples_statistics(gibbs_samples, FUN)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_gibbs_samples_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create object of class RprobitB_gibbs_samples_statistics. — RprobitB_gibbs_samples_statistics","text":"gibbs_samples object class RprobitB_gibbs_samples. FUN (preferably named) list functions compute parameter statistics Gibbs samples, .e. mean mean, sd standard deviation, min minimum, max maximum, median median, function(x) quantile(x, p) pth quantile, R_hat Gelman-Rubin statistic.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_gibbs_samples_statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create object of class RprobitB_gibbs_samples_statistics. — RprobitB_gibbs_samples_statistics","text":"object class RprobitB_gibbs_samples_statistics, list statistics gibbs_samples obtained applying elements FUN.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_latent_classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Create object of class RprobitB_latent_classes. — RprobitB_latent_classes","title":"Create object of class RprobitB_latent_classes. — RprobitB_latent_classes","text":"function creates object class RprobitB_latent_classes.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_latent_classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create object of class RprobitB_latent_classes. — RprobitB_latent_classes","text":"","code":"RprobitB_latent_classes(latent_classes = NULL)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_latent_classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create object of class RprobitB_latent_classes. — RprobitB_latent_classes","text":"latent_classes Either NULL list parameters specifying number latent classes: C: number (greater equal 1) latent classes, set 1 per default ignored P_r = 0. update = TRUE, C equals initial number classes. update: boolean, determining whether update C. Ignored P_r = 0. update = FALSE, following elements ignored. Cmax: maximum number latent classes. buffer: updating buffer (number iterations wait next update). epsmin: threshold weight removing latent classes (0 1). epsmax: threshold weight splitting latent classes (0 1). distmin: threshold difference means joining latent classes (non-negative).","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_latent_classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create object of class RprobitB_latent_classes. — RprobitB_latent_classes","text":"object class RprobitB_latent_classes.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create object of class RprobitB_model. — RprobitB_model","title":"Create object of class RprobitB_model. — RprobitB_model","text":"function creates object class RprobitB_model.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create object of class RprobitB_model. — RprobitB_model","text":"","code":"RprobitB_model(   data,   normalization,   R,   B,   Q,   latent_classes,   prior,   gibbs_samples,   classification )"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create object of class RprobitB_model. — RprobitB_model","text":"data object class RprobitB_data. normalization object class RprobitB_normalization. R number iterations Gibbs sampler. B length burn-period, .e. non-negative number samples discarded. Q thinning factor Gibbs samples, .e. every Qth sample kept. latent_classes Either NULL list parameters specifying number latent classes: C: number (greater equal 1) latent classes, set 1 per default ignored P_r = 0. update = TRUE, C equals initial number classes. update: boolean, determining whether update C. Ignored P_r = 0. update = FALSE, following elements ignored. Cmax: maximum number latent classes. buffer: updating buffer (number iterations wait next update). epsmin: threshold weight removing latent classes (0 1). epsmax: threshold weight splitting latent classes (0 1). distmin: threshold difference means joining latent classes (non-negative). prior named list parameters prior distributions normalized parameters: eta: mean vector length P_f normal prior alpha. Psi: covariance matrix dimension P_f x P_f normal prior alpha. delta: concentration parameter length 1 Dirichlet prior s. xi: mean vector length P_r normal prior b_c. D: covariance matrix dimension P_r x P_r normal prior b_c. nu: degrees freedom (natural number greater P_r) Inverse Wishart prior Omega_c. Theta: scale matrix dimension P_r x P_r Inverse Wishart prior Omega_c. kappa: degrees freedom (natural number greater J-1) Inverse Wishart prior Sigma. E: scale matrix dimension J-1 x J-1 Inverse Wishart prior Sigma. gibbs_samples object class RprobitB_gibbs_samples. classification allocation variable estimated latent classes.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create object of class RprobitB_model. — RprobitB_model","text":"object class RprobitB_model, .e. list arguments function elements.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_normalization.html","id":null,"dir":"Reference","previous_headings":"","what":"Create object of class RprobitB_normalization. — RprobitB_normalization","title":"Create object of class RprobitB_normalization. — RprobitB_normalization","text":"function creates object class RprobitB_normalization.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_normalization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create object of class RprobitB_normalization. — RprobitB_normalization","text":"","code":"RprobitB_normalization(   J,   P_f,   level = J,   scale = list(parameter = \"s\", index = 1, value = 1) )"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_normalization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create object of class RprobitB_normalization. — RprobitB_normalization","text":"J number (greater equal 2) choice alternatives. P_f number covariates connected fixed coefficient (can 0). level number alternative respect utility differences computed. Currently, level = J (.e. utility differences respect last alternative) implemented. scale named list three elements, determining parameter normalization respect utility scale: parameter: Either \"\" (linear coefficient \"alpha\") \"s\" (variance error-term covariance matrix \"Sigma\"). index: index parameter gets fixed. value: value fixed parameter.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_normalization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create object of class RprobitB_normalization. — RprobitB_normalization","text":"object class RprobitB_normalization, list elements level scale.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_normalization.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create object of class RprobitB_normalization. — RprobitB_normalization","text":"choice model normalized respect level scale. level normalization, takes utility differences respect one alternative. scale normalization, fix model parameter. Per default, first error-term variance fixed 1, .e. scale = list(\"parameter\" = \"s\", \"index\" = 1, \"value\" = 1). Alternatively, error-term variance linear coefficient can fixed.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Create object of class RprobitB_parameter. — RprobitB_parameter","title":"Create object of class RprobitB_parameter. — RprobitB_parameter","text":"function creates object class RprobitB_parameter. sample = TRUE, missing parameters sampled. parameters checked values P_f, P_r, J, N.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create object of class RprobitB_parameter. — RprobitB_parameter","text":"","code":"RprobitB_parameter(   P_f,   P_r,   J,   N,   alpha = NULL,   C = NULL,   s = NULL,   b = NULL,   Omega = NULL,   Sigma = NULL,   Sigma_full = NULL,   beta = NULL,   z = NULL,   seed = NULL,   sample = TRUE )"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create object of class RprobitB_parameter. — RprobitB_parameter","text":"P_f number covariates connected fixed coefficient (can 0). P_r number covariates connected random coefficient (can 0). J number (greater equal 2) choice alternatives. N number (greater equal 1) decision makers. alpha fixed coefficient vector length P_f. Set NA P_f = 0. C number (greater equal 1) latent classes decision makers. Set NA P_r = 0. Otherwise, C = 1 per default. s vector class weights length C. Set NA P_r = 0. identifiability, vector must non-ascending. b matrix class means columns dimension P_r x C. Set NA P_r = 0. Omega matrix class covariance matrices columns dimension P_r*P_r x C. Set NA P_r = 0. Sigma differenced error term covariance matrix dimension J-1 x J-1 respect alternative J. Sigma_full error term covariance matrix dimension J x J. Internally, Sigma_full gets differenced respect alternative J, becomes identified covariance matrix dimension J-1 x J-1. Sigma specified, Sigma_full ignored. beta matrix decision-maker specific coefficient vectors dimension P_r x N. Set NA P_r = 0. z vector allocation variables length N. Set NA P_r = 0. seed Set seed sampling missing parameters. sample boolean, TRUE missing parameters get sampled.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/RprobitB_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create object of class RprobitB_parameter. — RprobitB_parameter","text":"object class RprobitB_parameter, .e. named list model parameters alpha, C, s, b, Omega, Sigma, Sigma_full, beta, z.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/rwishart.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw from a Wishart — rwishart","title":"Draw from a Wishart — rwishart","text":"Function draw Wishart inverted Wishart distribution.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/rwishart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw from a Wishart — rwishart","text":"","code":"rwishart(nu, V)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/rwishart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw from a Wishart — rwishart","text":"nu double, degrees freedom. V matrix, scale matrix.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/rwishart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw from a Wishart — rwishart","text":"list, draw Wishart (W), inverted Wishart (IW), corresponding Cholesky decomposition (C CI)","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/R_hat.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Gelman-Rubin statistic. — R_hat","title":"Compute Gelman-Rubin statistic. — R_hat","text":"function computes Gelman-Rubin statistic R_hat.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/R_hat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Gelman-Rubin statistic. — R_hat","text":"","code":"R_hat(samples, parts = 2)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/R_hat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Gelman-Rubin statistic. — R_hat","text":"samples vector matrix samples Markov chain, e.g. Gibbs samples. samples matrix, column gives samples separate run. parts number parts divide chain sub-chains.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/R_hat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Gelman-Rubin statistic. — R_hat","text":"Gelman-Rubin statistic.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/R_hat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Gelman-Rubin statistic. — R_hat","text":"https://bookdown.org/rdpeng/advstatcomp/monitoring-convergence.html","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/R_hat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Gelman-Rubin statistic. — R_hat","text":"","code":"no_chains <- 2 length_chains <- 1e3 samples <- matrix(NA, length_chains, no_chains) samples[1, ] <- 1 Gamma <- matrix(c(0.8, 0.1, 0.2, 0.9), 2, 2) for (c in 1:no_chains) {   for (t in 2:length_chains) {     samples[t, c] <- sample(1:2, 1, prob = Gamma[samples[t - 1, c], ])   } } R_hat(samples) #> [1] 1.019397"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/set_initial_gibbs_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Set initial values for the Gibbs sampler. — set_initial_gibbs_values","title":"Set initial values for the Gibbs sampler. — set_initial_gibbs_values","text":"function sets initial values Gibbs sampler.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/set_initial_gibbs_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set initial values for the Gibbs sampler. — set_initial_gibbs_values","text":"","code":"set_initial_gibbs_values(N, T, J, P_f, P_r, C)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/set_initial_gibbs_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set initial values for the Gibbs sampler. — set_initial_gibbs_values","text":"N number (greater equal 1) decision makers. T number (greater equal 1) choice occasions vector choice occasions length N (.e. decision maker specific number). J number (greater equal 2) choice alternatives. P_f number covariates connected fixed coefficient (can 0). P_r number covariates connected random coefficient (can 0). C number (greater equal 1) latent classes.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/set_initial_gibbs_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set initial values for the Gibbs sampler. — set_initial_gibbs_values","text":"list initial values Gibbs sampler.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/set_mfrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Balancing visualization of multiple figures. — set_mfrow","title":"Balancing visualization of multiple figures. — set_mfrow","text":"function finds balanced setting par(mfrow).","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/set_mfrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Balancing visualization of multiple figures. — set_mfrow","text":"","code":"set_mfrow(n)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/set_mfrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Balancing visualization of multiple figures. — set_mfrow","text":"n total number figures.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/set_mfrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Balancing visualization of multiple figures. — set_mfrow","text":"vector form c(nr,nc). par(mfrow = c(nr,nc)), subsequent figures drawn nr x nc array current device rows.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/set_mfrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Balancing visualization of multiple figures. — set_mfrow","text":"","code":"set_mfrow(3) #> [1] 2 2"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/simulate_choices.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate choice data. — simulate_choices","title":"Simulate choice data. — simulate_choices","text":"function simulates choice data RprobitB package.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/simulate_choices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate choice data. — simulate_choices","text":"","code":"simulate_choices(   form,   N,   T,   J,   re = NULL,   alternatives = NULL,   covariates = NULL,   seed = NULL,   ... )"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/simulate_choices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate choice data. — simulate_choices","text":"form formula object used specify probit model. structure choice ~ | B | C, names alternative choice situation specific covariates generic coefficient, B names choice situation specific covariates alternative specific coefficients, C names alternative choice situation specific covariates alternative specific coefficients. Separate multiple covariates one type + sign. default, alternative specific constants (ASCs) added model (except last alternative). can removed adding +0 second spot. See vignette vignette(\"data_management\", package = \"RprobitB\") details. N number (greater equal 1) decision makers. T number (greater equal 1) choice occasions vector choice occasions length N (.e. decision maker specific number). J number (greater equal 2) choice alternatives. re character (vector) covariates form random effects. re = NULL (default), random effects. random effects alternative specific constants, include \"ASC\" re. alternatives character vector names choice alternatives. specified, choice set defined observed choices. covariates named list covariate values. element must vector length equal number choice occasions named according covariate. Covariates values supplied drawn standard normal distribution. seed Set seed simulation. ... Optionally specify alpha, C, s, b, Omega, Sigma, Sigma_full, beta, z simulation.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/simulate_choices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate choice data. — simulate_choices","text":"object class RprobitB_data.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/simulate_choices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate choice data. — simulate_choices","text":"See vignette \"Choice data\" details: vignette(\"choice_data\", package = \"RprobitB\").","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/simulate_choices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate choice data. — simulate_choices","text":"","code":"data <- simulate_choices(   form = choice ~ cost | income | time,   N = 100,   T = 10,   J = 2,   re = c(\"cost\", \"time\"),   alternatives = c(\"car\", \"bus\"),   seed = 1,   alpha = c(-1,1),   C = 2 )"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/train_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Split choice data. — train_test","title":"Split choice data. — train_test","text":"function splits choice data train test part.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/train_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split choice data. — train_test","text":"","code":"train_test(   x,   test_proportion = NULL,   test_number = NULL,   by = \"N\",   random = FALSE,   seed = NULL )"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/train_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split choice data. — train_test","text":"x object class RprobitB_data. test_proportion number 0 1 gives proportion test subsample. test_number positive integer gives number observations test subsample. One \"N\" (split deciders) \"T\" (split choice occasions). random TRUE, subsamples build randomly. seed Set seed building subsamples randomly.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/train_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split choice data. — train_test","text":"list two objects class RprobitB_data, named \"train\"\"test\".","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/train_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split choice data. — train_test","text":"See vignette \"Choice data\" details: vignette(\"choice_data\", package = \"RprobitB\").","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/train_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split choice data. — train_test","text":"","code":"x <- simulate_choices(form = choice ~ covariate, N = 10, T = 10, J = 2)  # 70% of deciders in the train subsample, 30% of deciders in the test subsample train_test(x, test_proportion = 0.3, by = \"N\") #> $train #> Simulated data of 70 choices. #>  #> $test #> Simulated data of 30 choices. #>   # 2 randomly chosen choice occasions per decider in the test subsample, the rest # in the train subsample train_test(x, test_number = 2, by = \"T\", random = TRUE, seed = 1) #> $train #> Simulated data of 80 choices. #>  #> $test #> Simulated data of 20 choices. #>"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/transform_gibbs_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Transformation of Gibbs samples. — transform_gibbs_samples","title":"Transformation of Gibbs samples. — transform_gibbs_samples","text":"function normalizes, burns thins Gibbs samples.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/transform_gibbs_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transformation of Gibbs samples. — transform_gibbs_samples","text":"","code":"transform_gibbs_samples(gibbs_samples, R, B, Q, normalization)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/transform_gibbs_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transformation of Gibbs samples. — transform_gibbs_samples","text":"gibbs_samples output gibbs_sampling. R number iterations Gibbs sampler. B length burn-period, .e. non-negative number samples discarded. Q thinning factor Gibbs samples, .e. every Qth sample kept. normalization object class RprobitB_normalization.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/transform_gibbs_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transformation of Gibbs samples. — transform_gibbs_samples","text":"object class RprobitB_gibbs_samples, .e. list transformed Gibbs samples. element list, containing (available) Gibbs samples s, alpha, b, Omega, Sigma: gibbs_samples: function input gibbs_samples. gibbs_samples_n: list normalized samples based normalization. gibbs_samples_nb: list normalized burned samples based normalization B. gibbs_samples_nt: list normalized thinned samples based normalization Q gibbs_samples_nbt: list normalized, burned thinned samples based normalization, B Q","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/transform_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the length of the burn-in period, the thinning factor and the scale\r\nafter Gibbs sampling. — transform_model","title":"Change the length of the burn-in period, the thinning factor and the scale\r\nafter Gibbs sampling. — transform_model","text":"Given object class RprobitB_model, function can: change length B burn-period, change thinning factor Q Gibbs samples, change model scale.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/transform_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the length of the burn-in period, the thinning factor and the scale\r\nafter Gibbs sampling. — transform_model","text":"","code":"transform_model(   x,   B = NULL,   Q = NULL,   scale = NULL,   check_preference_flip = TRUE )"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/transform_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the length of the burn-in period, the thinning factor and the scale\r\nafter Gibbs sampling. — transform_model","text":"x object class RprobitB_model. B length burn-period, .e. non-negative number samples discarded. Q thinning factor Gibbs samples, .e. every Qth sample kept. scale named list three elements, determining parameter normalization respect utility scale: parameter: Either \"\" (linear coefficient \"alpha\") \"s\" (variance error-term covariance matrix \"Sigma\"). index: index parameter gets fixed. value: value fixed parameter. check_preference_flip TRUE check flip preferences new scale.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/transform_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change the length of the burn-in period, the thinning factor and the scale\r\nafter Gibbs sampling. — transform_model","text":"object class RprobitB_model.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/transform_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change the length of the burn-in period, the thinning factor and the scale\r\nafter Gibbs sampling. — transform_model","text":"See vignette \"Model fitting\" details: vignette(\"model_fitting\", package = \"RprobitB\").","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/transform_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Transformation of parameter values. — transform_parameter","title":"Transformation of parameter values. — transform_parameter","text":"function transforms parameter values based normalization.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/transform_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transformation of parameter values. — transform_parameter","text":"","code":"transform_parameter(parameter, normalization)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/transform_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transformation of parameter values. — transform_parameter","text":"parameter object class RprobitB_parameter. normalization object class RprobitB_normalization.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/transform_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transformation of parameter values. — transform_parameter","text":"object class RprobitB_parameter.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/undiff_Sigma.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform differenced to non-differenced error term covariance matrix. — undiff_Sigma","title":"Transform differenced to non-differenced error term covariance matrix. — undiff_Sigma","text":"function transforms differenced error term covariance matrix Sigma back non-differenced error term covariance matrix.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/undiff_Sigma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform differenced to non-differenced error term covariance matrix. — undiff_Sigma","text":"","code":"undiff_Sigma(Sigma, i, checks = TRUE, pos = TRUE, labels = TRUE)"},{"path":"https://loelschlaeger.github.io/RprobitB/reference/undiff_Sigma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform differenced to non-differenced error term covariance matrix. — undiff_Sigma","text":"Sigma error term covariance matrix dimension J-1 x J-1 differenced respect alternative . integer, alternative number respect Sigma differenced. checks TRUE function runs additional input transformation checks. pos TRUE function returns positive matrix. labels TRUE function adds labels output matrix.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/reference/undiff_Sigma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform differenced to non-differenced error term covariance matrix. — undiff_Sigma","text":"covariance matrix dimension J x J. covariance matrix gets differenced respect alternative , results Sigma.","code":""},{"path":"https://loelschlaeger.github.io/RprobitB/news/index.html","id":"rprobitb-1009000","dir":"Changelog","previous_headings":"","what":"RprobitB 1.0.0.9000","title":"RprobitB 1.0.0.9000","text":"function choice_probs now called choice_probabilities() make functionality clearer. Splitting data set train test part can now done function train_test(). Consequently, argument test_prob removed prepare_data() simulate_choices(). function simulate_choices() argument distr anymore. Instead, covariates can supplied via covariates argument. Consequently, argument standardize removed well. function compare now called model_selection() make functionality clearer. function prepare now called prepare_data() make functionality clearer. function simulate now called simulate_choices() mask stats::simulate(). function predict now called predict_choices() mask stats::predict(). function transform now called transform_model() mask base::transform(). README file now R Markdown format.","code":""}]
